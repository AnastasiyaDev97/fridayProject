{"version":3,"sources":["pages/Users/Users.module.scss","dal/users/index.ts","pages/Users/index.tsx"],"names":["module","exports","usersAPI","clientAPI","injectEndpoints","endpoints","build","getUsers","query","queryParams","URL","URI","addQuery","url","toString","getUser","useLazyGetUsersQuery","useGetUsersQuery","useGetUserQuery","SKELETON_LIST_ITEMS","generateArray","Users","useSearchParams","searchParams","useState","users","setUsers","loading","setLoading","page","setPage","totalCount","setTotalCount","userName","get","min","Number","max","sortUsers","fetchUsers","loadMoreNumbers","pageCount","PAGE_COUNT","newUsers","data","usersTotalCount","hasMoreData","length","className","style","usersPage","title","usersContainer","isLoading","onBottomHit","loadOnMount","map","avatar","email","name","publicCardPacksCount","id","_id","userMail","cardsCount","initialAvatar","item"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,MAAQ,qBAAqB,eAAiB,8B,gKCU/FC,E,MAAWC,EAAUC,gBAAgB,CACzCC,UAAW,SAACC,GAAkB,MAAM,CAClCC,SAAUD,EAAME,MAAqD,CACnEA,MAAK,SAACC,GACJ,IAAMC,EAAM,IAAIC,IAAI,gBAIpB,OAFAD,EAAIE,SAAS,eAAKH,IAEX,CACLI,IAAKH,EAAII,WAEb,IAEFC,QAAST,EAAME,MAAmD,CAChEA,MAAK,SAACC,GACJ,IAAMC,EAAM,IAAIC,IAAI,eAIpB,OAFAD,EAAIE,SAAS,eAAKH,IAEX,CACLI,IAAKH,EAAII,WAEb,IAEH,IAG+CE,GAAyBd,EAA5De,iBAA4Df,EAA1CgB,gBAA0ChB,EAAzBc,sB,eCxB5CG,EAAsBC,YAAc,GAsE3BC,UApED,WACZ,MAAuBC,cAAhBC,EAAiC,iBAArB,GAEnB,EAA0BC,mBAAqB,IAAG,mBAA3CC,EAAK,KAAEC,EAAQ,KACtB,EAA8BF,oBAAS,GAAM,mBAAtCG,EAAO,KAAEC,EAAU,KAC1B,EAAwBJ,mBAAS,GAAE,mBAA5BK,EAAI,KAAEC,EAAO,KACpB,EAAoCN,mBAAS,GAAE,mBAAxCO,EAAU,KAAEC,EAAa,KAE1BC,EAAWV,EAAaW,IAAI,QAC5BC,EAAMC,OAAOb,EAAaW,IAAI,SAAW,EACzCG,EAAMD,OAAOb,EAAaW,IAAI,SAAW,EACzCI,EAAYf,EAAaW,IAAI,SAAW,WAC9C,EAAqBlB,IAAduB,EAAoC,iBAA1B,GAEXC,EAAe,iDAAG,gGAEL,OADjBV,GAAQ,SAAAD,GAAI,OAAIA,EAAO,CAAC,IACxBD,GAAW,GAAM,SACMW,EAAW,CAChCV,OACAM,MACAE,MACAJ,WACAK,YACAG,UAAWC,MACV,KAAD,EAEU,QATNC,EAAQ,cASF,IAARA,GAAc,QAAN,EAARA,EAAUC,YAAI,OAAd,EAAgBnB,OAClBC,GAAS,SAAAD,GAAK,kCAAQA,GAAK,YAAc,OAARkB,QAAQ,IAARA,GAAc,QAAN,EAARA,EAAUC,YAAI,WAAN,EAAR,EAAgBnB,OAAK,IAErC,IAAfM,GAA4B,OAARY,QAAQ,IAARA,KAAUC,MAChCZ,EAAcW,EAASC,KAAKC,iBAE9BjB,GAAW,GAAO,2CACnB,kBAnBoB,mCAqBfkB,EAAcrB,EAAMsB,OAAShB,EAEnC,OACE,sBAAKiB,UAAWC,IAAMC,UAAU,UAC9B,oBAAIF,UAAWC,IAAME,MAAM,mBAC3B,sBAAKH,UAAWC,IAAMG,eAAe,UACnC,cAAC,IAAc,CACbN,YAAaA,EACbO,UAAW1B,EACX2B,YAAad,EACbe,aAAa,EAAK,SAEZ,OAAL9B,QAAK,IAALA,OAAK,EAALA,EAAO+B,KAAI,YAA6D,IAA1DC,EAAM,EAANA,OAAQC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAMC,EAAoB,EAApBA,qBAA2BC,EAAE,EAAPC,IACxD,OACE,cAAC,IAAY,CACX7B,SAAU0B,EACVI,SAAUL,EACVM,WAAYJ,EACZH,OAAc,OAANA,QAAM,IAANA,IAAUQ,KACbJ,EAGX,MAEiB,KAAb,OAALpC,QAAK,IAALA,OAAK,EAALA,EAAOsB,SACN5B,EAAoBqC,KAAI,SAAAU,GACtB,OAAO,cAAC,IAAoB,GAAMA,EACpC,SAIV,C","file":"static/js/12.bb3ca510.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"Users_usersPage__PcRdQ\",\"title\":\"Users_title__2CbOb\",\"usersContainer\":\"Users_usersContainer__3C_0g\"};","import URI from 'urijs';\r\n\r\nimport {\r\n  getUserQueryParamsType,\r\n  getUserResponseType,\r\n  getUsersQueryParamsType,\r\n  getUsersResponseType,\r\n} from './types';\r\n\r\nimport { builderType, clientAPI } from 'dal';\r\n\r\nconst usersAPI = clientAPI.injectEndpoints({\r\n  endpoints: (build: builderType) => ({\r\n    getUsers: build.query<getUsersResponseType, getUsersQueryParamsType>({\r\n      query(queryParams) {\r\n        const URL = new URI(`social/users`);\r\n\r\n        URL.addQuery({ ...queryParams });\r\n\r\n        return {\r\n          url: URL.toString(),\r\n        };\r\n      },\r\n    }),\r\n    getUser: build.query<getUserResponseType, getUserQueryParamsType>({\r\n      query(queryParams) {\r\n        const URL = new URI(`social/user`);\r\n\r\n        URL.addQuery({ ...queryParams });\r\n\r\n        return {\r\n          url: URL.toString(),\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetUsersQuery, useGetUserQuery, useLazyGetUsersQuery } = usersAPI;\r\n","import { useState } from 'react';\r\n\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport style from './Users.module.scss';\r\n\r\nimport initialAvatar from 'common/assets/images/noavatar.png';\r\nimport { ReturnComponentType } from 'common/types';\r\nimport { SkeletonUserListItem, UserListItem, InfiniteScroll } from 'components';\r\nimport { PAGE_COUNT } from 'constants/table';\r\nimport { useLazyGetUsersQuery } from 'dal/users';\r\nimport { UserType } from 'dal/users/types';\r\nimport { generateArray } from 'utils';\r\n\r\nconst SKELETON_LIST_ITEMS = generateArray(7);\r\n\r\nconst Users = (): ReturnComponentType => {\r\n  const [searchParams] = useSearchParams();\r\n\r\n  const [users, setUsers] = useState<UserType[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n\r\n  const userName = searchParams.get('name');\r\n  const min = Number(searchParams.get('min')) || 0;\r\n  const max = Number(searchParams.get('max')) || 0;\r\n  const sortUsers = searchParams.get('sort') || '0created';\r\n  const [fetchUsers] = useLazyGetUsersQuery();\r\n\r\n  const loadMoreNumbers = async (): Promise<void> => {\r\n    setPage(page => page + 1);\r\n    setLoading(true);\r\n    const newUsers = await fetchUsers({\r\n      page,\r\n      min,\r\n      max,\r\n      userName,\r\n      sortUsers,\r\n      pageCount: PAGE_COUNT,\r\n    });\r\n\r\n    if (newUsers?.data?.users) {\r\n      setUsers(users => [...users, ...(newUsers?.data?.users as UserType[])]);\r\n    }\r\n    if (totalCount === 0 && newUsers?.data) {\r\n      setTotalCount(newUsers.data.usersTotalCount);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const hasMoreData = users.length < totalCount;\r\n\r\n  return (\r\n    <div className={style.usersPage}>\r\n      <h2 className={style.title}>Users</h2>\r\n      <div className={style.usersContainer}>\r\n        <InfiniteScroll\r\n          hasMoreData={hasMoreData}\r\n          isLoading={loading}\r\n          onBottomHit={loadMoreNumbers}\r\n          loadOnMount={true}\r\n        >\r\n          {users?.map(({ avatar, email, name, publicCardPacksCount, _id: id }) => {\r\n            return (\r\n              <UserListItem\r\n                userName={name}\r\n                userMail={email}\r\n                cardsCount={publicCardPacksCount}\r\n                avatar={avatar ?? initialAvatar}\r\n                key={id}\r\n              />\r\n            );\r\n          })}\r\n        </InfiniteScroll>\r\n        {users?.length === 0 &&\r\n          SKELETON_LIST_ITEMS.map(item => {\r\n            return <SkeletonUserListItem key={item} />;\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Users;\r\n"],"sourceRoot":""}