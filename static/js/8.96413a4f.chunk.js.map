{"version":3,"sources":["hooks/useResponseHandler.tsx","pages/Login/Login.module.scss","pages/ForgotPassword/index.tsx"],"names":["useResponseHandler","isLoading","isSuccess","isError","dispatch","useAppDispatch","useEffect","setAppStatus","status","STATUS","LOADING","SUCCEEDED","FAILED","setErrorText","errorText","module","exports","ForgotPassword","useSendPasswordMutation","sendPassword","sendPasswordResponseData","data","navigate","useNavigate","emailForRecovery","useAppSelector","state","profile","email","useState","isCheckEmailDataShow","setIsCheckEmailDataShow","formik","useFormik","initialValues","EMPTY_STRING","validate","values","errors","validateForgotPasswordForm","onSubmit","setProfileData","resetForm","onButtonTogglePasswordStatusClick","useCallback","ROUTES","LOGIN","isActionButtonDisabled","Object","keys","length","dirty","success","className","styles","wrapper","sendMailBlock","title","sendMailMessage","sendMailBtn","type","onClick","form","e","handleSubmit","inputsWrapper","validationErr","touched","formikProps","getFieldProps","submitBtn","disabled","registerLink","to"],"mappings":"wGAAA,sEAYaA,EAAqB,SAAH,GAII,IAHjCC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAO,EAAPA,QAEMC,EAAWC,cAEjBC,qBAAU,WACJL,GACFG,EAASG,YAAa,CAAEC,OAAQC,IAAOC,WAErCR,GACFE,EAASG,YAAa,CAAEC,OAAQC,IAAOE,aAErCR,IACFC,EAASG,YAAa,CAAEC,OAAQC,IAAOG,UACvCR,EAASS,YAAa,CAAEC,UAAW,0BAEvC,GAAG,CAACV,EAAUH,EAAWC,EAAWC,GACtC,C,sBC9BAY,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,oBAAoB,cAAgB,6BAA6B,iBAAmB,gCAAgC,UAAY,yBAAyB,aAAe,4BAA4B,IAAM,mBAAmB,MAAQ,qBAAqB,cAAgB,6BAA6B,YAAc,2BAA2B,gBAAkB,+BAA+B,YAAc,2B,gLCyH1bC,UA1GQ,WAA4B,IAAD,EAC1Cb,EAAWC,cAEjB,EAGIa,cAAyB,mBAF3BC,EAAY,YACJC,EAAwB,EAA9BC,KAAgClB,EAAO,EAAPA,QAASF,EAAS,EAATA,UAAWC,EAAS,EAATA,UAGlDoB,EAAWC,cAEXC,EAAmBC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQC,KAAK,IAEpE,EAAwDC,oBAAS,GAAM,mBAAhEC,EAAoB,KAAEC,EAAuB,KAE9CC,EAASC,YAAU,CACvBC,cAAe,CACbN,MAAOO,KAETC,SAAU,SAAAC,GACR,IAAMC,EAAmB,CAAC,EAI1B,OAFAC,YAA2BF,EAAQC,GAE5BA,CACT,EAEAE,SAAU,SAAAH,GACRlB,EAAakB,EAAOT,OACpBxB,EAASqC,YAAe,CAAEb,MAAOS,EAAOT,SACxCI,EAAOU,WACT,IAGIC,EAAoCC,uBAAY,WACpDb,GAAwB,GACxBT,EAASuB,IAAOC,MAClB,GAAG,CAACxB,IAEEyB,GAAmD,QAA1B,EAAAC,OAAOC,KAAKjB,EAAOM,eAAO,aAA1B,EAA4BY,QAAS,IAAMlB,EAAOmB,MAcjF,OAZA7C,qBAAU,WACoB,OAAxBc,QAAwB,IAAxBA,KAA0BgC,SAC5BrB,GAAwB,EAE5B,GAAG,CAACX,IAEJpB,YAAmB,CACjBC,YACAC,YACAC,YAIA,qBAAKkD,UAAWC,IAAOC,QAAQ,SAC5BzB,EACC,sBAAKuB,UAAWC,IAAOE,cAAc,UACnC,oBAAIH,UAAWC,IAAOG,MAAM,yBAC5B,sBAAKJ,UAAWC,IAAOI,gBAAgB,sDACUlC,KAEjD,cAAC,IAAW,CACV6B,UAAWC,IAAOK,YAClBC,KAAK,SACLC,QAASlB,EAAkC,mBAM/C,qCACE,oBAAIU,UAAWC,IAAOG,MAAM,mCAC5B,uBACEJ,UAAWC,IAAOQ,KAClBtB,SAAU,SAAAuB,GACR/B,EAAOgC,aAAaD,EACtB,EAAE,UAEF,qBAAKV,UAAWC,IAAOW,cAAc,SACnC,cAAC,IAAc,CACbC,cACGlC,EAAOmC,QAAQvC,OAASI,EAAOM,OAAOV,OAAUO,IAEnDiC,YAAapC,EAAOqC,cAAc,aAItC,qGAEA,cAAC,IAAW,CACVhB,UAAWC,IAAOgB,UAClBV,KAAK,SACLW,SAAUxB,EAAuB,kCAKrC,iEACA,cAAC,IAAO,CAACM,UAAWC,IAAOkB,aAAcC,GAAI5B,IAAOC,MAAM,gCAOpE,C","file":"static/js/8.96413a4f.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\n\r\nimport { STATUS } from 'constants/app';\r\nimport { useAppDispatch } from 'store';\r\nimport { setAppStatus, setErrorText } from 'store/reducers';\r\n\r\ntype UseResponsePropsType = {\r\n  isLoading: boolean;\r\n  isSuccess: boolean;\r\n  isError: boolean;\r\n};\r\n\r\nexport const useResponseHandler = ({\r\n  isLoading,\r\n  isSuccess,\r\n  isError,\r\n}: UseResponsePropsType): void => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      dispatch(setAppStatus({ status: STATUS.LOADING }));\r\n    }\r\n    if (isSuccess) {\r\n      dispatch(setAppStatus({ status: STATUS.SUCCEEDED }));\r\n    }\r\n    if (isError) {\r\n      dispatch(setAppStatus({ status: STATUS.FAILED }));\r\n      dispatch(setErrorText({ errorText: 'Something went wrong' }));\r\n    }\r\n  }, [dispatch, isLoading, isSuccess, isError]);\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__2x3h7\",\"form\":\"Login_form__1Y1Hi\",\"inputsWrapper\":\"Login_inputsWrapper__3uV0P\",\"registrationBtns\":\"Login_registrationBtns__egO9s\",\"submitBtn\":\"Login_submitBtn__2rn6V\",\"registerLink\":\"Login_registerLink__1o25-\",\"row\":\"Login_row__Et2_Y\",\"title\":\"Login_title__20JwF\",\"sendMailBlock\":\"Login_sendMailBlock__3_DYD\",\"sendMailBtn\":\"Login_sendMailBtn__3L4Rz\",\"sendMailMessage\":\"Login_sendMailMessage__1FO15\",\"registerBtn\":\"Login_registerBtn__1q6kn\"};","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\n\r\nimport { ReturnComponentType } from 'common/types/ReturnComponentType';\r\nimport { UniversalInput, SuperButton } from 'components';\r\nimport { EMPTY_STRING } from 'constants/index';\r\nimport { ROUTES } from 'constants/routes';\r\nimport { useSendPasswordMutation } from 'dal/authorization';\r\nimport { useResponseHandler } from 'hooks/useResponseHandler';\r\nimport styles from 'pages/Login/Login.module.scss';\r\nimport { useAppDispatch, useAppSelector } from 'store';\r\nimport { setProfileData } from 'store/reducers';\r\nimport { AuthData, validateForgotPasswordForm } from 'utils';\r\n\r\nconst ForgotPassword = (): ReturnComponentType => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [\r\n    sendPassword,\r\n    { data: sendPasswordResponseData, isError, isLoading, isSuccess },\r\n  ] = useSendPasswordMutation();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const emailForRecovery = useAppSelector(state => state.profile.email);\r\n\r\n  const [isCheckEmailDataShow, setIsCheckEmailDataShow] = useState(false);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: EMPTY_STRING,\r\n    },\r\n    validate: values => {\r\n      const errors: AuthData = {};\r\n\r\n      validateForgotPasswordForm(values, errors);\r\n\r\n      return errors;\r\n    },\r\n\r\n    onSubmit: values => {\r\n      sendPassword(values.email);\r\n      dispatch(setProfileData({ email: values.email }));\r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n  const onButtonTogglePasswordStatusClick = useCallback(() => {\r\n    setIsCheckEmailDataShow(false);\r\n    navigate(ROUTES.LOGIN);\r\n  }, [navigate]);\r\n\r\n  const isActionButtonDisabled = Object.keys(formik.errors)?.length > 0 || !formik.dirty;\r\n\r\n  useEffect(() => {\r\n    if (sendPasswordResponseData?.success) {\r\n      setIsCheckEmailDataShow(true);\r\n    }\r\n  }, [sendPasswordResponseData]);\r\n\r\n  useResponseHandler({\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n  });\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      {isCheckEmailDataShow ? (\r\n        <div className={styles.sendMailBlock}>\r\n          <h2 className={styles.title}>Check email</h2>\r\n          <div className={styles.sendMailMessage}>\r\n            We&apos;ve sent an Email with instructions to {emailForRecovery}\r\n          </div>\r\n          <SuperButton\r\n            className={styles.sendMailBtn}\r\n            type=\"button\"\r\n            onClick={onButtonTogglePasswordStatusClick}\r\n          >\r\n            Ok\r\n          </SuperButton>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h2 className={styles.title}>Forgot your password?</h2>\r\n          <form\r\n            className={styles.form}\r\n            onSubmit={e => {\r\n              formik.handleSubmit(e);\r\n            }}\r\n          >\r\n            <div className={styles.inputsWrapper}>\r\n              <UniversalInput\r\n                validationErr={\r\n                  (formik.touched.email && formik.errors.email) || EMPTY_STRING\r\n                }\r\n                formikProps={formik.getFieldProps('email')}\r\n              />\r\n            </div>\r\n\r\n            <div>Enter your email address and we will send you further instructions</div>\r\n\r\n            <SuperButton\r\n              className={styles.submitBtn}\r\n              type=\"submit\"\r\n              disabled={isActionButtonDisabled}\r\n            >\r\n              Send instructions\r\n            </SuperButton>\r\n          </form>\r\n          <div>Do you remember your password?</div>\r\n          <NavLink className={styles.registerLink} to={ROUTES.LOGIN}>\r\n            Try logging in\r\n          </NavLink>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n"],"sourceRoot":""}