{"version":3,"sources":["App.module.css","common/components/Input/UniversalInput.module.scss","Components/TestComponents/components/c2-SuperButton/SuperButton.module.scss","Components/TestComponents/components/c3-SuperCheckbox/SuperCheckbox.module.css","Components/TestComponents/components/c1-SuperInputText/SuperInputText.module.css","Components/Header/Header.module.scss","Components/TestComponents/TestComponents.module.css","Components/Login/Login.module.scss","Components/TestComponents/components/c2-SuperButton/SuperButton.tsx","Components/TestComponents/components/c3-SuperCheckbox/SuperCheckbox.tsx","dal/api.ts","store/reducers/app-reducer.ts","store/reducers/profile-reducer.ts","utils/error-utils.ts","store/reducers/login-reducer.ts","Components/TestComponents/components/c1-SuperInputText/SuperInputText.tsx","common/components/Input/UniversalInput.tsx","Components/Login/Login.tsx","Components/Profile/Profile.tsx","store/reducers/registration-reducer.ts","Components/Redistration/Registration.tsx","Components/NotFound/NotFound.tsx","store/reducers/passwordRecovery-reducer.ts","Components/ForgotPassword/ForgotPassword.tsx","Components/NewPassword/NewPassword.tsx","Components/TestComponents/TestComponents.tsx","Components/Header/Header.tsx","common/assets/svg/oval.svg","common/Preloader/Preloader.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["module","exports","SuperButton","red","className","restProps","finalClassName","s","btn","default","SuperCheckbox","type","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox","labelForCheckBox","e","currentTarget","checked","instance","axios","create","baseURL","withCredentials","authorizationAPI","email","password","post","then","res","console","log","data","loginAuthData","delete","messageDataPassword","from","message","newPassData","initialState","status","isInitialized","error","setAppStatusAC","payload","setErrorText","profile","catchErrorHandler","dispatch","err","isLoggedIn","isAuthToggleAC","SuperInputText","onChangeText","onKeyPress","onEnter","useDispatch","input","errorInput","superInput","value","key","UniversalInput","props","useState","passwordShown","setPasswordShown","styles","inputWrapper","placeholder","formikProps","name","isPassword","togglePassBtn","onClick","validationErr","Login","formik","useFormik","initialValues","rememberMe","validate","values","errors","test","length","onSubmit","catch","response","resetForm","useSelector","state","login","to","wrapper","form","handleSubmit","inputsWrapper","touched","getFieldProps","row","submitBtn","registerLink","Profile","registerStatus","registerStatusAC","Registration","confirmPassword","finally","register","registrationBtns","NotFound","responseInfoForgotPass","responseInfoNewPass","emailForRecovery","SetResponseInfoForgotPassAC","SetResponseInfoNewPassAC","addEmailAC","ForgotPassword","passRecovery","info","sendMailBlock","sendMailBtn","NewPassword","some","useParams","newPassDataType","resetPasswordToken","TestComponents","text","setText","showAlert","alert","setChecked","column","blue","disabled","Header","headerBlock","container","logout","Preloader","src","preload","alt","style","width","App","app","useEffect","appWrapper","mainBlock","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7fdbd58.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__rjX5L\",\"mainBlock\":\"App_mainBlock__3yE-n\",\"err\":\"App_err__2QqvI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"UniversalInput_inputWrapper__1pOz9\",\"input\":\"UniversalInput_input__1Lh8z\",\"togglePassBtn\":\"UniversalInput_togglePassBtn__1McrO\",\"error\":\"UniversalInput_error__32yEU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SuperButton_btn__1J1we\",\"red\":\"SuperButton_red__3tJ4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__2cpqV\",\"spanClassName\":\"SuperCheckbox_spanClassName__23i5x\",\"labelForCheckBox\":\"SuperCheckbox_labelForCheckBox__3gJhp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__3wnaw\",\"superInput\":\"SuperInputText_superInput__36AEF\",\"errorInput\":\"SuperInputText_errorInput__26Z7d\",\"error\":\"SuperInputText_error__32TC9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBlock\":\"Header_headerBlock__2aNET\",\"container\":\"Header_container__3IPHz\",\"logout\":\"Header_logout__3U8OT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blue\":\"TestComponents_blue__3NePE\",\"column\":\"TestComponents_column__8ud9P\",\"testSpanError\":\"TestComponents_testSpanError__m8w_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__3IxIc\",\"form\":\"Login_form__2kh63\",\"inputsWrapper\":\"Login_inputsWrapper__2KSMZ\",\"row\":\"Login_row__dpAYZ\",\"registrationBtns\":\"Login_registrationBtns__jDpW4\",\"submitBtn\":\"Login_submitBtn__3Ot_n\",\"registerLink\":\"Login_registerLink__28j0B\",\"sendMailBlock\":\"Login_sendMailBlock__1BucO\",\"sendMailBtn\":\"Login_sendMailBtn__8e8z7\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.scss'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${s.btn} ${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange&&onChange(e)\r\n        onChangeChecked&&onChangeChecked(e.currentTarget.checked)\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label className={s.labelForCheckBox}>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import axios from \"axios\";\r\nimport {loginAuthDataType} from \"../store/reducers/login-reducer\";\r\n\r\nexport type ResponseLoginType = {\r\n    created: Date\r\n    email: string\r\n    isAdmin: boolean\r\n    name: string\r\n    publicCardPacksCount: number\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    updated: Date\r\n    verified: boolean\r\n    __v: number\r\n    _id: string\r\n    error?: string\r\n}\r\ntype RegisterErrorResponse = {\r\n    error?: string\r\n}\r\ntype LogoutResponse = {\r\n    info?: string\r\n    error?: string\r\n}\r\n\r\ntype ResponseForgotPasswordType = {\r\n    answer?: boolean\r\n    html?: boolean\r\n    info?: string\r\n    success?: boolean\r\n    error?: string\r\n}\r\n\r\nexport type newPassDataType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true,\r\n})\r\nexport const authorizationAPI = {\r\n    registerMe(email: string, password: string) {\r\n        return instance.post<RegisterErrorResponse>(`auth/register`, {email, password})\r\n            .then(res => {\r\n                console.log(res.data)\r\n                return res.data\r\n            })\r\n    },\r\n    loginMe(loginAuthData: loginAuthDataType) {\r\n        return instance.post<ResponseLoginType>(`auth/login`, loginAuthData)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n\r\n    },\r\n    logoutMe() {\r\n        return instance.delete<LogoutResponse>(`auth/me`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    authMe() {\r\n        return instance.post<ResponseLoginType>(`auth/me`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    sendPassword(email: string) {\r\n        const messageDataPassword = {\r\n            email,\r\n            from: 'test-front-admin <ai73a@yandex.by>',\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\npassword recovery link: <a href='https://nastyaZ23.github.io/fridayProject/new-password#/new-password/$token$'>\r\nlink</a></div>`\r\n        }\r\n        return axios.post<ResponseForgotPasswordType>(`https://neko-back.herokuapp.com/2.0/auth/forgot`, messageDataPassword,\r\n            {withCredentials: true})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    setNewPassword(newPassData:newPassDataType) {\r\n        return axios.post<LogoutResponse>(`https://neko-back.herokuapp.com/2.0/auth/set-new-password`,newPassData,\r\n            {withCredentials: true})\r\n            .then(res => {\r\n\r\n                return res.data\r\n            })\r\n    }\r\n}\r\n\r\n/*\r\n<!--https://nastyaZ23.github.io/fridayProject-->*/\r\n","import {isAuthToggleAC} from \"./login-reducer\";\r\nimport {setProfileAC} from \"./profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authorizationAPI} from \"../../dal/api\";\r\nimport {registerStatusAC} from \"./registration-reducer\";\r\nimport {\r\n    addEmailAC,\r\n    SetResponseInfoForgotPassAC,\r\n    SetResponseInfoNewPassAC\r\n} from \"./passwordRecovery-reducer\";\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    isInitialized: false,\r\n    error: null as null | string\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n        case \"SET-ERROR\":\r\n            return {...state, ...action.payload}\r\n        case 'INITIALIZE': {\r\n            return {...state, isInitialized: true}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: 'APP/SET-STATUS',\r\n    payload: {\r\n        status,\r\n    }\r\n} as const)\r\n\r\nexport const setIsInitializedAC = () => ({\r\n    type: 'INITIALIZE'\r\n} as const)\r\n\r\nexport const setErrorText = (error: null | string) => {\r\n    return (\r\n        {\r\n            type: 'SET-ERROR',\r\n            payload: {error}\r\n        } as const)\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authorizationAPI.authMe()\r\n        .then(res => {\r\n            console.log(res)\r\n            dispatch(isAuthToggleAC(true))\r\n        })\r\n        .catch(() => {\r\n            dispatch(isAuthToggleAC(false))\r\n        })\r\n        .finally(() => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(setIsInitializedAC())\r\n            }\r\n        )\r\n}\r\n\r\n\r\nexport type ActionsType = ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof isAuthToggleAC>\r\n    | ReturnType<typeof setProfileAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n    | ReturnType<typeof setErrorText>\r\n    | ReturnType<typeof registerStatusAC>\r\n    | ReturnType<typeof SetResponseInfoForgotPassAC>\r\n    | ReturnType<typeof addEmailAC>\r\n    | ReturnType<typeof SetResponseInfoNewPassAC>\r\n\r\n","\r\nimport {ResponseLoginType} from \"../../dal/api\";\r\nimport {ActionsType} from \"./app-reducer\";\r\n\r\n\r\nconst initialState = {\r\n    profile:{\r\n\r\n    }\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-PROFILE':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const setProfileAC = (profile: ResponseLoginType) => ({\r\n    type: 'SET-PROFILE',\r\n    payload: {\r\n        profile,\r\n    }\r\n} as const)","\r\nimport {Dispatch} from \"redux\";\r\nimport {setAppStatusAC, setErrorText} from \"../store/reducers/app-reducer\";\r\n\r\n\r\nexport const catchErrorHandler = (dispatch: Dispatch, err: string) => {\r\n\r\n    dispatch(setErrorText(err))\r\n    dispatch(setAppStatusAC('failed'))\r\n}","import {Dispatch} from \"redux\";\r\nimport {authorizationAPI} from \"../../dal/api\";\r\nimport {ActionsType, setAppStatusAC} from \"./app-reducer\";\r\nimport {setProfileAC} from \"./profile-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nexport type loginAuthDataType={\r\n    email: string\r\n    password:string\r\n    rememberMe:boolean\r\n}\r\n\r\nlet initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const loginReducer = (state: InitialStateType=initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"TOGGLE-IS-AUTH\":\r\n            return {...state,...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const isAuthToggleAC = (isLoggedIn: boolean) =>\r\n    ({\r\n        type: 'TOGGLE-IS-AUTH',\r\n        payload: {\r\n            isLoggedIn\r\n        }\r\n    } as const)\r\n\r\nexport const loginTC=(loginAuthData:loginAuthDataType)=>{\r\n    return (dispatch:Dispatch<ActionsType>)=>{\r\n        dispatch(setAppStatusAC('loading'))\r\n        authorizationAPI.loginMe(loginAuthData)\r\n            .then((res)=>{\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(isAuthToggleAC(true))\r\n                dispatch(setProfileAC(res))\r\n            })\r\n            .catch((err: AxiosError) =>{\r\n                const error = err.response?err.response.data.error: (err.message + ', more details in the console')\r\n             catchErrorHandler(dispatch, error)})\r\n    }\r\n}\r\n\r\nexport const logoutTC=()=>{\r\n    return (dispatch:Dispatch<ActionsType>)=>{\r\n        dispatch(setAppStatusAC('loading'))\r\n        authorizationAPI.logoutMe()\r\n            .then(()=>{\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(isAuthToggleAC(false))\r\n            })\r\n            .catch((err: AxiosError) =>{\r\n                const error = err.response?err.response.data.error: (err.message + ', more details in the console')\r\n                catchErrorHandler(dispatch, error)})\r\n    }\r\n}","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setErrorText} from \"../../../../store/reducers/app-reducer\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string|null\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const dispatch=useDispatch()\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n        dispatch(setErrorText(null))\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className} ` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperInputText\r\n","import styles from \"./UniversalInput.module.scss\"\r\nimport SuperInputText from \"../../../Components/TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport React, {useState} from \"react\";\r\nimport {FieldInputProps} from \"formik\";\r\n\r\ntype universalInputPropsType = {\r\n    validationErr: string\r\n    formikProps: FieldInputProps<any>\r\n    type?: string\r\n    isPassword?: boolean\r\n}\r\n\r\nexport const UniversalInput = (props: universalInputPropsType) => {\r\n    let [passwordShown, setPasswordShown] = useState(false);\r\n    const toggleShowPassword = () => {\r\n        setPasswordShown(!passwordShown)\r\n    }\r\n    return (\r\n        <div className={styles.inputWrapper}>\r\n            <SuperInputText className={styles.input}\r\n                            placeholder={props.formikProps.name}\r\n                            {...props.formikProps}\r\n                            type={!passwordShown && props.type ? 'password' : 'text'}/>\r\n            {props.isPassword && <span className={styles.togglePassBtn} onClick={toggleShowPassword}></span>}\r\n            <div className={styles.error}>{props.validationErr}</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport SuperButton from \"../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport SuperCheckbox from \"../TestComponents/components/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\n\r\nimport {loginTC} from \"../../store/reducers/login-reducer\";\r\nimport {Navigate, NavLink} from 'react-router-dom';\r\nimport styles from './Login.module.scss'\r\nimport {UniversalInput} from \"../../common/components/Input/UniversalInput\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            const passwordRegex = /(?=.*[0-9])/\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 8) {\r\n                errors.password = \"Password must be 8 characters long.\";\r\n            } else if (!passwordRegex.test(values.password)) {\r\n                errors.password = \"Invalid password. Must contain one number.\";\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n\r\n        },\r\n    })\r\n\r\n    let isLoggedIn = useSelector<RootReducerType, boolean>(state => state.login.isLoggedIn)\r\n    if (isLoggedIn) {\r\n        return <Navigate to='/'/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <h2>Welcome</h2>\r\n            <form className={styles.form} onSubmit={(e) => {\r\n                formik.handleSubmit(e)\r\n            }}>\r\n                <div className={styles.inputsWrapper}>\r\n                    <UniversalInput validationErr={(formik.touched.email && formik.errors.email) || ''}\r\n                                    formikProps={formik.getFieldProps('email')}/>\r\n                    <UniversalInput validationErr={(formik.touched.password && formik.errors.password) || ''}\r\n                                    formikProps={formik.getFieldProps('password')} type='password'\r\n                                    isPassword={true}/>\r\n\r\n                </div>\r\n                <div className={styles.row}>\r\n                    <SuperCheckbox checked={formik.values.rememberMe}\r\n                                   {...formik.getFieldProps('rememberMe')}>Remember Me</SuperCheckbox>\r\n                    <NavLink to='/forgot-password'>Lost Password?</NavLink>\r\n                </div>\r\n                <SuperButton className={styles.submitBtn} type=\"submit\">Login</SuperButton>\r\n            </form>\r\n\r\n            <NavLink className={styles.registerLink} to='/registration'>Register</NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\n\r\n\r\nexport const Profile=()=>{\r\n    let isLoggedIn = useSelector<RootReducerType, boolean>(state => state.login.isLoggedIn)\r\n    if (!isLoggedIn) {\r\n        return <Navigate to='/login'/>\r\n    }\r\n    return(\r\n        <div>\r\n            <div></div>\r\n            Profile\r\n        </div>\r\n    )\r\n}","import {ActionsType, setAppStatusAC} from \"./app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authorizationAPI} from \"../../dal/api\";\r\n\r\n\r\nlet initialState = {registerStatus: false}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n\r\n        case \"SET-REGISTER-STATUS\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const registerStatusAC = (registerStatus: boolean) =>\r\n    ({\r\n        type: 'SET-REGISTER-STATUS',\r\n        payload: {registerStatus}\r\n    } as const)\r\n\r\nexport const registerMeTC = (email: string, password: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authorizationAPI.registerMe(email, password)\r\n        .then(() => {\r\n\r\n            dispatch(registerStatusAC(true))\r\n        })\r\n        .catch(()=>{\r\n            dispatch(registerStatusAC(false))\r\n        })\r\n        .finally(()=>{\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\n","import React from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport SuperButton from \"../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {registerMeTC, registerStatusAC} from \"../../store/reducers/registration-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport styles from \"../Login/Login.module.scss\";\r\n\r\nimport {UniversalInput} from \"../../common/components/Input/UniversalInput\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\n\r\nexport const Registration = () => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n        },\r\n        validate: (values) => {\r\n            const passwordRegex = /(?=.*[0-9])/\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 8) {\r\n                errors.password = \"Password must be 8 characters long.\";\r\n            } else if (!passwordRegex.test(values.password)) {\r\n                errors.password = \"Invalid password. Must contain one number.\";\r\n            }\r\n            if (!values.confirmPassword) {\r\n                errors.confirmPassword = \"Required\";\r\n            }\r\n            if (values.password && values.confirmPassword) {\r\n                if (values.password !== values.confirmPassword) {\r\n                    errors.confirmPassword = \"Password not matched\";\r\n                }\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(registerMeTC(values.email, values.password))\r\n            formik.resetForm()\r\n\r\n\r\n        },\r\n    })\r\n    const cancelHandler = () => {\r\n        formik.resetForm()\r\n    }\r\n    let registerStatus = useSelector<RootReducerType, boolean>(state => state.register.registerStatus)\r\n    if (registerStatus) {\r\n        dispatch(registerStatusAC(false))\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n    return (\r\n\r\n        <div className={styles.wrapper}>\r\n            <h2>Sign up</h2>\r\n            <form onSubmit={formik.handleSubmit} className={styles.form}>\r\n                <div className={styles.inputsWrapper}>\r\n\r\n                    <UniversalInput validationErr={(formik.touched.email && formik.errors.email) || ''}\r\n                                    formikProps={formik.getFieldProps('email')}/>\r\n                    <UniversalInput validationErr={(formik.touched.password && formik.errors.password) || ''}\r\n                                    formikProps={formik.getFieldProps('password')} type='password'\r\n                                    isPassword={true}/>\r\n                    <UniversalInput\r\n                        validationErr={(formik.touched.confirmPassword && formik.errors.confirmPassword) || ''}\r\n                        formikProps={formik.getFieldProps('confirmPassword')} type='password'\r\n                        isPassword={true}/>\r\n\r\n                </div>\r\n                <div className={styles.row}>\r\n                    <div className={styles.registrationBtns}>\r\n                        <SuperButton type='button' onClick={cancelHandler}>Cancel</SuperButton>\r\n                        <SuperButton type='submit'>Register</SuperButton>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\n\r\nexport const NotFound=()=>{\r\n    return(\r\n        <div>\r\n            NotFound\r\n        </div>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\nimport {ActionsType, setAppStatusAC} from \"./app-reducer\";\r\nimport {authorizationAPI, newPassDataType} from \"../../dal/api\";\r\nimport {AxiosError} from \"axios\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\n\r\n\r\nlet initialState = {\r\n    responseInfoForgotPass: '',\r\n    responseInfoNewPass:'',\r\n    emailForRecovery: null as null | string\r\n\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"SET-RESPONSE-INFO-FORGOT-PASS\":\r\n        case \"SET-RESPONSE-INFO-NEW-PASS\":\r\n        case \"ADD-EMAIL\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetResponseInfoForgotPassAC = (responseInfoForgotPass: string) =>\r\n    ({\r\n        type: 'SET-RESPONSE-INFO-FORGOT-PASS',\r\n        payload: {responseInfoForgotPass}\r\n    } as const)\r\nexport const SetResponseInfoNewPassAC = (responseInfoNewPass: string) =>\r\n    ({\r\n        type: 'SET-RESPONSE-INFO-NEW-PASS',\r\n        payload: {responseInfoNewPass}\r\n    } as const)\r\n\r\n\r\nexport const addEmailAC = (emailForRecovery: string) =>\r\n    ({\r\n        type: 'ADD-EMAIL',\r\n        payload: {emailForRecovery}\r\n    } as const)\r\n\r\nexport const sendPassword = (email: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        authorizationAPI.sendPassword(email)\r\n            .then((res) => {\r\n                dispatch(addEmailAC(email))\r\n                res.info && dispatch(SetResponseInfoForgotPassAC(res.info))\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                const error = err.response ? err.response.data.error : (err.message + ', more details in the console')\r\n                catchErrorHandler(dispatch, error)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const setNewPasswordTC = (newPassData: newPassDataType) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        authorizationAPI.setNewPassword(newPassData)\r\n            .then((res) => {\r\n                res.info && dispatch(SetResponseInfoNewPassAC(res.info))\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                const error = err.response ? err.response.data.error : (err.message + ', more details in the console')\r\n                catchErrorHandler(dispatch, error)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}","import React from 'react';\r\nimport styles from \"../Login/Login.module.scss\";\r\nimport {UniversalInput} from \"../../common/components/Input/UniversalInput\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport SuperButton from \"../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {\r\n    addEmailAC,\r\n    sendPassword,\r\n    SetResponseInfoForgotPassAC\r\n} from \"../../store/reducers/passwordRecovery-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n}\r\n\r\nexport const ForgotPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const emailForRecovery = useSelector<RootReducerType, null | string>(state => state.passRecovery.emailForRecovery)\r\n    const responseInfoForgotPass = useSelector<RootReducerType, string>(state => state.passRecovery.responseInfoForgotPass)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(sendPassword(values.email))\r\n\r\n        },\r\n    })\r\n    const toggleSensPassStatus = () => {\r\n        dispatch(SetResponseInfoForgotPassAC(''))\r\n        dispatch(addEmailAC(''))\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n\r\n            {responseInfoForgotPass ? <div className={styles.sendMailBlock}>\r\n                    <h2>Check email</h2>\r\n                    <div>We've sent an Email with instructions to {emailForRecovery}</div>\r\n                    <SuperButton className={styles.sendMailBtn} type='button'\r\n                                 onClick={toggleSensPassStatus}>Ok</SuperButton></div>\r\n\r\n                : <>\r\n                    <h2>Forgot your password?</h2>\r\n                    <form className={styles.form} onSubmit={(e) => {\r\n                        formik.handleSubmit(e)\r\n                    }}>\r\n                        <div className={styles.inputsWrapper}>\r\n                            <UniversalInput validationErr={(formik.touched.email && formik.errors.email) || ''}\r\n                                            formikProps={formik.getFieldProps('email')}/>\r\n                        </div>\r\n                        <div>\r\n                            Enter your email address and we will send you further instructions\r\n                        </div>\r\n                        <SuperButton className={styles.submitBtn} type=\"submit\">Send instructions</SuperButton>\r\n                    </form>\r\n                    <div>Do you remember your password?</div>\r\n                    <NavLink className={styles.registerLink} to='/login'>Try logging in</NavLink>\r\n                </>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport styles from \"../Login/Login.module.scss\";\r\nimport {UniversalInput} from \"../../common/components/Input/UniversalInput\";\r\nimport SuperButton from \"../TestComponents/components/c2-SuperButton/SuperButton\";\r\n\r\nimport {useFormik} from \"formik\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {\r\n    setNewPasswordTC,\r\n    SetResponseInfoNewPassAC\r\n} from \"../../store/reducers/passwordRecovery-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    password?: string\r\n}\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch()\r\n    const params = useParams<'*'>()\r\n    const some = params['*']\r\n\r\n    const responseInfoNewPass = useSelector<RootReducerType, string>(state => state.passRecovery.responseInfoNewPass)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            const passwordRegex = /(?=.*[0-9])/\r\n            if (!values.password) {\r\n                errors.password = \"Required\";\r\n            } else if (values.password.length < 8) {\r\n                errors.password = \"Password must be 8 characters long.\";\r\n            } else if (!passwordRegex.test(values.password)) {\r\n                errors.password = \"Invalid password. Must contain one number.\";\r\n\r\n            }\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            let newPassDataType = {\r\n                password: values.password,\r\n                resetPasswordToken: some || ''\r\n            }\r\n            dispatch(setNewPasswordTC(newPassDataType))\r\n        },\r\n    })\r\n    if(responseInfoNewPass){\r\n        dispatch(SetResponseInfoNewPassAC(''))\r\n       return <Navigate to='/login'/>\r\n    }\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <h2>Create new password</h2>\r\n            <form className={styles.form} onSubmit={(e) => {\r\n                formik.handleSubmit(e)\r\n            }}>\r\n                <div className={styles.inputsWrapper}>\r\n                    <UniversalInput validationErr={(formik.touched.password && formik.errors.password) || ''}\r\n                                    formikProps={formik.getFieldProps('password')} type='password'\r\n                                    isPassword={true}/>\r\n                </div>\r\n                <SuperButton className={styles.submitBtn} type=\"submit\">Create new password</SuperButton>\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './TestComponents.module.css'\r\nimport SuperInputText from \"./components/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"./components/c2-SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"./components/c3-SuperCheckbox/SuperCheckbox\";\r\n\r\ntype TestComponentsPropsType = {}\r\n\r\nexport const TestComponents = (props: TestComponentsPropsType) => {\r\n    const [text, setText] = useState<string>('')\r\n    const error = text ? '' : 'error'\r\n\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert('введите текст...')\r\n        } else {\r\n            alert(text)\r\n        }\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(false)\r\n    const testOnChange = (e: ChangeEvent<HTMLInputElement>) => setChecked(e.currentTarget.checked)\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.column}>\r\n                <SuperInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    onEnter={showAlert}\r\n                    error={error}\r\n                    // spanClassName={s.testSpanError}\r\n                />\r\n\r\n                <SuperInputText\r\n                    className={s.blue} // проверьте, рабоет ли смешивание классов\r\n                />\r\n\r\n                ----------------------------------------------------\r\n\r\n                <SuperButton>\r\n                    default\r\n                </SuperButton>\r\n\r\n                <SuperButton\r\n                    red // пропсу с булевым значением не обязательно указывать true\r\n                    onClick={showAlert}>\r\n                    delete {/*название кнопки попадёт в children*/}\r\n                </SuperButton>\r\n\r\n                <SuperButton disabled>\r\n                    disabled\r\n                </SuperButton>\r\n\r\n                ----------------------------------------------------\r\n\r\n                <SuperCheckbox\r\n                    checked={checked}\r\n                    onChangeChecked={setChecked}>\r\n                    some text {/*// этот текст попадёт в children*/}\r\n                </SuperCheckbox>\r\n                {/*// onChange тоже должен работать*/}\r\n                <SuperCheckbox checked={checked} onChange={testOnChange}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport styles from './Header.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {logoutTC} from \"../../store/reducers/login-reducer\";\r\n\r\n\r\nexport const Header = () => {\r\n    const dispatch=useDispatch();\r\n    const logoutHandler=()=>{\r\n        dispatch(logoutTC())\r\n    }\r\n    let isLoggedIn = useSelector<RootReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    return (\r\n        <div className={styles.headerBlock}>\r\n            <div className={styles.container}>\r\n\r\n                <h2>CardsApp</h2>\r\n         {/*       <NavBar/>*/}\r\n                {isLoggedIn && <span className={styles.logout} onClick={logoutHandler}>Logout</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/oval.d819144a.svg\";","import preload from './../assets/svg/oval.svg'\r\nimport React from \"react\";\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preload} alt='waiting...' style={{width:'90px'}}/>)\r\n}\r\n\r\nexport default Preloader","import React, {useEffect} from 'react';\r\nimport './App.module.css';\r\nimport {Login} from \"./Components/Login/Login\";\r\nimport {Profile} from \"./Components/Profile/Profile\";\r\nimport {Registration} from \"./Components/Redistration/Registration\";\r\nimport {NotFound} from \"./Components/NotFound/NotFound\";\r\nimport {ForgotPassword} from \"./Components/ForgotPassword/ForgotPassword\";\r\nimport {NewPassword} from \"./Components/NewPassword/NewPassword\";\r\nimport {TestComponents} from \"./Components/TestComponents/TestComponents\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Header} from \"./Components/Header/Header\";\r\nimport styles from './App.module.css'\r\nimport {initializeAppTC, RequestStatusType} from \"./store/reducers/app-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./store/store\";\r\nimport Preloader from \"./common/Preloader/Preloader\";\r\nexport type ComponentAuthType='register'|'login' |'forgotPass'|'newPass'\r\n\r\nfunction App() {\r\n    let status = useSelector<RootReducerType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<RootReducerType, boolean>(state => state.app.isInitialized)\r\n    const error = useSelector<RootReducerType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className={styles.appWrapper}>\r\n            <Header/>\r\n                <div className={styles.mainBlock}>\r\n                    {!isInitialized||status === 'loading' ? <Preloader/> :\r\n                    <Routes>\r\n                        <Route path={'/'} element={<Profile/>}/>\r\n                        <Route path={'/registration'} element={<Registration/>}/>\r\n                        <Route path={'/login'} element={<Login/>}/>\r\n                        <Route path={'/404'} element={<NotFound/>}/>\r\n                        <Route path={'/forgot-password'} element={<ForgotPassword/>}/>\r\n                        <Route path={'/new-password/*'} element={<NewPassword/>}/>\r\n                        <Route path={'/test-components'} element={<TestComponents/>}/>\r\n                        <Route path={'*'} element={<Navigate to='/404'/>}/>\r\n                    </Routes>}\r\n                </div>\r\n           <div className={styles.err}>{error}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\n\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {loginReducer} from \"./reducers/login-reducer\";\r\nimport {registrationReducer} from \"./reducers/registration-reducer\";\r\nimport {profileReducer} from \"./reducers/profile-reducer\";\r\nimport {passwordRecoveryReducer} from \"./reducers/passwordRecovery-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    register: registrationReducer,\r\n    profile: profileReducer,\r\n    passRecovery:passwordRecoveryReducer,\r\n\r\n});\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type RootReducerType = ReturnType<typeof rootReducer>;\r\nconsole.log(store)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store=store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n            <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n  ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}