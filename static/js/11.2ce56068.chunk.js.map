{"version":3,"sources":["pages/Profile/Profile.module.scss","dal/profile/index.ts","pages/Profile/index.tsx"],"names":["module","exports","useUpdateProfileMutation","clientAPI","injectEndpoints","endpoints","build","updateProfile","mutation","query","data","url","URI","toString","method","body","overrideExisting","Profile","dispatch","useAppDispatch","updatedProfileData","isProfileError","isError","email","useAppSelector","state","profile","avatar","name","publicCardPacksCount","profileData","useMemo","onUpdateAvatar","useCallback","newAvatar","onUpdateTitle","newTitle","useEffect","setProfileData","updatedUser","setErrorText","errorText","className","style","wrapper","title","nameChildren","updateTitle","avatarChildren","updateImage","image","initialAvatar"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,QAAU,yB,iHCuB5CC,E,MAjBIC,EAAUC,gBAAgB,CAC3CC,UAAW,SAACC,GAAkB,MAAM,CAClCC,cAAeD,EAAME,SAA8D,CACjFC,MAAK,SAACC,GAGJ,MAAO,CACLC,IAHU,IAAIC,IAAI,WAGTC,WACTC,OAAQ,MACRC,KAAML,EAEV,IAEH,EACDM,kBAAkB,IAGLd,yB,uBC0EAe,UAvFC,WACd,IAAMC,EAAWC,cAEjB,EACEjB,IAA0B,mBADrBK,EAAa,YAAUa,EAAkB,EAAxBV,KAAmCW,EAAc,EAAvBC,QAG5CC,EAAQC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQH,KAAK,IACnDI,EAASH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQC,MAAM,IACrDC,EAAOJ,aAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQE,IAAI,IACjDC,EAAuBL,aAC3B,SAAAC,GAAK,OAAIA,EAAMC,QAAQG,oBAAoB,IAGvCC,EAAcC,mBAClB,iBAAO,CAAER,QAAOI,SAAQC,OAAMC,uBAAsB,GACpD,CAACN,EAAOI,EAAQC,EAAMC,IAGlBG,EAAiBC,uBACrB,SAACC,GACKA,IAAcP,GAChBpB,EAAc,CAAEoB,OAAQO,GAE5B,GACA,CAAC3B,EAAeoB,IAGZQ,EAAgBF,uBACpB,SAACG,GACKA,IAAaR,GACfrB,EAAc,CAAEqB,KAAMQ,GAE1B,GACA,CAAC7B,EAAeqB,IAYlB,OATAS,qBAAU,WACJjB,GACFF,EAASoB,YAAelB,EAAmBmB,cAEzClB,GACFH,EAASsB,YAAa,CAAEC,UAAW,6BAEvC,GAAG,CAACrB,EAAoBF,EAAUG,IAE9BS,EAEA,sBAAKY,UAAWC,IAAMC,QAAQ,UAC5B,oBAAIF,UAAWC,IAAME,MAAM,0BAC3B,cAAC,IAAW,CACVf,YAAaA,EACbgB,aAAc,cAAC,IAAY,CAACD,MAAOjB,EAAMmB,YAAaZ,IACtDa,eACE,cAAC,IAAS,CAACC,YAAajB,EAAgBkB,MAAOvB,GAAUwB,WAO5D,IACT,C","file":"static/js/11.2ce56068.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Profile_title__2i4e6\",\"wrapper\":\"Profile_wrapper__2Tsef\"};","import URI from 'urijs';\r\n\r\nimport { clientAPI } from '..';\r\nimport type { builderType } from '..';\r\n\r\nimport { UpdateProfilePayloadtype, UpdateProfileResponseType } from './types';\r\n\r\nconst profileAPI = clientAPI.injectEndpoints({\r\n  endpoints: (build: builderType) => ({\r\n    updateProfile: build.mutation<UpdateProfileResponseType, UpdateProfilePayloadtype>({\r\n      query(data) {\r\n        const URL = new URI(`auth/me`);\r\n\r\n        return {\r\n          url: URL.toString(),\r\n          method: 'PUT',\r\n          body: data,\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n  overrideExisting: false,\r\n});\r\n\r\nexport const { useUpdateProfileMutation } = profileAPI;\r\n","import { useCallback, useEffect, useMemo } from 'react';\r\n\r\nimport style from './Profile.module.scss';\r\n\r\nimport initialAvatar from 'common/assets/images/noavatar.png';\r\nimport { ReturnComponentType } from 'common/types/ReturnComponentType';\r\nimport { EditableSpan, FileInput, ProfileCard } from 'components';\r\nimport { useUpdateProfileMutation } from 'dal/profile';\r\nimport { useAppDispatch, useAppSelector } from 'store';\r\nimport { setErrorText, setProfileData } from 'store/reducers';\r\n\r\nconst Profile = (): ReturnComponentType => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [updateProfile, { data: updatedProfileData, isError: isProfileError }] =\r\n    useUpdateProfileMutation();\r\n\r\n  const email = useAppSelector(state => state.profile.email);\r\n  const avatar = useAppSelector(state => state.profile.avatar);\r\n  const name = useAppSelector(state => state.profile.name);\r\n  const publicCardPacksCount = useAppSelector(\r\n    state => state.profile.publicCardPacksCount,\r\n  );\r\n\r\n  const profileData = useMemo(\r\n    () => ({ email, avatar, name, publicCardPacksCount }),\r\n    [email, avatar, name, publicCardPacksCount],\r\n  );\r\n\r\n  const onUpdateAvatar = useCallback(\r\n    (newAvatar: string): void => {\r\n      if (newAvatar !== avatar) {\r\n        updateProfile({ avatar: newAvatar });\r\n      }\r\n    },\r\n    [updateProfile, avatar],\r\n  );\r\n\r\n  const onUpdateTitle = useCallback(\r\n    (newTitle: string) => {\r\n      if (newTitle !== name) {\r\n        updateProfile({ name: newTitle });\r\n      }\r\n    },\r\n    [updateProfile, name],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (updatedProfileData) {\r\n      dispatch(setProfileData(updatedProfileData.updatedUser));\r\n    }\r\n    if (isProfileError) {\r\n      dispatch(setErrorText({ errorText: 'Profile failed to update' }));\r\n    }\r\n  }, [updatedProfileData, dispatch, isProfileError]);\r\n\r\n  if (profileData) {\r\n    return (\r\n      <div className={style.wrapper}>\r\n        <h2 className={style.title}>Profile Page</h2>\r\n        <ProfileCard\r\n          profileData={profileData}\r\n          nameChildren={<EditableSpan title={name} updateTitle={onUpdateTitle} />}\r\n          avatarChildren={\r\n            <FileInput updateImage={onUpdateAvatar} image={avatar || initialAvatar} />\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n{\r\n  /* <div className={style.profileWrapper}>\r\n      <div className={style.avatarBlock}>\r\n        <FileInput updateImage={onUpdateAvatar} image={avatar} />\r\n      </div>\r\n\r\n      <div className={style.profileInfo}>\r\n        <EditableSpan title={name} updateTitle={onUpdateTitle} />\r\n\r\n        <div className={style.info}>\r\n          <span>\r\n            <b>Email</b>: {email}\r\n          </span>\r\n          <span>\r\n            <b>Count of cards</b>: {publicCardPacksCount}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div> */\r\n  /*  }\r\n\r\n  return null; */\r\n}\r\n\r\nexport default Profile;\r\n"],"sourceRoot":""}