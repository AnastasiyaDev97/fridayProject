{"version":3,"sources":["reportWebVitals.ts","enum/StatusType.ts","store/reducers/app-reducer.ts","store/reducers/login-reducer.ts","store/reducers/registration-reducer.ts","constants/index.ts","store/reducers/profile-reducer.ts","store/reducers/passwordRecovery-reducer.ts","store/reducers/packs-reducer.ts","store/reducers/cards-reducer.ts","store/reducers/modal-reducer.ts","store/store.ts","Components/TestComponents/components/c2-SuperButton/SuperButton.tsx","Components/TestComponents/components/c3-SuperCheckbox/SuperCheckbox.tsx","Components/TestComponents/components/c1-SuperInputText/SuperInputText.tsx","enum/InputType.ts","common/components/Input/UniversalInput.tsx","utils/validates.ts","enum/Path.ts","enum/ButtonTyoe.ts","enum/FormikFieldNames.ts","dal/apiConfig/index.ts","dal/authorization/authorization.ts","utils/error-utils.ts","Components/Authorization/Login/Login.tsx","store/thunks/login.ts","Components/Authorization/Redistration/Registration.tsx","store/thunks/registration.ts","Components/NotFound/NotFound.tsx","Components/Authorization/ForgotPassword/ForgotPassword.tsx","store/thunks/passwordRecovery.ts","Components/Authorization/NewPassword/NewPassword.tsx","Components/NavBar/NavBar.tsx","Components/Header/Header.tsx","common/assets/svg/oval.svg","common/Preloader/Preloader.tsx","features/cards/pagination/Pagination.tsx","utils/handles.ts","enum/ComponentName.ts","features/cards/table/TableRow/TableRow.tsx","features/cards/table/UniversalTable.tsx","enum/ModalAction.ts","common/components/Modal/Modal.tsx","dal/cards/cardsAPI.ts","store/thunks/cards.ts","common/components/Modal/LearnPackModal/LearnPackModal.tsx","enum/ModalEntity.ts","dal/packs/packsAPI.ts","store/thunks/packs.ts","common/components/Modal/ModalContainer/ModalContainer.tsx","Components/Cards/Rating/Rating.tsx","Components/Cards/Cards.tsx","common/hoc/withRedirect.tsx","common/components/EditableSpan/EditableSpan.tsx","Components/Profile/Profile.tsx","common/hooks/customUseEffect.ts","features/cards/rangeSlider/RangeSlider.tsx","Components/Packs/PacksParams/PacksParams.tsx","selectors/getPacks.ts","selectors/getCurrentPage.ts","Components/Packs/PacksList/PacksList.tsx","Components/Packs/Packs.tsx","App.tsx","store/thunks/app.ts","index.tsx","Components/Authorization/Login/Login.module.scss","Components/Profile/Profile.module.scss","features/cards/table/UniversalTable.module.scss","common/components/Modal/Modal.module.scss","common/components/Modal/LearnPackModal/LearnPackModal.module.scss","common/components/Input/UniversalInput.module.scss","features/cards/pagination/Pagination.module.scss","common/components/Modal/ModalContainer/ModalContainer.module.scss","Components/TestComponents/components/c2-SuperButton/SuperButton.module.scss","Components/TestComponents/components/c3-SuperCheckbox/SuperCheckbox.module.css","Components/TestComponents/components/c1-SuperInputText/SuperInputText.module.css","Components/NotFound/NotFound.module.scss","Components/Header/Header.module.scss","App.module.css","Components/Cards/Cards.module.scss","Components/NavBar/NavBar.module.scss","common/components/EditableSpan/EditableSpan.module.scss","Components/Packs/PacksParams/PacksParams.module.scss","features/cards/rangeSlider/RangeSlider.module.scss","Components/Packs/PacksList/PacksList.module.scss","common/Preloader/Preloader.module.scss","Components/Packs/Packs.module.scss"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","STATUS","initialState","status","isInitialized","error","setAppStatusAC","type","payload","setErrorText","isLoggedIn","isAuthToggleAC","registerStatus","registerStatusAC","EMPTY_STRING","avatar","created","email","isAdmin","name","publicCardPacksCount","rememberMe","token","tokenDeathTime","updated","verified","__v","_id","setProfileAC","profile","responseInfoForgotPass","responseInfoNewPass","emailForRecovery","SetResponseInfoForgotPassAC","SetResponseInfoNewPassAC","addEmailAC","page","maxCardsCount","minCardsCount","pageCount","min","max","sortPacks","packName","user_id","toggleShowUserPacksAC","cards","answer","question","cardsPack_id","grade","shots","cardsTotalCount","maxGrade","minGrade","packUserId","sortCards","setCardsRatingAC","modalAction","modalEntity","id","setModalTypeAC","rootReducer","combineReducers","app","state","action","login","register","passRecovery","packs","map","card","modals","store","createStore","applyMiddleware","thunk","window","SuperButton","memo","red","className","restProps","finalClassName","style","btn","default","SuperCheckbox","onChange","onChangeChecked","children","spanClassName","finalInputClassName","s","checkbox","labelForCheckBox","e","currentTarget","checked","SuperInputText","onChangeText","onKeyPress","onEnter","dispatch","useDispatch","input","errorInput","superInput","value","key","INPUT_TYPE","UniversalInput","validationErr","formikProps","isPassword","useState","passwordShown","setPasswordShown","typeForInput","styles","inputWrapper","placeholder","togglePassBtn","onClick","validates","values","errors","test","password","length","confirmPassword","PATH","BUTTON_TYPE","FORMIK_FIELDS_NAME","instance","axios","create","baseURL","withCredentials","authorizationAPI","post","res","data","loginAuthData","delete","messageDataPassword","from","message","newPassData","catchErrorHandler","err","response","Login","formik","useFormik","initialValues","validate","onSubmit","a","resetForm","useSelector","to","wrapper","form","handleSubmit","inputsWrapper","touched","getFieldProps","row","submitBtn","registerLink","Registration","navigate","useNavigate","onCancelButtonClick","useCallback","registrationBtns","NotFound","notFoundBackgr","notFoundBlock","link","ForgotPassword","info","onButtonTogglePasswordStatusClick","sendMailBlock","sendMailBtn","NewPassword","some","useParams","newPassDataType","resetPasswordToken","NavBar","classNameForLink","isActive","active","NavLinkDataArray","navlinkPath","title","navBarContainer","Header","headerBlock","container","logout","Preloader","src","preload","alt","loading","Paginator","totalItemCount","currentPage","onChangePageClick","portionSize","portionNumber","setPortionNumber","pagesCount","Math","ceil","portionCount","leftPortionPageNumber","rightPortionPageNumber","styleForBtn","padding","margin","fontWeight","conditionForShowButton","pages","i","push","onButtonNextPageClick","onButtonPrevPageClick","paginator","filter","classNameForPage","pageNum","activePage","convertDateFormat","dateAsString","date","Date","addZeroToDate","getDate","getMonth","getFullYear","toString","COMPONENT_NAME","TableRow","item","component","onDeleteButtonClick","onUpdateButtonClick","onLearnPackClick","userId","CONDITION_FOR_DISABLE_BUTTON","cardsCount","Object","entries","cell","btns","disabled","stopPropagation","UniversalTable","rows","headers","onSetSortingClick","titlesOfHeaders","table","classNameForSpanValue","tableHeader","MODAL_ACTION","Modal","modalBody","onCloseModalButtonClick","onNextCardButtonClick","isActivePrevBtn","conditionForDisabledPrevBtn","modalWrapper","modalBlock","buttons","callback","cardsAPI","getCardsQueryParams","get","params","put","card_id","updatedGrade","getCardsTC","LearnPackModal","activeCardId","isAnswerShow","setIsAnswerShow","BtnShowTitle","onToggleShowAnswerClick","onRateButtonClick","newGrade","markButtons","learnPackModalWrapper","answerBlock","buttonsBlock","MODAL_ENTITY","packsAPI","getPacksQueryParams","cardsPack","packId","getPacksTC","getState","paramsForQuery","updatePackTC","newName","ModalContainer","pack","find","questionInitialValue","answerInitialValue","nameInitialValue","setName","setQuestion","setAnswer","activeCardIndex","setActiveCardIndex","setIsActivePrevBtn","prevCards","setIsPrevCards","activeCard","setActiveCard","questionForLearn","answerForLearn","limitLength","conditionForExecution","useEffect","onSavePackButtonClick","addPackTC","onSaveCardButtonClick","addCardTC","onDeletePackButtonClick","onDeleteCardButtonClick","deleteCardTC","onUpdatePackClick","onUpdateCardClick","rest","updateCardTC","newCard","sum","reduce","acc","rand","random","newSum","console","log","getCard","onPrevCardButtonClick","add","update","learn","conditionForUpdateAddCardModal","conditionActivateInputName","span","Rating","rating","Star","selected","Cards","setModalData","cardsForTable","useMemo","idOfTimeout","setTimeout","clearTimeout","handleSetSortingClick","headerName","setSortingFilterCards","handleChangePageClick","changePageCardsAC","handleAddCardButtonClick","handleDeleteButtonClick","handleUpdateCardClick","cursor","actions","Pagination","withRedirect","Component","props","EditableSpan","updateTitle","isEdit","toggleEdit","onDoubleClick","onBlur","autoFocus","avatarURL","setAvatarURL","isInputActive","setIsInputActive","onAddNewPhotoClick","profileWrapper","avatarBlock","avatarWrapper","tooltip","inputForURL","addPhotoURlBtn","profileInfo","newTitle","UseSetTimeoutEffect","callBack","dependencies","ms","RangeSlider","minValueForRangeSlider","maxValueForRangeSlider","onChangeCardsCountsChange","setValue","Box","sx","width","sliderWrapper","Slider","event","newValue","valueLabelDisplay","sliderValues","PacksParams","onShowMyCardsClick","onShowAllCardsClick","handleChangeCardsCountChange","minValue","maxValue","btnsWrapper","getPacks","cardPacks","getCurrentPage","PacksList","text","setText","packsForTable","user_name","packForModal","handleSearchPack","changePageAC","setSortingFilter","handleAddPackButtonClick","handleUpdatePackClick","listWrapper","aria-disabled","cardPacksTotalCount","App","setModalPropsAC","setModalDataCards","setModalDataPacks","appWrapper","mainBlock","path","element","ReactDOM","render","document","getElementById","module","exports"],"mappings":"2IAceA,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,8BCTDQ,EACD,UADCA,EAGC,YAHDA,EAIF,SCCLC,EAAe,CACjBC,ODJK,OCKLC,eAAe,EACfC,MAAO,MAoBEC,EAAiB,SAACH,GAAD,MAAqB,CAC/CI,KAAM,iBACNC,QAAS,CACLL,YASKM,EAAe,SAACJ,GAAD,MAA8B,CACtDE,KAAM,gBACNC,QAAS,CAACH,WClCVH,EAAe,CACfQ,YAAY,GAcHC,EAAiB,SAACD,GAAD,MAA0B,CACpDH,KAAM,uBACNC,QAAS,CACLE,gBCvBJR,EAAe,CAACU,gBAAgB,GAcvBC,EAAmB,SAACD,GAAD,MAC3B,CACGL,KAAM,sBACNC,QAAS,CAACI,oBClBLE,EAAa,GCGpBZ,EAAe,CACjBa,ODLoC,8JCMpCC,QAASF,EACTG,MAAOH,EACPI,SAAS,EACTC,KAAML,EACNM,qBAAsB,EACtBC,YAAY,EACZC,MAAOR,EACPS,eAAgB,EAChBC,QAASV,EACTW,UAAU,EACVC,IAAK,EACLC,IAAKb,GAeIc,EAAe,SAACC,GAAD,MAAkC,CACtDtB,KAAM,cACNC,QAAS,CACLqB,aChCR3B,EAAe,CACf4B,uBAAwBhB,EACxBiB,oBAAqBjB,EACrBkB,iBAAkB,MAiBTC,EAA8B,SAACH,GAAD,MAAqC,CAC5EvB,KAAM,gCACNC,QAAS,CAACsB,4BAGDI,EAA2B,SAACH,GAAD,MAAkC,CACtExB,KAAM,6BACNC,QAAS,CAACuB,yBAGDI,EAAa,SAACH,GAAD,MAA+B,CACrDzB,KAAM,YACNC,QAAS,CAACwB,sBCpBV9B,EAAe,CACfkC,KAAM,EAGNC,cAAe,EACfC,cAAe,EACfC,UAAW,EACXC,IAAK,EACLC,IAT6B,IAU7BC,UAAW,WACXC,SAAU7B,EACV8B,QAAS,MA8CAC,EAAwB,SAACD,GAAD,MAAsB,CACvDrC,KAAM,+BACNC,QAAS,CAACoC,a,QCrEV1C,EAAe,CACf4C,MAAO,CACH,CACIC,OAAQjC,EACRkC,SAAUlC,EACVmC,aAAcnC,EACdoC,MAAO,EACPC,MAAO,EACPP,QAAS9B,EACTE,QAASF,EACTU,QAASV,EACTa,IAAKb,IAGbsC,gBAAiB,EACjBC,SAAU,EACVC,SAAU,EACVlB,KAAM,EACNG,UAAW,EACXgB,WAAYzC,EACZ0C,UAAW,YAyCFC,EAAmB,SAAC9B,EAAauB,EAAeC,GACzD,MAAQ,CACJ5C,KAAM,yBACNoB,MACAnB,QAAS,CAAC0C,QAAOC,WChErBjD,EAAe,CACfwD,YAAa,GACbC,YAAa,GACbC,GAAI,IAsBKC,EAAiB,SAACH,EAA8BC,GAA/B,MAAiE,CAC3FpD,KAAM,uBACNC,QAAS,CACLkD,cACAC,iBCtBKG,EAAcC,YAAgB,CACvCC,ITFsB,WAAoF,IAAnFC,EAAkF,uDAAxD/D,EAAcgE,EAA0C,uCACzG,OAAQA,EAAO3D,MACX,IAAK,iBACL,IAAK,gBACD,OAAO,2BAAI0D,GAAUC,EAAO1D,SAChC,IAAK,iBACD,OAAO,2BAAIyD,GAAX,IAAkB7D,eAAe,IAGrC,QACI,OAAO6D,ISPfE,MRFwB,WAAkE,IAAjEF,EAAgE,uDAAtC/D,EAAcgE,EAAwB,uCACzF,OAAQA,EAAO3D,MACX,IAAK,uBACD,OAAO,2BAAI0D,GAAUC,EAAO1D,SAChC,QACI,OAAOyD,IQFfG,SPV+B,WAAkE,IAAjEH,EAAgE,uDAAtC/D,EAAcgE,EAAwB,uCAChG,OAAQA,EAAO3D,MAEX,IAAK,sBACD,OAAO,2BAAI0D,GAAUC,EAAO1D,SAChC,QACI,OAAOyD,IOKfpC,QLK0B,WAAsF,IAArFoC,EAAoF,uDAAzD/D,EAAcgE,EAA2C,uCAC/G,OAAQA,EAAO3D,MACX,IAAK,cACD,OAAO,2BAAI0D,GAAUC,EAAO1D,QAAQqB,SACxC,QACI,OAAOoC,IKTfI,aJNmC,WAAkE,IAAjEJ,EAAgE,uDAAtC/D,EAAcgE,EAAwB,uCACpG,OAAQA,EAAO3D,MACX,IAAK,gCACL,IAAK,6BACL,IAAK,YACD,OAAO,2BAAI0D,GAAUC,EAAO1D,SAChC,QACI,OAAOyD,IIAfK,MHWwB,WAAkE,IAAjEL,EAAgE,uDAAtC/D,EAAcgE,EAAwB,uCACzF,OAAQA,EAAO3D,MACX,IAAK,gCACL,IAAK,kBACL,IAAK,oBACL,IAAK,6BACL,IAAK,+BACL,IAAK,8BACL,IAAK,2BACD,OAAO,2BAAI0D,GAAUC,EAAO1D,SAChC,QACI,OAAOyD,IGrBfnB,MFWwB,WAAkE,IAAjEmB,EAAgE,uDAAtC/D,EAAcgE,EAAwB,uCACzF,OAAQA,EAAO3D,MACX,IAAK,kBACL,IAAK,oBACL,IAAK,2BACD,OAAO,2BAAI0D,GAAUC,EAAO1D,SAChC,IAAK,yBAED,OAAO,2BACAyD,GADP,IAEInB,MAAM,YAAKmB,EAAMnB,MAAMyB,KAAI,SAAAC,GAAI,OAAIA,EAAK7C,MAAQuC,EAAOvC,IAApB,2BAA8B6C,GAASN,EAAO1D,SAAWgE,QAEpG,QACI,OAAOP,IEvBfQ,ODFwB,WAAkE,IAAjER,EAAgE,uDAAtC/D,EAAcgE,EAAwB,uCACzF,OAAQA,EAAO3D,MACX,IAAK,uBAEL,IAAK,wBAED,OAAO,2BAAI0D,GAAUC,EAAO1D,SAEhC,QACI,OAAOyD,MCJRS,EAAQC,YAAYb,EAAac,YAAgBC,MAQ5DC,OAAOJ,MAAMA,E,4CCPEK,EAhB+BC,gBAAK,YAK7C,IAHEC,EAGH,EAHGA,IAAKC,EAGR,EAHQA,UACFC,EAEN,mCACKC,EAAc,UAAMC,IAAMC,IAAZ,YAAmBL,EAAMI,IAAMJ,IAAMI,IAAME,QAA3C,YAAsDL,GAE1E,OACI,oCACIA,UAAWE,GACPD,O,yBCqBDK,EA/BmCR,gBAAK,YASlD,EAPGzE,KAOF,IANEkF,EAMH,EANGA,SAAUC,EAMb,EANaA,gBACVR,EAKH,EALGA,UACAS,GAIH,EALcC,cAKd,EAJGD,UAEGR,EAEN,4FAMKU,EAAmB,UAAMC,IAAEC,SAAR,YAAoBb,GAAwBpE,GAErE,OACI,wBAAOoE,UAAWY,IAAEE,iBAApB,UACI,mCACIzF,KAAM,WACNkF,SAXa,SAACQ,GACtBR,GAAUA,EAASQ,GACnBP,GAAiBA,EAAgBO,EAAEC,cAAcC,UAUzCjB,UAAWW,GAEPV,IAEPQ,GAAY,sBAAMT,UAAWY,IAAEF,cAAnB,SAAmCD,U,kECuB7CS,GA3CqCpB,gBAAK,YAUnD,IAREzE,EAQH,EARGA,KACAkF,EAOH,EAPGA,SAAUY,EAOb,EAPaA,aACVC,EAMH,EANGA,WAAYC,EAMf,EANeA,QACZlG,EAKH,EALGA,MACA6E,EAIH,EAJGA,UAEGC,EAEN,6FACKqB,EAASC,cAETZ,EAAmB,UAAMC,KAAEY,MAAR,YAAiBrG,EAAQyF,KAAEa,WAAab,KAAEc,WAA1C,YAAwD1B,EAAxD,KAgBzB,OACI,mCACI,mCACI3E,KAAMA,EACNkF,SAlBa,SAACQ,GACtBR,GACGA,EAASQ,GACZI,GAAgBA,EAAaJ,EAAEC,cAAcW,OAC7CL,EAAS/F,EAAa,QAed6F,WAZe,SAACL,GACxBK,GAAcA,EAAWL,GACzBM,GACa,UAAVN,EAAEa,KACFP,KASKrB,UAAWW,GACPV,SCrDP4B,GACC,WADDA,GAEH,OCcGC,GAA8ChC,gBAAK,YAGQ,IAFHiC,EAEE,EAFFA,cAAeC,EAEb,EAFaA,YAAa3G,EAE1B,EAF0BA,KAC5B4G,EACE,EADFA,WACE,EAE3BC,oBAAkB,GAFS,mBAE9DC,EAF8D,KAE/CC,EAF+C,KAI7DC,GAAgBF,GAAiB9G,EAAOwG,GAAsBA,GAMpE,OACI,sBAAK7B,UAAWsC,IAAOC,aAAvB,UACI,cAAC,GAAD,yBAAgBvC,UAAWsC,IAAOd,MAClBgB,YAAaR,EAAY/F,MACrB+F,GAFpB,IAGgB3G,KAAMgH,KACrBJ,GAAc,sBAAMjC,UAAWsC,IAAOG,cAAeC,QAVxB,WAClCN,GAAkBD,MAUd,qBAAKnC,UAAWsC,IAAOnH,MAAvB,SAA+B4G,UC9B9BY,GAAU,SAACC,GACpB,IAAMC,EAA0B,GAsBhC,OApBKD,EAAO7G,MAEA,4CAA4C+G,KAAKF,EAAO7G,SAChE8G,EAAO9G,MAAQ,yBAFf8G,EAAO9G,MAAQ,WAId6G,EAAOG,SAEDH,EAAOG,SAASC,OAAS,EAChCH,EAAOE,SAAW,sCATA,cAUID,KAAKF,EAAOG,YAClCF,EAAOE,SAAW,8CAJlBF,EAAOE,SAAW,WAMjBH,EAAOK,kBACRJ,EAAOI,gBAAkB,YAEzBL,EAAOG,UAAYH,EAAOK,iBACtBL,EAAOG,WAAaH,EAAOK,kBAC3BJ,EAAOI,gBAAkB,wBAG1BJ,GC7BEK,GACA,WADAA,GAEK,gBAFLA,GAGE,OAHFA,GAIQ,mBAJRA,GAKK,gBALLA,GAMF,SANEA,GAOF,SAPEA,GAQF,SAREA,GASF,ICTEC,GACF,SADEA,GAEF,SCFEC,GACG,aADHA,GAEH,QAFGA,GAGC,WAHDA,GAKQ,kB,qCCHRC,G,QAAWC,EAAMC,OAAO,CACjCC,QAAS,sCACTC,iBAAiB,ICGRC,GAAmB,SACjB3H,EAAegH,GACtB,OAAOM,GAASM,KAAT,gBAAsD,CAAC5H,QAAOgH,aAChEtI,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,SAJdH,GAAmB,SAOpBI,GACJ,OAAOT,GAASM,KAAT,aAA+CG,GACjDrJ,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,SAVdH,GAAmB,WAexB,OAAOL,GAASU,OAAT,WACFtJ,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,SAjBdH,GAAmB,WAqBxB,OAAOL,GAASM,KAAT,WACFlJ,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,SAvBdH,GAAmB,SA0Bf3H,GACT,IAAMiI,EAAsB,CACxBjI,QACAkI,KAAM,qCACNC,QAAQ,6KAIZ,OAAOb,GAASM,KAAT,cACDK,EACF,CAACP,iBAAiB,IACjBhJ,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,SAtCdH,GAAmB,SAyCbS,GACP,OAAOd,GAASM,KAAT,wBACLQ,EACF,CAACV,iBAAiB,IACjBhJ,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,SChDdO,GAAoB,SAAC9C,EAAuB+C,GAErD/C,EAAS/F,EAAa8I,EAAIC,SAAWD,EAAIC,SAAST,KAAK1I,MAAQkJ,IAC/D/C,EAASlG,EAAeL,KCUfwJ,GAAQ,WACjB,IAAMjD,EAAWC,cAEXiD,EAASC,YAAU,CACrBC,cAAe,CACX3I,MAAOH,EACPmH,SAAUnH,EACVO,YAAY,GAGhBwI,SAAU,SAAC/B,GACPD,GAAUC,IAGdgC,SAAU,SAAAhC,GCxBK,IAACkB,EDyBZxC,GCzBYwC,EDyBKlB,ECzBN,yCACnB,WAAOtB,GAAP,gBAAAuD,EAAA,sEAEQvD,EAASlG,EAAeL,IAFhC,SAGwB2I,GAAyBI,GAHjD,OAGYF,EAHZ,OAKQtC,EAASlG,EAAeL,IACxBuG,EAAS7F,GAAe,IACxB6F,EAAS5E,EAAakH,IAP9B,kDASQQ,GAAkB9C,EAAD,MATzB,0DADmB,wDD0BXkD,EAAOM,eAMf,OAFiBC,aAAsC,SAAAhG,GAAK,OAAIA,EAAME,MAAMzD,cAGjE,cAAC,IAAD,CAAUwJ,GAAI9B,KAIrB,sBAAKlD,UAAWsC,IAAO2C,QAAvB,UACI,yCACA,uBAAMjF,UAAWsC,IAAO4C,KAAMN,SAAU,SAAC7D,GACrCyD,EAAOW,aAAapE,IADxB,UAGI,sBAAKf,UAAWsC,IAAO8C,cAAvB,UACI,cAACtD,GAAD,CAAgBC,cAAgByC,EAAOa,QAAQtJ,OAASyI,EAAO3B,OAAO9G,OAAUH,EAChEoG,YAAawC,EAAOc,cAAclC,MAClD,cAACtB,GAAD,CAAgBC,cAAgByC,EAAOa,QAAQtC,UAAYyB,EAAO3B,OAAOE,UAAanH,EACtEoG,YAAawC,EAAOc,cAAclC,IAClC/H,KAAMwG,GACNI,YAAY,OAGhC,sBAAKjC,UAAWsC,IAAOiD,IAAvB,UACI,cAAC,EAAD,yBAAetE,QAASuD,EAAO5B,OAAOzG,YACnBqI,EAAOc,cAAclC,KADxC,8BAGA,cAAC,IAAD,CAAS4B,GAAI9B,GAAb,+BAEJ,cAAC,EAAD,CAAalD,UAAWsC,IAAOkD,UAAWnK,KAAM8H,GAAhD,sBAGJ,cAAC,IAAD,CAASnD,UAAWsC,IAAOmD,aAAcT,GAAI9B,GAA7C,0BElDCwC,GAAe,WACxB,IAAMpE,EAAWC,cAEXoE,EAAWC,cAEblK,EAAiBqJ,aAAsC,SAAAhG,GAAK,OAAIA,EAAMG,SAASxD,kBAE7E8I,EAASC,YAAU,CACrBC,cAAe,CACX3I,MAAOH,EACPmH,SAAUnH,EACVqH,gBAAiBrH,GAGrB+I,SAAU,SAAC/B,GACPD,GAAUC,IAGdgC,SAAU,SAAAhC,GC7BU,IAAC7G,EAAegH,ED8BhCzB,GC9BiBvF,ED8BK6G,EAAO7G,MC9BGgH,ED8BIH,EAAOG,SC9B3B,yCACxB,WAAOzB,GAAP,UAAAuD,EAAA,sEAEQvD,EAASlG,EAAeL,IAFhC,SAGc2I,GAA4B3H,EAAOgH,GAHjD,OAIQzB,EAAS3F,GAAiB,IAC1B2F,EAASlG,EAAeL,IALhC,gDAOQqJ,GAAkB9C,EAAD,MACjBA,EAAS3F,GAAiB,IARlC,yDADwB,wDD+BhB6I,EAAOM,eAITe,EAAsBC,uBAAY,WACpCtB,EAAOM,YACPa,EAASzC,MACX,CAACsB,EAAOmB,IAEV,OAAIjK,GACA4F,EAAS3F,GAAiB,IACnB,cAAC,IAAD,CAAUqJ,GAAI9B,MAIrB,sBAAKlD,UAAWsC,IAAO2C,QAAvB,UACI,yCACA,uBAAML,SAAUJ,EAAOW,aAAcnF,UAAWsC,IAAO4C,KAAvD,UACI,sBAAKlF,UAAWsC,IAAO8C,cAAvB,UAEI,cAACtD,GAAD,CAAgBC,cAAgByC,EAAOa,QAAQtJ,OAASyI,EAAO3B,OAAO9G,OAAUH,EAChEoG,YAAawC,EAAOc,cAAclC,MAClD,cAACtB,GAAD,CAAgBC,cAAgByC,EAAOa,QAAQtC,UAAYyB,EAAO3B,OAAOE,UAAanH,EACtEoG,YAAawC,EAAOc,cAAclC,IAClC/H,KAAMwG,GACNI,YAAY,IAC5B,cAACH,GAAD,CACIC,cAAgByC,EAAOa,QAAQpC,iBAAmBuB,EAAO3B,OAAOI,iBAAoBrH,EACpFoG,YAAawC,EAAOc,cAAclC,IAAsC/H,KAAMwG,GAC9EI,YAAY,OAGpB,qBAAKjC,UAAWsC,IAAOiD,IAAvB,SACI,sBAAKvF,UAAWsC,IAAOyD,iBAAvB,UACI,cAAC,EAAD,CAAa1K,KAAM8H,GAAoBT,QAASmD,EAAhD,oBACA,cAAC,EAAD,CAAaxK,KAAM8H,GAAnB,kC,oBEjEX6C,GAAS,WAClB,OACI,qBAAKhG,UAAWG,KAAM8F,eAAtB,SACI,sBAAKjG,UAAWG,KAAM+F,cAAtB,UACA,wDACA,cAAC,EAAD,UAAa,cAAC,IAAD,CAASlB,GAAI9B,GAAclD,UAAWG,KAAMgG,KAA5C,6BCOZC,GAAiB,WAC1B,IAAM9E,EAAWC,cAIXzE,GAFW8I,cAEQb,aAA4C,SAAAhG,GAAK,OAAIA,EAAMI,aAAarC,qBAC3FF,EAAyBmI,aAAqC,SAAAhG,GAAK,OAAIA,EAAMI,aAAavC,0BAE1F4H,EAASC,YAAU,CACrBC,cAAe,CACX3I,MAAOH,GAEX+I,SAAU,SAAC/B,GACVD,GAAUC,IAGXgC,SAAU,SAAAhC,GC5BU,IAAC7G,ED6BjBuF,GC7BiBvF,ED6BK6G,EAAO7G,MC7Bb,yCACxB,WAAOuF,GAAP,gBAAAuD,EAAA,sEAEQvD,EAASlG,EAAeL,IAFhC,SAGwB2I,GAA8B3H,GAHtD,OAGY6H,EAHZ,OAIQtC,EAASrE,EAAWlB,IACpB6H,EAAIyC,MAAQ/E,EAASvE,EAA4B6G,EAAIyC,OACrD/E,EAASlG,EAAeL,IANhC,kDAQQqJ,GAAkB9C,EAAD,MARzB,0DADwB,2DDiClBgF,EAAoCR,uBAAY,WAClDxE,EAASvE,EAA4BnB,IACrC0F,EAASrE,EAAWrB,MAEtB,CAAC0F,IAEH,OACI,qBAAKtB,UAAWsC,IAAO2C,QAAvB,SAEKrI,EACG,sBAAKoD,UAAWsC,IAAOiE,cAAvB,UACI,6CACA,4EAA+CzJ,KAC/C,cAAC,EAAD,CAAakD,UAAWsC,IAAOkE,YAAanL,KAAM8H,GACrCT,QAAS4D,EADtB,mBAIF,qCACE,uDACA,uBAAMtG,UAAWsC,IAAO4C,KAAMN,SAAU,SAAC7D,GACrCyD,EAAOW,aAAapE,IADxB,UAGI,qBAAKf,UAAWsC,IAAO8C,cAAvB,SACI,cAACtD,GAAD,CAAgBC,cAAgByC,EAAOa,QAAQtJ,OAASyI,EAAO3B,OAAO9G,OAAUH,EAChEoG,YAAawC,EAAOc,cAAc,aAGtD,qGAIA,cAAC,EAAD,CAAatF,UAAWsC,IAAOkD,UAAWnK,KAAM8H,GAAhD,kCAEJ,iEACA,cAAC,IAAD,CAASnD,UAAWsC,IAAOmD,aAAcT,GAAI9B,GAA7C,kCEvDPuD,GAAc,WACvB,IAAMnF,EAAWC,cAGXmF,EADSC,cACK,KAEd9J,EAAsBkI,aAAqC,SAAAhG,GAAK,OAAIA,EAAMI,aAAatC,uBAEvF2H,EAASC,YAAU,CACrBC,cAAe,CACX3B,SAAUnH,GAGd+I,SAAU,SAAC/B,GACPD,GAAUC,IAGdgC,SAAU,SAAAhC,GACN,IDhBqBuB,ECgBjByC,EAAkB,CAClB7D,SAAUH,EAAOG,SACjB8D,mBAAoBH,GAAQ9K,GAEhC0F,GDpBqB6C,ECoBKyC,EDpBN,yCAC5B,WAAOtF,GAAP,gBAAAuD,EAAA,sEAEQvD,EAASlG,EAAeL,IAFhC,SAGwB2I,GAAgCS,GAHxD,QAGYP,EAHZ,QAIYyC,MAAQ/E,EAAStE,EAAyB4G,EAAIyC,OAClD/E,EAASlG,EAAeL,IALhC,gDAOQqJ,GAAkB9C,EAAD,MAPzB,yDAD4B,2DCwB5B,OAAIzE,GACAyE,EAAStE,EAAyB,KAC3B,cAAC,IAAD,CAAUgI,GAAI9B,MAIrB,sBAAKlD,UAAWsC,IAAO2C,QAAvB,UACI,qDACA,uBAAMjF,UAAWsC,IAAO4C,KAAMN,SAAU,SAAC7D,GACrCyD,EAAOW,aAAapE,IADxB,UAII,qBAAKf,UAAWsC,IAAO8C,cAAvB,SACI,cAACtD,GAAD,CAAgBC,cAAgByC,EAAOa,QAAQtC,UAAYyB,EAAO3B,OAAOE,UAAanH,EACtEoG,YAAawC,EAAOc,cAAclC,IAClC/H,KAAMwG,GACNI,YAAY,MAGhC,cAAC,EAAD,CAAajC,UAAWsC,IAAOkD,UAAWnK,KAAM8H,GAAhD,wC,wCC1DH2D,GAAS,WAElB,IAAMC,EAAmB,SAAC,GAAD,SAAEC,SAA6C,UAAM1E,KAAO2E,QAAWrL,GAC1FsL,EAAmB,CACrB,CAACC,YAAajE,GAAckE,MAAO,WACnC,CAACD,YAAajE,GAAYkE,MAAO,eAErC,OACI,qBAAKpH,UAAWsC,KAAO+E,gBAAvB,SAEKH,EAAiB7H,KAAI,gBAAE8H,EAAF,EAAEA,YAAaC,EAAf,EAAeA,MAAf,OAClB,cAAC,IAAD,CAAqBpC,GAAImC,EAAanH,UAAW+G,EAAjD,SAAoEK,GAAtDA,SCVjBE,GAASxH,gBAAK,WACvB,IAAMwB,EAAWC,cAEb/F,EAAauJ,aAAsC,SAAAhG,GAAK,OAAIA,EAAME,MAAMzD,cAM5E,OACI,qBAAKwE,UAAWsC,KAAOiF,YAAvB,SACI,sBAAKvH,UAAWsC,KAAOkF,UAAvB,UACI,0CAEChM,GAAc,qCAAE,cAAC,GAAD,IACb,sBAAMwE,UAAWsC,KAAOmF,OAAQ/E,QAV1B,WAClBpB,ERQgB,yCACpB,WAAOA,GAAP,UAAAuD,EAAA,sEAEQvD,EAASlG,EAAeL,IAFhC,SAGc2I,KAHd,OAIQpC,EAASlG,EAAeL,IACxBuG,EAAS7F,GAAe,IALhC,gDAQQ2I,GAAkB9C,EAAD,MARzB,yDADoB,wDQCJ,+B,oBCvBL,OAA0B,iC,oBCU1BoG,GALG,WACd,OACI,qBAAKC,IAAKC,GAASC,IAAI,aAAc7H,UAAWY,KAAEkH,W,wCCgE3CC,GAzD2BjI,gBAAK,YAe3C,IAZmD,IAFHkI,EAEE,EAFFA,eAAgB3K,EAEd,EAFcA,UAAW4K,EAEzB,EAFyBA,YAAaC,EAEtC,EAFsCA,kBACxCC,EACE,EADFA,YACE,EAEVjG,mBAPT,GAKmB,mBAE7CkG,EAF6C,KAE9BC,EAF8B,KAI9CC,EAAaC,KAAKC,KAAKR,EAAiB3K,GACxCoL,EAAeF,KAAKC,KAAKF,EAAaH,GACtCO,GAAyBN,EAAgB,GAAKD,EAAc,EAC5DQ,EAAyBP,EAAgBD,EACvCS,EAAc,CAACC,QAAS,MAAOC,OAAQ,QAASC,WAAY,QAC5DC,EAAyBZ,EAdA,EAe3Ba,EAAQ,GAEHC,EAAI,EAAGA,GAAKZ,EAAYY,IAC7BD,EAAME,KAAKD,GAGf,IAAME,EAAwBtD,uBAAY,WACtCuC,EAAiBD,EAAgB,KAClC,CAACA,IAEEiB,EAAwBvD,uBAAY,WACtCuC,EAAiBD,EAAgB,KAClC,CAACA,IAEJ,OACI,sBAAKpI,UAAWsC,KAAOgH,UAAvB,UAEKN,GACD,cAAC,EAAD,CACI7I,MAAOyI,EAAalG,QAAS2G,EADjC,oBAGCJ,EACIM,QAAO,SAAArM,GAAI,OAAIA,GAAQwL,GAAyBxL,GAAQyL,KACxDtJ,KAAI,SAACnC,GAEF,IAAMsM,EAAoBtM,IAAS+K,EAAT,UAA0B3F,KAAOmH,QAAjC,YAA4CnH,KAAOoH,YACvEpH,KAAOmH,QAMb,OAAO,sBACMzJ,UAAWwJ,EACX9G,QANO,WAChBwF,EAAkBhL,IAGf,SAE6BA,GAFlBA,MAKzBuL,EAAeL,GAChB,cAAC,EAAD,CAAajI,MAAOyI,EACPlG,QAAS0G,EADtB,0BC9DCO,GAAoB,SAACC,GAC9B,IAAIC,EAAO,IAAIC,KAAKF,GACpB,MAAM,GAAN,OAAUG,GAAcF,EAAKG,WAA7B,YAA2CD,GAAcF,EAAKI,WAAa,GAA3E,YAAiFJ,EAAKK,gBAG7EH,GAAgB,SAACF,GAC1B,OAA+B,IAA3BA,EAAKM,WAAWnH,OACV,IAAN,OAAW6G,GAERA,G,oBCZEO,GACH,QADGA,GAEH,QCwBGC,GAAuBvK,gBAAK,YAC0B,IADxBwK,EACuB,EADvBA,KAAKC,EACkB,EADlBA,UAAUC,EACQ,EADRA,oBAAoBC,EACZ,EADYA,oBAChCC,EAAoB,EAApBA,iBAEpC/E,EAAWC,cACX+E,EAAS5F,aAAqC,SAAAhG,GAAK,OAAIA,EAAMpC,QAAQF,OAErEmO,EAA+BN,EAAK5M,UAAYiN,EAuBtD,OACI,qBAAIjI,QAZgB,YACf4H,EAAKO,WAAc,GAAOP,EAAK5M,UAAYiN,IAC5ChF,EAAS,UAAD,OAAW2E,EAAK7N,OAU5B,UACKqO,OAAOC,QAAQT,GAAMjL,KAAI,WAAe6J,GAAO,IAAD,mBAAnBtH,EAAmB,KAAdD,EAAc,KAE3C,GADwC,YAARC,GAA+B,QAARA,EAEnD,OACI,6BAAY,qBAAK5B,UAAWG,KAAM6K,KAAtB,SAA6BrJ,KAAhCuH,MAIrB,qBAAIlJ,UAAWG,KAAM8K,KAArB,UACI,cAAC,EAAD,CAAaC,SAAUN,EACVlI,QA5BM,SAAC3B,GAC5BA,EAAEoK,kBACFX,EAAqBF,EAAK7N,MAyBlB,oBAEA,cAAC,EAAD,CACIyO,SAAUN,EAA8BlI,QAnBzB,SAAC3B,GAC5BA,EAAEoK,kBACFV,EAAqBH,EAAK7N,MAgBlB,kBAGC8N,IAAcH,IACf,cAAC,EAAD,CAAa1H,QAtCE,SAAC3B,GACxBA,EAAEoK,kBACFT,EAAkBJ,EAAK7N,MAoC2ByO,SAA+B,IAArBZ,EAAKO,WAAzD,4BCnCHO,GAAiBtL,gBAAK,YAGwB,IAFnBuL,EAEkB,EAFlBA,KAAMC,EAEY,EAFZA,QAASC,EAEG,EAFHA,kBAAmBhB,EAEhB,EAFgBA,UAClCC,EACkB,EADlBA,oBAAqBC,EACH,EADGA,oBAAqBC,EACxB,EADwBA,iBAGpEc,EAAkBV,OAAOC,QAAQO,GAEvC,OACI,wBAAOtL,UAAWG,KAAMsL,MAAxB,UACI,gCACA,6BACKD,EAAgBnM,KAAI,WAAe6J,GAAO,IAAD,mBAAnBtH,EAAmB,KAAdD,EAAc,KAE5B+J,EAAgC,YAAR9J,EAAoBzB,KAAMwB,MAAQ/F,EAMhE,OACI,oBAAY8G,QALK,WACjB6I,EAAkB3J,IAIiB5B,UAAWG,KAAMwL,YAApD,SACI,sBAAM3L,UAAW0L,EAAjB,SAAyC/J,KADpCuH,UAMzB,gCAECmC,EAAKhM,KAAI,SAACkG,GACP,OAAO,cAAC8E,GAAD,CAAwBC,KAAM/E,EAAKgF,UAAWA,EACpCC,oBAAqBA,EACrBC,oBAAqBA,EAAqBC,iBAAkBA,GAFvDnF,EAAI9I,gB,6BChEjCmP,GACH,QADGA,GAEL,MAFKA,GAGF,SAHEA,GAIF,SAJEA,GAKH,GCeGC,GAA4B/L,gBAAK,YAShB,IAPtBW,EAOqB,EAPrBA,SACAqL,EAMqB,EANrBA,UACAC,EAKqB,EALrBA,wBACAvN,EAIqB,EAJrBA,YACAwN,EAGqB,EAHrBA,sBACAC,EAEqB,EAFrBA,gBAIEC,EAA8B1N,IAAgBoN,KAAsBK,EAE1E,OAAIH,EAEI,qBAAK9L,UAAWY,KAAEuL,aAAlB,SACI,sBAAKnM,UAAWY,KAAEwL,WAAlB,UACI,6BACKN,EAAU1E,QAEd3G,EAED,sBAAKT,UAAWY,KAAEyL,QAAlB,UACI,cAAC,EAAD,CAAa3J,QAASoJ,EAAU1L,IAAIkM,SAAUtM,UAAWY,KAAER,IAC9C8K,SAAUgB,EADvB,SAEKJ,EAAU1L,IAAIgH,QAClB5I,IAAgBoN,IACjB,cAAC,EAAD,CAAalJ,QAASsJ,EAAtB,kBAEA,cAAC,EAAD,CAAatJ,QAASqJ,EAAyB/L,UAAWY,KAAER,IAA5D,4BAOb,Q,wCCjDEmM,GAAW,SACXC,GACL,OAAOnJ,GAASoJ,IAAT,aAAiD,CAACC,OAAQF,IAC5D/R,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,SAJd0I,GAAW,SAQZjN,GACJ,OAAO+D,GAASM,KAAT,aAA4BrE,GAC9B7E,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,SAXd0I,GAAW,SAcT7N,GACP,OAAO2E,GAASU,OAAT,yBAAkCrF,IACpCjE,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,SAjBd0I,GAAW,SAoBTjN,GACP,OAAO+D,GAASsJ,IAAT,aAA0BrN,GAC5B7E,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,SAvBd0I,GAAW,SA0BJvO,EAAc4O,GAE1B,OAAOvJ,GAASsJ,IAAT,cAAkD,CAAC3O,QAAM4O,YAC3DnS,MAAK,SAAAmJ,GACF,OAAOA,EAAIC,KAAKgJ,iBC/BnBC,GAAa,SAACN,GAAD,gDAAkD,WAAOlL,GAAP,gBAAAuD,EAAA,sEAEpEvD,EAASlG,EAAeL,IAF4C,SAGjDwR,GAAkBC,GAH+B,OAG9D3I,EAH8D,OAIpEvC,EnCoCsD,CAC1DjG,KAAM,kBACNC,QmCtCwBuI,IACpBvC,EAASlG,EAAeL,IAL4C,gDAOpEqJ,GAAkB9C,EAAD,MAPmD,yDAAlD,uDCIbyL,GAAsCjN,gBAAK,YAAoD,IAAlDjC,EAAiD,EAAjDA,OAAQmP,EAAyC,EAAzCA,aAAchB,EAA2B,EAA3BA,sBACtE1K,EAAWC,cADsF,EAG/DW,oBAAkB,GAH6C,mBAGhG+K,EAHgG,KAGlFC,EAHkF,KASjGC,EAAeF,EAHX,OACA,OAIJG,EAA0BtH,uBAAY,WACxCoH,GAAiBD,KAClB,CAACA,IAEEI,EAAoBvH,uBAAY,SAAC9H,GDkCT,IAACsP,EAAkBV,ECjC7CtL,GDiC2BgM,ECjCCtP,EDiCiB4O,ECjCVI,EDiCT,yCAC9B,WAAO1L,GAAP,sBAAAuD,EAAA,sEAEQvD,EAASlG,EAAeL,IAFhC,SAGwCwR,GAAyBe,EAAUV,GAH3E,gBAGanQ,EAHb,EAGaA,IAAKuB,EAHlB,EAGkBA,MAAOC,EAHzB,EAGyBA,MACjBqD,EAAS/C,EAAiB9B,EAAKuB,EAAOC,IACtCqD,EAASlG,EAAeL,IALhC,kDAOQqJ,GAAkB9C,EAAD,MAPzB,0DAD8B,wDChC1B0K,MACD,CAAC1K,EAAU0L,EAAchB,IAEtBuB,EAAc,CAChB,CAACtR,KAAM,SAAUqQ,SAAU,kBAAMe,EAAkB,KACnD,CAACpR,KAAM,4BAA6BqQ,SAAU,kBAAMe,EAAkB,KACtE,CAACpR,KAAK,eAAiBqQ,SAAU,kBAAMe,EAAkB,KACzD,CAACpR,KAAM,eAAiBqQ,SAAU,kBAAMe,EAAkB,KAC1D,CAACpR,KAAK,eAAiBqQ,SAAU,kBAAMe,EAAkB,MAG7D,OACI,sBAAKrN,UAAWY,KAAE4M,sBAAlB,UACI,sBAAKxN,UAAWY,KAAE6M,YAAlB,mBAEI,cAAC,EAAD,CAAa/K,QAAS0K,EAAyBpN,UAAWY,KAAER,IAA5D,SAAkE+M,IACjEF,GAAgB,sBAAMjN,UAAWY,KAAE/C,OAAnB,SAA4BA,OAGjD,qBAAKmC,UAAWY,KAAE8M,aAAlB,SACKH,EAAYlO,KAAI,WAAmB6J,GAAO,IAAxBjN,EAAuB,EAAvBA,KAAMqQ,EAAiB,EAAjBA,SACrB,OAAO,cAAC,EAAD,CAAqB5J,QAAS4J,EAA9B,SAAyCrQ,GAAvBiN,cChDhCyE,GACH,OADGA,GAEH,OAFGA,GAGF,GCDEC,GAAW,SACXC,GACL,OAAOxK,GAASoJ,IAAT,aAAiD,CAACC,OAAQmB,IAC5DpT,MAAK,SAAAmJ,GAAG,OAAIA,EAAIC,SAHhB+J,GAAW,SAKZE,GACJ,OAAOzK,GAASM,KAAT,aAA4BmK,GAC9BrT,MAAK,SAAAmJ,GAAG,OAAIA,EAAIC,SAPhB+J,GAAW,SASTG,GACR,OAAO1K,GAASU,OAAT,yBAAkCgK,IACnCtT,MAAK,SAAAmJ,GAAG,OAAIA,EAAIC,SAXhB+J,GAAW,SAaTE,GACP,OAAOzK,GAASsJ,IAAT,aAA2BmB,GAC7BrT,MAAK,SAAAmJ,GAAG,OAAIA,EAAIC,SCVhBmK,GAAa,2DAAM,WAAO1M,EAAuB2M,GAA9B,gCAAApJ,EAAA,+DAC2BoJ,IAAW7O,MAA3D9B,EADqB,EACrBA,IAAKC,EADgB,EAChBA,IAAKL,EADW,EACXA,KAAMQ,EADK,EACLA,QAASF,EADJ,EACIA,UAAWC,EADf,EACeA,SACvCyQ,EAA0C,CAC1C5Q,MACAC,MACAC,YACAN,OACAG,U3ChBqB,G2CiBrBK,UACAD,YATwB,kBAaLmQ,GAAkBM,GAbb,OAalBrK,EAbkB,OAcxBvC,EAASlG,EAAeL,IACxBuG,ExCsBsD,CAC1DjG,KAAM,kBACNC,QwCxBwBuI,IAfI,kDAkBxBO,GAAkB9C,EAAD,MAlBO,yBAoBxBA,EAASlG,EAAeL,IApBA,6EAAN,yDAiDboT,GAAe,SAACJ,EAAgBK,GAAjB,gDACxB,WAAO9M,GAAP,gBAAAuD,EAAA,sEAEciJ,EAAY,CACdrR,IAAKsR,EACL9R,KAAMmS,GAEV9M,EAASlG,EAAeL,IANhC,SAOc6S,GAAoB,CAACE,cAPnC,uBAQcxM,EAAS0M,MARvB,uDAUQ5J,GAAkB9C,EAAD,MAVzB,yDADwB,uDChCf+M,GAA8CvO,gBAAK,YAAa,IAAD,EAAVwO,EAAU,EAAVA,KAExDhN,EAAWC,cAGXxD,EADS4I,cACajI,GAEtBA,EAAKqG,aAAqC,SAAAhG,GAAK,OAAIA,EAAMQ,OAAOb,MAChEd,EAAQmH,aAA8C,SAAAhG,GAAK,OAAIA,EAAMnB,MAAMA,SAC3EY,EAAcuG,aAA8C,SAAAhG,GAAK,OAAIA,EAAMQ,OAAOf,eAClFC,EAAcsG,aAA8C,SAAAhG,GAAK,OAAIA,EAAMQ,OAAOd,eAElFa,EAAO1B,EAAM2Q,MAAK,SAAAjP,GAAI,OAAIA,EAAK7C,MAAQiC,KAEvC8P,EAAuBlP,EAAOA,EAAKxB,SAAWlC,EAC9C6S,EAAqBnP,EAAOA,EAAKzB,OAASjC,EAC1C8S,EAAmBJ,EAAOA,EAAKrS,KAAOL,EAhB4B,EAmBhDsG,mBAAiBwM,GAnB+B,mBAmBjEzS,EAnBiE,KAmB3D0S,EAnB2D,OAoBxCzM,mBAAiBsM,GApBuB,mBAoBjE1Q,EApBiE,KAoBvD8Q,EApBuD,OAqB5C1M,mBAAiBuM,GArB2B,mBAqBjE5Q,EArBiE,KAqBzDgR,EArByD,OAsB1B3M,mBAAiB,GAtBS,mBAsBjE4M,EAtBiE,KAsBhDC,EAtBgD,OAuB1B7M,oBAAkB,GAvBQ,mBAuBjE+J,EAvBiE,KAuBhD+C,EAvBgD,OAwBpC9M,mBAAqB,IAxBe,mBAwBjE+M,EAxBiE,KAwBtDC,EAxBsD,OAyBpChN,mBAAStE,EAAM,IAzBqB,mBAyBjEuR,EAzBiE,KAyBrDC,EAzBqD,KA2BpEC,EAAmBF,EAAaA,EAAWrR,SAAWlC,EACtD0T,GAAiBH,EAAaA,EAAWtR,OAASjC,EAClDoR,GAAemC,EAAaA,EAAW1S,IAAMb,EAE3C2T,GAAcN,EAAUjM,OAAS,EACjCwM,GAAyBP,EAAUjM,OAAS,GAAO8L,EAAkBS,GAI3EE,qBAAU,WACkB,IAApBX,GACAE,GAAmB,KAExB,CAACF,IAEJ,IA0FIhD,GA1FEC,GAA0BjG,uBAAY,WACxCxE,EAAS3C,EAAeiN,GAAoB+B,OAC7C,CAACrM,IAEEoO,GAAwB5J,uBAAY,WACtCxE,EDxCiB,SAACrF,GAAD,gDACrB,WAAOqF,GAAP,gBAAAuD,EAAA,sEAEciJ,EAAY,CACd7R,QAEJqF,EAASlG,EAAeL,IALhC,SAMc6S,GAAiB,CAACE,cANhC,uBAOcxM,EAAS0M,MAPvB,uDASQ5J,GAAkB9C,EAAD,MATzB,yDADqB,sDCwCRqO,CAAU1T,IACnB8P,OACD,CAACzK,EAAUrF,EAAK8P,KAEb6D,GAAwB9J,uBAAY,WACtCxE,EL3DiB,SAACvD,EAAsBD,EAAkBD,GAAzC,gDACrB,WAAOyD,GAAP,gBAAAuD,EAAA,sEAEcvF,EAAO,CACTvB,eACAD,WACAD,UAEJyD,EAASlG,EAAeL,IAPhC,SAQcwR,GAAiB,CAACjN,SARhC,uBAScgC,EAASwL,GAAW,CAAC/O,kBATnC,uDAWQqG,GAAkB9C,EAAD,MAXzB,yDADqB,sDK2DRuO,CAAUnR,EAAIZ,EAAUD,IACjCkO,OACD,CAACzK,EAAU5C,EAAIZ,EAAUD,EAAOkO,KAE7B+D,GAA0BhK,uBAAY,WDnCpB,IAACiI,ECoCrBzM,GDpCqByM,ECoCCrP,EDpCF,yCACxB,WAAO4C,GAAP,UAAAuD,EAAA,sEAEQvD,EAASlG,EAAeL,IAFhC,SAGc6S,GAAoBG,GAHlC,uBAIczM,EAAS0M,MAJvB,uDAMQ5J,GAAkB9C,EAAD,MANzB,yDADwB,wDCqCpByK,OACD,CAACzK,EAAU5C,EAAGqN,KAEXgE,GAA0BjK,uBAAY,WACpC/H,GACAuD,ELtDgB,SAACvD,EAAsBW,GAAvB,gDACxB,WAAO4C,GAAP,UAAAuD,EAAA,sEAEQvD,EAASlG,EAAeL,IAFhC,SAGcwR,GAAoB7N,GAHlC,uBAIc4C,EAASwL,GAAW,CAAC/O,kBAJnC,uDAMQqG,GAAkB9C,EAAD,MANzB,yDADwB,sDKsDP0O,CAAajS,EAAcW,IAExCqN,OACD,CAACzK,EAAUvD,EAAcW,EAAGqN,KAEzBkE,GAAoBnK,uBAAY,WAClCxE,EAAS6M,GAAazP,EAAIzC,IAC1B8P,OACD,CAACzK,EAAU5C,EAAIzC,EAAK8P,KAEjBmE,GAAoBpK,uBAAY,WAC9B/H,GACAuD,ELvDgB,SAACvD,EAAD,OAAwBtB,EAAxB,EAAwBA,IAAQ0T,EAAhC,uEACxB,WAAO7O,GAAP,gBAAAuD,EAAA,sEAEcvF,EAFd,aAGY7C,OACG0T,GAEP7O,EAASlG,EAAeL,IANhC,SAOcwR,GAAoB,CAACjN,SAPnC,uBAQcgC,EAASwL,GAAW,CAAC/O,kBARnC,uDAUQqG,GAAkB9C,EAAD,MAVzB,yDADwB,sDKuDP8O,CAAarS,EAAc,CAACtB,IAAKiC,EAAIZ,WAAUD,YAE5DkO,OACD,CAACzK,EAAUvD,EAAcW,EAAIZ,EAAUD,EAAOkO,KAE3CC,GAAwBlG,uBAAY,WACjCmG,GACD+C,GAAmB,GAEvB,IAAIqB,EZ/FW,SAACzS,GACpB,IAAM0S,EAAM1S,EAAM2S,QAAO,SAACC,EAAKlR,GAAN,OAAekR,GAAO,EAAIlR,EAAKtB,QAAU,EAAIsB,EAAKtB,SAAQ,GAC7EyS,EAAOlI,KAAKmI,SAAWJ,EACvB1M,EAAMhG,EAAM2S,QAAO,SAACC,EAAiClR,EAAM4J,GACzD,IAAMyH,EAASH,EAAIF,KAAO,EAAIhR,EAAKtB,QAAU,EAAIsB,EAAKtB,OACtD,MAAO,CAACsS,IAAKK,EAAQjS,GAAIiS,EAASF,EAAOvH,EAAIsH,EAAI9R,MAEnD,CAAC4R,IAAK,EAAG5R,IAAK,IAGpB,OAFAkS,QAAQC,IAAI,SAAUP,EAAKG,EAAM7M,GAE1BhG,EAAMgG,EAAIlF,GAAK,GYqFJoS,CAAQlT,GACtBwR,EAAciB,GACdnB,EAAe,CAACmB,GAAF,mBAAcpB,OAC7B,CAACrR,EAAOqO,EAAiBgD,IAEtB8B,GAAwBjL,uBAAY,WAClC,GAAI0J,GAGA,OAFAJ,EAAcH,EAAUH,SACxBC,EAAmBD,EAAkB,GAGzCE,GAAmB,KAErB,CAACG,EAAYL,EAAiBG,EAAWO,KAKzCjQ,IAAM,oBACPqM,GAAmB,CAChBxE,MAAM,WAAD,OAAa3I,GAAe2B,IAAK,CAClCgH,MAAO,OAAQkF,SACX7N,IAAgBkP,GAAoBiC,GAAwBF,MAJhE,eAQP9D,GAAsB,CACnBxE,MAAM,UAAD,OAAY3I,GAAe2B,IAAK,CACjCgH,MAAO,SAAUkF,SACb7N,IAAgBkP,GAAoBmC,GAA0BC,MAXlE,eAePnE,GAAsB,CACnBxE,MAAM,UAAD,OAAY3I,GAAe2B,IAAK,CACjCgH,MAAO,SAAUkF,SACb7N,IAAgBkP,GAAoBsC,GAAoBC,MAlB5D,eAsBPtE,GAAqB,CAClBxE,MAAM,IAAD,OAAMiI,GAAoBjP,IAAK,CAChCgH,MAAO,OAAQkF,SAAUyE,MAxBzB,GA+BRvS,IAAgBoN,KAChBE,GAAYvM,GAAOyR,KAEnBxS,IAAgBoN,KAChBE,GAAYvM,GAAOwE,QAGnBvF,IAAgBoN,KAChBE,GAAYvM,GAAO0R,QAEnBzS,IAAgBoN,KAChBE,GAAYvM,GAAO2R,OAGvB,IAAMC,GAAkC1S,IAAgBkP,IAAuBnP,IAAgBoN,GACzFwF,GAA8B3S,IAAgBkP,KAAsBnP,IAAgBoN,IACnFpN,IAAgBoN,IAEvB,OACI,eAACC,GAAD,CAAOC,UAAWA,GAAWC,wBAAyBA,GAC/CC,sBAAuBA,GAAuBxN,YAAaA,EAC3DyN,gBAAiBA,EAFxB,UAIKzN,IAAgBoN,IACjB,uBAAM5L,UAAWY,KAAEyQ,KAAnB,iDAA8D5S,EAA9D,KACI,uBADJ,iDAGC2S,IACD,cAAC,GAAD,CAAgBpR,UAAWY,KAAEY,MAAOG,MAAO1F,EAAMkF,aAAcwN,EAASnM,YAAa,UAEpF2O,IACD,qCACI,cAAC,GAAD,CAAgBnR,UAAWY,KAAEY,MAAOG,MAAO7D,EAAUqD,aAAcyN,EACnDpM,YAAa,kBAC7B,cAAC,GAAD,CAAgBxC,UAAWY,KAAEY,MAAOG,MAAO9D,EAAQsD,aAAc0N,EACjDrM,YAAa,mBAEhChE,IAAgBoN,IAAsB,cAACmB,GAAD,CAAgBlP,OAAQyR,GAAgBtC,aAAcA,GACtChB,sBAAuBA,WC9L7EsF,GAA0BxR,gBAAK,YAIxC,IAJsD,IAAZ9B,EAAW,EAAXA,MAEtCuT,EAAyB,GAEpBrI,EAAI,EAAGA,EAHG,EAGaA,IAC5BqI,EAAM,sBAAOA,GAAP,CAAe,cAACC,GAAD,CAAMC,SAAUzT,EAAQkL,MAGjD,OACI,8BACKqI,OASAC,GAAO1R,gBAAK,YAAgC,IAA9B2R,EAA6B,EAA7BA,SACvB,OACI,+BAAOA,EAAW,sCAAe,aCA5BC,GAAoB5R,gBAAK,YAAqB,IAAnB6R,EAAkB,EAAlBA,aAE1BrQ,EAAWC,cAGXxD,EADS4I,cACajI,GAEtBiH,EAAWC,cAEXhI,EAAQmH,aAA8C,SAAAhG,GAAK,OAAIA,EAAMnB,MAAMA,SAC3EU,EAAYyG,aAAqC,SAAChG,GAAD,OAAWA,EAAMnB,MAAMU,aACxE0J,EAAiBjD,aAAqC,SAAChG,GAAD,OAAWA,EAAMnB,MAAMM,mBAC7Eb,EAAY0H,aAAqC,SAAChG,GAAD,OAAWA,EAAMnB,MAAMP,aACxE4K,EAAclD,aAAqC,SAAChG,GAAD,OAAWA,EAAMnB,MAAMV,QAC1EuB,EAAcsG,aAA8C,SAAAhG,GAAK,OAAIA,EAAMQ,OAAOd,eAOlFmT,EAAgBC,mBAAQ,WACtB,OAAOjU,EAAMyB,KAAI,YAGQ,IAFHvB,EAEE,EAFFA,SAAUD,EAER,EAFQA,OACVvB,EACE,EADFA,QAAS0B,EACP,EADOA,MAAOvB,EACd,EADcA,IAAKiB,EACnB,EADmBA,QAInC,MAAO,CAACI,WAAUD,SAAQvB,QAF1BA,EAAUqN,GAAkBrN,GAEOiV,OADtB,cAACD,GAAD,CAAQtT,MAAOA,IACevB,MAAKiB,gBAI1D,CAACE,IAEP6R,qBAAU,WACNnO,EAASlG,EAAeL,IAExB,IAAI+W,EAAcC,YAAW,WACrBhU,GACAuD,EAASwL,GAAW,CAAC/O,eAAcb,KAAM+K,EAAa3J,iBAE3D,KAEH,OAAO,WACH0T,aAAaF,MAElB,CAACxQ,EAAU2G,EAAa3J,IAG3B,IAAM2T,EAAwBnM,uBAAY,SAACoM,GACvC5Q,E1CzByB,SAAChD,GAClC,MAAO,CACHjD,KAAM,2BACNC,QAAS,CAACgD,c0CsBG6T,CAAuC,MAAjB7T,EAAU,GAAV,WAA2B4T,GAA3B,WAA+CA,OAC/E,CAAC5Q,EAAUhD,IAER8T,EAAwBtM,uBAAY,SAAC5I,GACnCoE,E1CtBiB,SAACpE,GAC9B,MACI,CACI7B,KAAM,oBACNC,QAAS,CAAC4B,S0CkBGmV,CAAkBnV,MAC/B,CAACoE,IAMCgR,EAA2BxM,uBAAY,WACrC/H,GACA4T,EAAa/F,GAAkB7N,KAEpC,CAAC4T,EAAc5T,IAGZwU,EAA0BzM,uBAAY,SAACrJ,GACzCkV,EAAa/F,GAAqBnP,KACnC,CAACkV,IAEEa,EAAwB1M,uBAAY,SAACrJ,GACvCkV,EAAa/F,GAAqBnP,KACnC,CAACkV,IAEJ,OAAK/T,EAID,sBAAKoC,UAAWG,KAAM8E,QAAtB,UACI,oBAAIvC,QAxBe,WACvBiD,GAAU,IAuB2B3F,UAAWG,KAAMsS,OAAlD,8BACA,cAAC,EAAD,CAAa/P,QAAS4P,EAA0BtS,UAAWG,KAAMC,IAAjE,0BACC3B,GAAe,cAAC4P,GAAD,IAEhB,cAACjD,GAAD,CAAgBC,KAAMuG,EAAetG,QApErB,CACpBxN,SAAU,WAAYD,OAAQ,SAC9BvB,QAAS,eAAgB0B,MAAO,QAAS0U,QAAS,WAmE9BnH,kBAAmB0G,EAAuB1H,UAAWH,GACrDI,oBAAqB+H,EACrB9H,oBAAqB+H,IACrC,cAACG,GAAD,CAAY3K,eAAgBA,EAChB3K,UAAWA,EACX4K,YAAaA,EACbC,kBAAmBkK,EACnBjK,YA7EC,QA6DV,gCCnGZ,SAASyK,GAAgBC,GAU5B,OARwB,SAACC,GAGrB,OAFiB/N,aAAsC,SAAAhG,GAAK,OAAIA,EAAME,MAAMzD,cAKrE,cAACqX,EAAD,eAAeC,IAFX,cAAC,IAAD,CAAU9N,GAAI9B,M,4CCJpB6P,GAA0CjT,gBAAK,YAA2B,IAAzBsH,EAAwB,EAAxBA,MAAO4L,EAAiB,EAAjBA,YAAiB,EAEvD9Q,oBAAS,GAF8C,mBAE7E+Q,EAF6E,KAErEC,EAFqE,OAG5DhR,mBAASkF,GAHmD,mBAG7EnL,EAH6E,KAGvE0S,EAHuE,KAyBlF,OACIsE,EACI,oBAAIE,cAtBwB,WAChCD,GAAW,IAqByClT,UAAWG,KAAMsS,OAAjE,SAA0ExW,IACxE,cAAC,GAAD,CAAgB0F,MAAO1F,EAAMmX,OAnBH,WAChCF,GAAW,GACXF,EAAY/W,IAiB4DoX,WAAS,EAC3D9S,SARO,SAACQ,GAC9B4N,EAAQ5N,EAAEC,cAAcW,QAQF3B,UAAWG,KAAMqB,MAAOJ,WAhBjB,SAACL,GAChB,UAAVA,EAAEa,MACFsR,GAAW,GACXF,EAAY/W,UCuDT2W,OArEC,WACZ,IAAMtR,EAAWC,cAEX1F,EAASkJ,aAAqC,SAAAhG,GAAK,OAAIA,EAAMpC,QAAQd,UACrEE,EAAQgJ,aAAqC,SAAAhG,GAAK,OAAIA,EAAMpC,QAAQZ,SACpEE,EAAO8I,aAAqC,SAAAhG,GAAK,OAAIA,EAAMpC,QAAQV,QACnEC,EAAuB6I,aAAqC,SAAAhG,GAAK,OAAIA,EAAMpC,QAAQT,wBANvE,EAQgBgG,mBAAiBtG,GARjC,mBAQX0X,EARW,KAQAC,EARA,OASwBrR,oBAAkB,GAT1C,mBASXsR,EATW,KASIC,EATJ,KAmBZC,EAAqB,WACvBpS,EAAS6M,GAAalS,EAAMqX,IAC5BG,GAAiB,GACjBF,EAAa3X,IAejB,OACI,sBAAKoE,UAAWG,KAAMwT,eAAtB,UACI,sBAAK3T,UAAWG,KAAMyT,YAAtB,UAEI,sBAAK5T,UAAWG,KAAM0T,cAAtB,UACI,qBAAK7T,UAAWG,KAAM2T,QAASpR,QA/BpB,WACvB+Q,GAAiB,IA8BL,0BACA,qBAAK5L,IAAI,SAAS7H,UAAWG,KAAMtE,OAAQ8L,IAAK9L,OAGnD2X,GAED,sBAAKxT,UAAWG,KAAM4T,YAAtB,UAAmC,cAAC,GAAD,CAAgB/T,UAAWG,KAAMqB,MAAOG,MAAO2R,EAC/B/S,SAlCnC,SAACQ,GACzBwS,EAAaxS,EAAEC,cAAcW,QAkC8BP,WAzBjC,SAACL,GACb,UAAVA,EAAEa,KACF8R,KAwBuDL,WAAS,EAAC7Q,YAAa,YAEtE,sBAAMxC,UAAWG,KAAM6T,eAAgBtR,QAASgR,UAGxD,sBAAK1T,UAAWG,KAAM8T,YAAtB,UACI,cAAClB,GAAD,CAAc3L,MAAOnL,EAAM+W,YA1BjB,SAACkB,GACfA,IAAajY,GACbqF,EAAS6M,GAAa+F,EAAUZ,OA0B5B,sBAAKtT,UAAWG,KAAMkG,KAAtB,UACI,iCAAM,sCAAN,KAAqBtK,KACrB,iCAAM,+CAAN,KAA8BG,iB,gFCnErCiY,GAAsB,SAACC,EAAsBC,EAAkBC,GAExE,IAAMhT,EAAWC,cAEjBkO,qBAAU,WACNmB,QAAQC,IAAI,aACZ,IAAIiB,EAAcC,YAAW,WACzBqC,MACDE,GACH,OAAO,WAEHtC,aAAaF,MAElB,CAACxQ,EAAS+S,KCHJE,GAAkCzU,gBAAK,YACqC,IADnC0U,EACkC,EADlCA,uBAAuBC,EACW,EADXA,uBACpBC,EAA+B,EAA/BA,0BAE3CvX,EAAgB4H,aAAqC,SAAChG,GAAD,OAAWA,EAAMK,MAAMjC,iBAC5EC,EAAgB2H,aAAqC,SAAChG,GAAD,OAAWA,EAAMK,MAAMhC,iBAHF,EAKtD8E,mBAAmB,CAACsS,EAAwBC,IALU,mBAKzE9S,EALyE,KAKlEgT,EALkE,KAWhFR,IAJyB,WACrBO,EAA0B/S,EAAM,GAAIA,EAAM,MAGRA,EAAO,KAM7C,OACI,cAACiT,GAAA,EAAD,CAAKC,GAAI,CAACC,MAAO,OAAjB,SACI,sBAAK9U,UAAWY,KAAEmU,cAAlB,UACI,cAACC,GAAA,EAAD,CACIrT,MAAOA,EACPpB,SATO,SAAC0U,EAAcC,GAClCP,EAASO,IASGC,kBAAkB,OAClB5X,IAAKJ,IAET,sBAAK6C,UAAWY,KAAEwU,aAAlB,UACI,+BAAOhY,IACP,+BAAOD,eC9BlBkY,GAAoCvV,gBAAK,YAAsD,IAApD0U,EAAmD,EAAnDA,uBAAuBC,EAA4B,EAA5BA,uBACrEnT,EAAWC,cAEX7D,EAAUqH,aAAqC,SAAAhG,GAAK,OAAIA,EAAMpC,QAAQF,OAEtE6Y,EAAqBxP,uBAAY,WACnCxE,EAAS3D,EAAsBD,MAChC,CAAC4D,EAAU5D,IAER6X,EAAsBzP,uBAAY,WACpCxE,EAAS3D,EAAsB/B,MAChC,CAAC0F,IAEEkU,EAA+B1P,uBAAY,SAAC2P,EAAkBC,GAChEpU,EjD6ByD,CAC7DjG,KAAM,8BACNC,QAAS,CAACgC,IiD/BsBmY,EjD+BjBlY,IiD/B2BmY,OACvC,CAACpU,IAEJ,OACI,sBAAKtB,UAAWG,KAAM8E,QAAtB,UACI,kDAEA,sBAAKjF,UAAWG,KAAMwV,YAAtB,UACI,cAAC,EAAD,CAAajT,QAAS4S,EAAtB,gBACA,cAAC,EAAD,CAAa5S,QAAS6S,EAAtB,oBAGJ,cAAChB,GAAD,CAAaC,uBAAwBA,EACxBC,uBAAwBA,EACxBC,0BAA2Bc,UCtCvCI,GAAS,SAAC7W,GAAD,OAAoCA,EAAMK,MAAMyW,WCFzDC,GAAe,SAAC/W,GAAD,OAAgCA,EAAMK,MAAMlC,M,oBCgC3D6Y,GAAYjW,gBAAK,YAG2B,IAFtBV,EAEqB,EAFrBA,MAAO6I,EAEc,EAFdA,YAAaD,EAEC,EAFDA,eAAgB3K,EAEf,EAFeA,UAAWG,EAE1B,EAF0BA,UAC/CmU,EACqB,EADrBA,aAGzBrQ,EAAWC,cAEX9C,EAAcsG,aAA8C,SAAAhG,GAAK,OAAIA,EAAMQ,OAAOd,eAClFC,EAAKqG,aAAqC,SAAAhG,GAAK,OAAIA,EAAMQ,OAAOb,MALlB,EAO5BwD,mBAAiBtG,GAPW,mBAO7Coa,EAP6C,KAOvCC,EAPuC,KAe9CC,EAAgBrE,mBAAQ,WACtB,OAAOzS,EAAMC,KAAI,YAGQ,IAFHwL,EAEE,EAFFA,WAAYsL,EAEV,EAFUA,UACZla,EACE,EADFA,KAAMK,EACJ,EADIA,QAASoB,EACb,EADaA,QAASjB,EACtB,EADsBA,IAItC,MAAO,CAACR,OAAM4O,aAAYvO,QAF1BA,EAAUqN,GAAkBrN,GAEO6Z,YAAWzY,UAASjB,YAGjE,CAAC2C,IAEDgX,EAAehX,EAAMmP,MAAK,SAAAD,GAAI,OAAIA,EAAK7R,MAAQiC,KAE/C2X,EAAiBvQ,uBAAY,WAC/BxE,EpDCqD,CACzDjG,KAAM,gCACNC,QAAS,CAACmC,SoDH0BuY,OAClC,CAAC1U,EAAS0U,IAEZ7B,GAAoBkC,EAAkBL,EAAM,KAE5C,IAAM5D,EAAwBtM,uBAAY,SAAC5I,GACnCoE,EpDrBgB,SAACpE,GAAD,MAAmB,CAC3C7B,KAAM,oBACNC,QAAS,CAAC4B,SoDmBOoZ,CAAapZ,MAE1B,CAACoE,IAEC2Q,EAAwBnM,uBAAY,SAACoM,GACvC5Q,EpDhBwB,SAAC9D,GAAD,MAAwB,CAEpDnC,KAAM,2BACNC,QAAS,CAACkC,coDaG+Y,CAAkC,MAAjB/Y,EAAU,GAAV,WAA2B0U,GAA3B,WAA8CA,OACzE,CAAC5Q,EAAU9D,IAERgZ,EAA2B1Q,uBAAY,WACzC6L,EAAa/F,GAAkBhQ,KAChC,CAAC+V,IAEEY,EAA0BzM,uBAAY,SAACiI,GACzC4D,EAAa/F,GAAqBmC,KACnC,CAAC4D,IAEE8E,EAAwB3Q,uBAAY,SAACiI,GACvC4D,EAAa/F,GAAqBmC,KACnC,CAAC4D,IAtDgD,8CAwDpD,WAAoC5D,GAApC,UAAAlJ,EAAA,sEACUvD,EAASwL,GAAW,CAAC/O,aAAcgQ,EAAQxQ,IAAK,IAAKF,UAAW,OAD1E,OAEIsU,EAAa/F,GAAoBmC,GAFrC,4CAxDoD,sBA6DpD,OACI,sBAAK/N,UAAWY,KAAE8V,YAAaC,iBAAe,EAA9C,UACI,4CAEA,sBAAK3W,UAAWY,KAAE2E,IAAlB,UACI,cAAC,GAAD,CAAgBpF,MAAO,CAAC2U,MAAO,OAAQnT,MAAOqU,EAC9B7U,aAAc8U,EAAS5U,QAASgV,IAChD,cAAC,EAAD,CAAalW,MAAO,CAAC2U,MAAO,OAAQpS,QAAS8T,EAA7C,6BAGH/X,GAAe,cAAC4P,GAAD,CAAgBC,KAAM8H,IAEtC,cAAChL,GAAD,CAAgBC,KAAM6K,EAAe5K,QA/DrB,CACpBrP,KAAM,OAAQ4O,WAAY,QAC1BvO,QAAS,eAAgB6Z,UAAW,aAAczD,QAAS,WA8DvCnH,kBAAmB0G,EACnB1H,UAAWH,GAAsBI,oBAAqB+H,EACtD9H,oBAAqBgM,EAAuB/L,iBA5EhB,8CA6E5C,cAAC,GAAD,CAAW1C,eAAgBA,EAAgB3K,UAAWA,EAAW4K,YAAaA,EACnEC,kBAAmBkK,EAAuBjK,YArEzC,WCYTyK,MAtCU9S,gBAAK,YAAqB,IAAnB6R,EAAkB,EAAlBA,aACtBrQ,EAAWC,cAEXnC,EAAQ2F,YAA8C6Q,IACtD3N,EAAclD,YAAqC+Q,IACnD9N,EAAiBjD,aAAqC,SAAChG,GAAD,OAAWA,EAAMK,MAAMwX,uBAC7EvZ,EAAY0H,aAAqC,SAAChG,GAAD,OAAWA,EAAMK,MAAM/B,aACxEmX,EAAyBzP,aAAqC,SAAChG,GAAD,OAAWA,EAAMK,MAAM9B,OACrFmX,EAAyB1P,aAAqC,SAAChG,GAAD,OAAWA,EAAMK,MAAM7B,OACrFC,EAAYuH,aAAqC,SAAChG,GAAD,OAAWA,EAAMK,MAAM5B,aACxEC,EAAWsH,aAA+C,SAAChG,GAAD,OAAWA,EAAMK,MAAM3B,YACjFC,EAAUqH,aAA+C,SAAChG,GAAD,OAAWA,EAAMK,MAAM1B,WActF,OAZA+R,qBAAU,WACNnO,EAASlG,EAAeL,IACxB,IAAI+W,EAAcC,YAAW,WACzBzQ,EAAS0M,QACV,KAEH,OAAO,WACHgE,aAAaF,MAElB,CAACxQ,EAAU2G,EAAauM,EAAwBC,EAAwB/W,EACvEF,EAAUC,IAET2B,EAKD,sBAAKY,UAAWY,KAAEqE,QAAlB,UACI,cAACoQ,GAAD,CAAab,uBAAwBA,EAAwBC,uBAAwBA,IACrF,cAACsB,GAAD,CAAW3W,MAAOA,EAAO6I,YAAaA,EAAaD,eAAgBA,EAAgB3K,UAAWA,EACnFG,UAAWA,EAAWmU,aAAcA,OAP5C,iCCuCAkF,OA7Df,WACI,IAAMvV,EAAWC,cAEXtG,EAAS8J,aAAqC,SAAAhG,GAAK,OAAIA,EAAMD,IAAI7D,UACjEC,EAAgB6J,aAAsC,SAAAhG,GAAK,OAAIA,EAAMD,IAAI5D,iBACzEC,EAAQ4J,aAA+C,SAAAhG,GAAK,OAAIA,EAAMD,IAAI3D,SAGhFsU,qBAAU,WACNnO,EC1BuB,yCAC3B,WAAOA,GAAP,gBAAAuD,EAAA,sEAEQvD,EAASlG,EAAeL,IAFhC,SAG0B2I,KAH1B,OAGcE,EAHd,OAIQtC,EAAS7F,GAAe,IACxB6F,EAAS5E,EAAakH,IAL9B,gDAOQtC,EAAS7F,GAAe,IAPhC,yBASQ6F,EAASlG,EAAeL,IACxBuG,E7DkB6B,CACrCjG,KAAM,mB6D7BN,4EAD2B,yDD2BxB,CAACiG,IAEJ,IAAMqQ,EAAe7L,uBAAY,SAACtH,EAA8BC,EAA8BC,GAC1F4C,EpDGuB,SAAC5C,GAC5B,MAAM,CACNrD,KAAM,wBACNC,QAAS,CAACoD,OoDNGoY,CAAgBpY,IACzB4C,EAAS3C,EAAeH,EAAaC,MACtC,CAAC6C,IAEEyV,EAAoBjR,uBAAY,SAACtH,EAA8BE,GACjEiT,EAAanT,EAAamP,GAAmBjP,KAC9C,CAACiT,IAEEqF,EAAoBlR,uBAAY,SAACtH,EAA8BE,GACjEiT,EAAanT,EAAamP,GAAmBjP,KAC9C,CAACiT,IAGJ,OAEI,sBAAK3R,UAAWsC,KAAO2U,WAAvB,UACI,cAAC3P,GAAD,IAEA,sBAAKtH,UAAWsC,KAAO4U,UAAvB,UACKjc,IAAWF,GAAkB,cAAC,GAAD,IAE5BG,EAEE,eAAC,IAAD,WACI,cAAC,IAAD,CAAOic,KAAMjU,GAAYkU,QAAS,cAAC,IAAD,CAAUpS,GAAI9B,OAChD,cAAC,IAAD,CAAOiU,KAAMjU,GAAckU,QAAS,cAAC,GAAD,MACpC,cAAC,IAAD,CAAOD,KAAMjU,GAAmBkU,QAAS,cAAC,GAAD,MACzC,cAAC,IAAD,CAAOD,KAAMjU,GAAgBkU,QAAS,cAAC,GAAD,MACtC,cAAC,IAAD,CAAOD,KAAMjU,GAAsBkU,QAAS,cAAC,GAAD,MAC5C,cAAC,IAAD,CAAOD,KAAMjU,GAAmBkU,QAAS,cAAC,GAAD,IAAzC,SACI,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,GAAD,QAElC,cAAC,IAAD,CAAOD,KAAM,IAAKC,QAAS,cAAC,IAAD,CAAUpS,GAAI9B,OACzC,cAAC,IAAD,CAAOiU,KAAMjU,GAAYkU,QAAS,cAAC1F,GAAD,CAAOC,aAAcoF,IAAvD,SACI,cAAC,IAAD,CAAOI,KAAK,MAAMC,QAAS,cAAC1F,GAAD,CAAOC,aAAcoF,QAEpD,cAAC,IAAD,CAAOI,KAAMjU,GAAYkU,QAAS,cAAC,GAAD,CAAOzF,aAAcqF,MACvD,cAAC,IAAD,CAAOG,KAAMjU,GAAYkU,QAAS,cAAC,GAAD,SAhBxB,gCAqBtB,qBAAKpX,UAAWsC,KAAO+B,IAAvB,SAA6BlJ,QEtEzCkc,IAASC,OAEL,cAAC,IAAD,UACI,cAAC,IAAD,CAAU9X,MAAOA,EAAjB,SACA,cAAC,GAAD,QAIJ+X,SAASC,eAAe,SAM5Bld,K,mBCtBAmd,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,oBAAoB,cAAgB,6BAA6B,IAAM,mBAAmB,iBAAmB,gCAAgC,UAAY,yBAAyB,aAAe,4BAA4B,cAAgB,6BAA6B,YAAc,6B,mBCAlVD,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,YAAc,6BAA6B,cAAgB,+BAA+B,QAAU,yBAAyB,OAAS,wBAAwB,YAAc,6BAA6B,MAAQ,uBAAuB,eAAiB,gCAAgC,YAAc,6BAA6B,KAAO,wB,mBCA9YD,EAAOC,QAAU,CAAC,YAAc,oCAAoC,MAAQ,8BAA8B,KAAO,6BAA6B,KAAO,+B,mBCArJD,EAAOC,QAAU,CAAC,aAAe,4BAA4B,WAAa,0BAA0B,QAAU,yB,mBCA9GD,EAAOC,QAAU,CAAC,sBAAwB,8CAA8C,YAAc,oCAAoC,IAAM,4BAA4B,OAAS,+BAA+B,aAAe,uC,mBCAnOD,EAAOC,QAAU,CAAC,aAAe,qCAAqC,MAAQ,8BAA8B,cAAgB,sCAAsC,MAAQ,gC,mBCA1KD,EAAOC,QAAU,CAAC,QAAU,4BAA4B,WAAa,iC,mBCArED,EAAOC,QAAU,CAAC,KAAO,6BAA6B,MAAQ,gC,mBCA9DD,EAAOC,QAAU,CAAC,IAAM,yBAAyB,IAAM,2B,mBCAvDD,EAAOC,QAAU,CAAC,SAAW,gCAAgC,cAAgB,qCAAqC,iBAAmB,0C,mBCArID,EAAOC,QAAU,CAAC,MAAQ,8BAA8B,WAAa,mCAAmC,WAAa,mCAAmC,MAAQ,gC,mBCAhKD,EAAOC,QAAU,CAAC,eAAiB,iCAAiC,cAAgB,gCAAgC,KAAO,yB,mBCA3HD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,UAAY,0BAA0B,OAAS,yB,mBCA3GD,EAAOC,QAAU,CAAC,WAAa,wBAAwB,UAAY,uBAAuB,IAAM,mB,mBCAhGD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,IAAM,mBAAmB,OAAS,wB,mBCArFD,EAAOC,QAAU,CAAC,gBAAkB,gCAAgC,OAAS,yB,mBCA7ED,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,OAAS,+B,mBCA/DD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,YAAc,mC,mBCAvED,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,aAAe,oC,mBCApFD,EAAOC,QAAU,CAAC,YAAc,+BAA+B,IAAM,yB,mBCArED,EAAOC,QAAU,CAAC,QAAU,6B,mBCA5BD,EAAOC,QAAU,CAAC,QAAU,yB","file":"static/js/main.b0ce3646.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const STATUS={\r\n    LOADING:'loading',\r\n    IDLE:'idle',\r\n    SUCCEEDED:'succeeded',\r\n    FAILED:'failed',\r\n}","import {Nullable} from \"../../types/Nullable\";\r\nimport {ActionsType} from \"./AC types/types\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\n\r\n\r\nconst initialState = {\r\n    status: STATUS.IDLE,\r\n    isInitialized: false,\r\n    error: null as Nullable<string>,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, ...action.payload}\r\n        case 'APP/INITIALIZE': {\r\n            return {...state, isInitialized: true}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAppStatusAC = (status: string) => ({\r\n    type: 'APP/SET-STATUS',\r\n    payload: {\r\n        status,\r\n    }\r\n} as const)\r\n\r\n\r\nexport const setIsInitializedAC = () => ({\r\n    type: 'APP/INITIALIZE'\r\n} as const)\r\n\r\nexport const setErrorText = (error: Nullable<string>) => ({\r\n    type: 'APP/SET-ERROR',\r\n    payload: {error}\r\n} as const)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {ActionsType} from \"./AC types/types\";\r\n\r\nexport type loginAuthDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nlet initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"LOGIN/TOGGLE-IS-AUTH\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const isAuthToggleAC = (isLoggedIn: boolean) => ({\r\n    type: 'LOGIN/TOGGLE-IS-AUTH',\r\n    payload: {\r\n        isLoggedIn\r\n    }\r\n} as const)\r\n\r\n","import {ActionsType} from \"./AC types/types\";\r\n\r\n\r\nlet initialState = {registerStatus: false}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n\r\n        case \"SET-REGISTER-STATUS\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const registerStatusAC = (registerStatus: boolean) =>\r\n    ({\r\n        type: 'SET-REGISTER-STATUS',\r\n        payload: {registerStatus}\r\n    } as const)\r\n\r\n\r\n","export const pageCountNumber=10\r\nexport const profileInitializeAvatarURL='https://lh3.googleusercontent.com/DQj-gonAVTlhj5W7_DhBVmX-0P42rfvx8TSp1WfQeZ6iFIon6InIS8M4Nbqy7Ql5ahgEXSiRDiWD88v-bcPYIEAg3Q=w640-h400-e365-rj-sc0x00ffffff'\r\nexport const EMPTY_STRING=''","import {ActionsType} from \"./AC types/types\";\r\nimport {ResponseLoginType} from \"../../dal/authorization/types\";\r\nimport {EMPTY_STRING, profileInitializeAvatarURL} from \"../../constants\";\r\n\r\n\r\nconst initialState = {\r\n    avatar:profileInitializeAvatarURL,\r\n    created: EMPTY_STRING,\r\n    email: EMPTY_STRING,\r\n    isAdmin: false,\r\n    name: EMPTY_STRING,\r\n    publicCardPacksCount: 0,\r\n    rememberMe: false,\r\n    token: EMPTY_STRING,\r\n    tokenDeathTime: 0,\r\n    updated: EMPTY_STRING,\r\n    verified: false,\r\n    __v: 0,\r\n    _id: EMPTY_STRING,\r\n}\r\n\r\n\r\n\r\nexport const profileReducer = (state: ResponseLoginType = initialState, action: ActionsType): ResponseLoginType => {\r\n    switch (action.type) {\r\n        case 'SET-PROFILE':\r\n            return {...state, ...action.payload.profile}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setProfileAC = (profile: ResponseLoginType ) => ({\r\n        type: 'SET-PROFILE',\r\n        payload: {\r\n            profile,\r\n        }\r\n    } as const)\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Nullable} from \"../../types/Nullable\";\r\nimport {ActionsType} from \"./AC types/types\";\r\nimport {EMPTY_STRING} from \"../../constants\";\r\n\r\nlet initialState = {\r\n    responseInfoForgotPass: EMPTY_STRING,\r\n    responseInfoNewPass: EMPTY_STRING,\r\n    emailForRecovery: null as Nullable<string>\r\n\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"SET-RESPONSE-INFO-FORGOT-PASS\":\r\n        case \"SET-RESPONSE-INFO-NEW-PASS\":\r\n        case \"ADD-EMAIL\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetResponseInfoForgotPassAC = (responseInfoForgotPass: string) => ({\r\n    type: 'SET-RESPONSE-INFO-FORGOT-PASS',\r\n    payload: {responseInfoForgotPass}\r\n} as const)\r\n\r\nexport const SetResponseInfoNewPassAC = (responseInfoNewPass: string) => ({\r\n    type: 'SET-RESPONSE-INFO-NEW-PASS',\r\n    payload: {responseInfoNewPass}\r\n} as const)\r\n\r\nexport const addEmailAC = (emailForRecovery: string) => ({\r\n    type: 'ADD-EMAIL',\r\n    payload: {emailForRecovery}\r\n} as const)\r\n\r\n","import {ActionsType} from \"./AC types/types\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {getPacksResponseType} from \"../../dal/packs/types\";\r\nimport {EMPTY_STRING} from \"../../constants\";\r\n\r\n\r\ntype initialStateType = getPacksResponseType & {\r\n    min: number\r\n    max: number\r\n    sortPacks: string\r\n    packName: Nullable<string>\r\n    user_id: Nullable<string>\r\n}\r\n\r\n\r\nconst INITIAL_CARDS_MAX_BORDER = 100\r\nlet initialState = {\r\n    page: 1,\r\n    /*   cardPacks: [] as Array<PackType>,*/\r\n    /* cardPacksTotalCount: 0,*/\r\n    maxCardsCount: 0,\r\n    minCardsCount: 0,\r\n    pageCount: 0,\r\n    min: 0,\r\n    max: INITIAL_CARDS_MAX_BORDER,\r\n    sortPacks: '0updated',\r\n    packName: EMPTY_STRING,\r\n    user_id: null,\r\n} as initialStateType\r\n\r\n\r\nexport const packsReducer = (state: initialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"PACKS/CHANGE-SEARCH-PACK-NAME\":\r\n        case \"PACKS/SET-PACKS\":\r\n        case \"PACKS/CHANGE-PAGE\":\r\n        case \"SET-RESPONSE-INFO-NEW-PASS\":\r\n        case \"PACKS/TOGGLE-SHOW-USER-PACKS\":\r\n        case \"PACKS/SET-NEW-MIN-MAX-VALUE\":\r\n        case \"PACKS/SET-SORTING-FILTER\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setPacksAC = (payload: getPacksResponseType) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    payload\r\n} as const)\r\n\r\n\r\nexport const changePageAC = (page: number) => ({\r\n    type: 'PACKS/CHANGE-PAGE',\r\n    payload: {page}\r\n} as const)\r\n\r\nexport const setNewMinMaxValues = (min: number, max: number) => ({\r\n    type: 'PACKS/SET-NEW-MIN-MAX-VALUE',\r\n    payload: {min, max}\r\n} as const)\r\n\r\nexport const setSortingFilter = (sortPacks: string) => ({\r\n\r\n    type: 'PACKS/SET-SORTING-FILTER',\r\n    payload: {sortPacks}\r\n} as const)\r\n\r\nexport const changeSearchPackNameAC = (packName: string) => ({\r\n    type: 'PACKS/CHANGE-SEARCH-PACK-NAME',\r\n    payload: {packName}\r\n} as const)\r\n\r\nexport const toggleShowUserPacksAC = (user_id: string) => ({\r\n    type: 'PACKS/TOGGLE-SHOW-USER-PACKS',\r\n    payload: {user_id}\r\n} as const)\r\n\r\n\r\n","import {ActionsType} from \"./AC types/types\";\r\nimport {getCardsResponseType} from \"../../dal/cards/types\";\r\nimport {EMPTY_STRING} from \"../../constants\";\r\n\r\n\r\n\r\nlet initialState = {\r\n    cards: [\r\n        {\r\n            answer: EMPTY_STRING,\r\n            question: EMPTY_STRING,\r\n            cardsPack_id: EMPTY_STRING,\r\n            grade: 0,\r\n            shots: 0,\r\n            user_id: EMPTY_STRING,\r\n            created: EMPTY_STRING,\r\n            updated: EMPTY_STRING,\r\n            _id: EMPTY_STRING,\r\n        }\r\n    ],\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 1,\r\n    pageCount: 0,\r\n    packUserId: EMPTY_STRING,\r\n    sortCards: '0updated'\r\n} as InitialStateType\r\n\r\ntype InitialStateType = getCardsResponseType & { sortCards: string }\r\n\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"CARDS/SET-CARDS\":\r\n        case 'CARDS/CHANGE-PAGE':\r\n        case 'CARDS/SET-SORTING-FILTER':\r\n            return {...state, ...action.payload}\r\n        case 'CARDS/SET-CARDS-RATING':\r\n\r\n            return {\r\n                ...state,\r\n                cards: [...state.cards.map(card => card._id === action._id ? {...card, ...action.payload} : card)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setCardsAC = (payload: getCardsResponseType) => ({\r\n    type: 'CARDS/SET-CARDS',\r\n    payload\r\n} as const)\r\n\r\nexport const setSortingFilterCards = (sortCards: string) => {\r\n    return {\r\n        type: 'CARDS/SET-SORTING-FILTER',\r\n        payload: {sortCards}\r\n    } as const\r\n}\r\n\r\nexport const changePageCardsAC = (page: number) => {\r\n    return (\r\n        {\r\n            type: 'CARDS/CHANGE-PAGE',\r\n            payload: {page}\r\n        }) as const\r\n}\r\nexport const setCardsRatingAC = (_id: string, grade: number, shots: number) => {\r\n    return ({\r\n        type: 'CARDS/SET-CARDS-RATING',\r\n        _id,\r\n        payload: {grade, shots}\r\n    }) as const\r\n}\r\n\r\n\r\n\r\n","import {ActionsType} from \"./AC types/types\";\r\nimport {modalActionType, modalEntityType} from \"../../common/components/Modal/ModalContainer/ModalContainer\";\r\n\r\n\r\n\r\n/*export type modalTypeT='addCard'|''|'addPack'|'deleteCard'|'deletePack'|'updatePack'|'updateCard'|'learnPack'*/\r\n\r\nlet initialState = {\r\n    modalAction: '' as modalActionType,\r\n    modalEntity: '' as modalEntityType,\r\n    id: ''\r\n}\r\n\r\ntype InitialStateType = {\r\n    modalAction: modalActionType\r\n    modalEntity: modalEntityType\r\n    id:string\r\n}\r\n\r\n\r\nexport const modalReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'MODAL/SET-MODAL-TYPE':\r\n            return {...state, ...action.payload}\r\n        case 'MODAL/SET-MODAL-PROPS':\r\n\r\n            return {...state, ...action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setModalTypeAC = (modalAction: modalActionType, modalEntity: modalEntityType) => ({\r\n    type: 'MODAL/SET-MODAL-TYPE',\r\n    payload: {\r\n        modalAction,\r\n        modalEntity\r\n    }\r\n} as const)\r\n\r\nexport const setModalPropsAC = (id:string) => {\r\n    return{\r\n    type: 'MODAL/SET-MODAL-PROPS',\r\n    payload: {id}\r\n} as const}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\n\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {loginReducer} from \"./reducers/login-reducer\";\r\nimport {registrationReducer} from \"./reducers/registration-reducer\";\r\nimport {profileReducer} from \"./reducers/profile-reducer\";\r\nimport {passwordRecoveryReducer} from \"./reducers/passwordRecovery-reducer\";\r\nimport {packsReducer} from \"./reducers/packs-reducer\";\r\nimport {cardsReducer} from \"./reducers/cards-reducer\";\r\nimport {ActionsType} from \"./reducers/AC types/types\";\r\nimport {modalReducer} from \"./reducers/modal-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    register: registrationReducer,\r\n    profile: profileReducer,\r\n    passRecovery:passwordRecoveryReducer,\r\n    packs:packsReducer,\r\n    cards:cardsReducer,\r\n    modals:modalReducer,\r\n\r\n});\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type RootReducerType = ReturnType<typeof rootReducer>;\r\n/*export type ThunkType<ReturnType = void> = ThunkAction<ReturnType, RootReducerType, unknown, any>*/\r\nexport type ThunkType = ThunkAction<void, RootReducerType, unknown, ActionsType>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n\r\n// @ts-ignore\r\nwindow.store=store","import {ButtonHTMLAttributes, DetailedHTMLProps, FC, memo} from 'react'\r\nimport style from './SuperButton.module.scss'\r\n\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: FC<SuperButtonPropsType> = memo((\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${style.btn} ${red ? style.red : style.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n})\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, memo} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\nimport {EMPTY_STRING} from \"../../../../constants\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: FC<SuperCheckboxPropsType> = memo((\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange&&onChange(e)\r\n        onChangeChecked&&onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : EMPTY_STRING}`\r\n\r\n    return (\r\n        <label className={s.labelForCheckBox}>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n})\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, KeyboardEvent, memo} from 'react'\r\nimport s from './SuperInputText.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setErrorText} from \"../../../../store/reducers/app-reducer\";\r\nimport {Nullable} from \"../../../../types/Nullable\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: Nullable<string>\r\n    spanClassName?: string\r\n\r\n}\r\n\r\nconst SuperInputText: FC<SuperInputTextPropsType> = memo((\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className,\r\n        /*value*/\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const dispatch=useDispatch()\r\n\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className} `\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n        dispatch(setErrorText(null))\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                {...restProps}\r\n            />\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default SuperInputText\r\n","export const INPUT_TYPE:{[key:string]:\"password\" | \"text\"|undefined} = {\r\n    PASSWORD: 'password',\r\n    TEXT: 'text'\r\n}","import styles from \"./UniversalInput.module.scss\"\r\nimport SuperInputText from \"../../../Components/TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport React, {FC, memo, useState} from \"react\";\r\nimport {FieldInputProps} from \"formik\";\r\nimport {INPUT_TYPE} from \"../../../enum/InputType\";\r\n\r\nexport type InputType= 'password'|'text'\r\n\r\n\r\ntype universalInputPropsType = {\r\n    validationErr: string\r\n    formikProps: FieldInputProps<any>\r\n    type?: InputType\r\n    isPassword?: boolean\r\n}\r\n\r\nexport const UniversalInput: FC<universalInputPropsType> = memo(({\r\n                                                                     validationErr, formikProps, type,\r\n                                                                     isPassword\r\n                                                                 }) => {\r\n\r\n    let [passwordShown, setPasswordShown] = useState<boolean>(false);\r\n\r\n    const typeForInput = !passwordShown && type ? INPUT_TYPE.PASSWORD : INPUT_TYPE.TEXT\r\n\r\n    const onSpanToggleShowPasswordClick = () => {\r\n        setPasswordShown(!passwordShown)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.inputWrapper}>\r\n            <SuperInputText className={styles.input}\r\n                            placeholder={formikProps.name}\r\n                            {...formikProps}\r\n                            type={typeForInput}/>\r\n            {isPassword && <span className={styles.togglePassBtn} onClick={onSpanToggleShowPasswordClick}/>}\r\n            <div className={styles.error}>{validationErr}</div>\r\n        </div>\r\n    )\r\n})\r\n","type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n    confirmPassword?: string\r\n}\r\nexport const validates=(values:any)=>{\r\n    const errors: FormikErrorType = {};\r\n    const passwordRegex = /(?=.*[0-9])/\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n    if (!values.password) {\r\n        errors.password = \"Required\";\r\n    } else if (values.password.length < 8) {\r\n        errors.password = \"Password must be 8 characters long.\";\r\n    } else if (!passwordRegex.test(values.password)) {\r\n        errors.password = \"Invalid password. Must contain one number.\";\r\n    }\r\n    if (!values.confirmPassword) {\r\n        errors.confirmPassword = \"Required\";\r\n    }\r\n    if (values.password && values.confirmPassword) {\r\n        if (values.password !== values.confirmPassword) {\r\n            errors.confirmPassword = \"Password not matched\";\r\n        }\r\n    }\r\n    return errors;\r\n}","export const PATH = {\r\n    PROFILE: '/profile',\r\n    REGISTRATION: '/registration',\r\n    NOT_FOUND: '/404',\r\n    FORGOT_PASSWORD: '/forgot-password',\r\n    NEW_PASSWORD: '/new-password',\r\n    CARDS: '/cards',\r\n    PACKS: '/packs',\r\n    LOGIN: '/login',\r\n    START: '/',\r\n}","export const BUTTON_TYPE:{[key:string]:\"button\" | \"submit\" | \"reset\" | undefined}={\r\n    SUBMIT:'submit',\r\n    BUTTON:'button',\r\n}","export const FORMIK_FIELDS_NAME={\r\n    REMEMBER_ME:'rememberMe',\r\n    EMAIL:'email',\r\n    PASSWORD: 'password',\r\n    NAME:'name',\r\n    CONFIRM_PASSWORD:'confirmPassword'\r\n}","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true,\r\n})","import {instance} from \"../apiConfig\";\r\nimport {loginAuthDataType} from \"../../store/reducers/login-reducer\";\r\nimport {LogoutResponse, RegisterErrorResponse, ResponseForgotPasswordType, ResponseLoginType} from \"./types\";\r\nimport {newPassDataType} from \"../packs/types\";\r\n\r\n\r\n\r\nexport const authorizationAPI = {\r\n    registerMe(email: string, password: string) {\r\n        return instance.post<RegisterErrorResponse>(`auth/register`, {email, password})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    loginMe(loginAuthData: loginAuthDataType) {\r\n        return instance.post<ResponseLoginType>(`auth/login`, loginAuthData)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n\r\n    },\r\n    logoutMe() {\r\n        return instance.delete<LogoutResponse>(`auth/me`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    authMe() {\r\n        return instance.post<ResponseLoginType>(`auth/me`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    sendPassword(email: string) {\r\n        const messageDataPassword = {\r\n            email,\r\n            from: 'test-front-admin <ai73a@yandex.by>',\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\npassword recovery link: <a href='https://nastyaz23.github.io/fridayProject/#new-password/$token$'>\r\nlink</a></div>`\r\n        }\r\n        return instance.post<ResponseForgotPasswordType>(`auth/forgot`\r\n            , messageDataPassword,\r\n            {withCredentials: true})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    setNewPassword(newPassData: newPassDataType) {\r\n            return instance.post<LogoutResponse>(`auth/set-new-password`\r\n            , newPassData,\r\n            {withCredentials: true})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    }\r\n}\r\n\r\n/*\r\n<!--https://nastyaZ23.github.io/fridayProject-->*!/*/\r\n","import {setAppStatusAC, setErrorText} from \"../store/reducers/app-reducer\";\r\nimport {AppDispatch} from \"../store/store\";\r\nimport {STATUS} from \"../enum/StatusType\";\r\n\r\n\r\nexport const catchErrorHandler = (dispatch: AppDispatch, err: any) => {\r\n\r\n    dispatch(setErrorText(err.response ? err.response.data.error : err))\r\n    dispatch(setAppStatusAC(STATUS.FAILED))\r\n}","import React from 'react';\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport SuperCheckbox from \"../../TestComponents/components/c3-SuperCheckbox/SuperCheckbox\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport {Navigate, NavLink} from 'react-router-dom';\r\nimport styles from './Login.module.scss'\r\nimport {UniversalInput} from \"../../../common/components/Input/UniversalInput\";\r\nimport {validates} from \"../../../utils/validates\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\nimport {PATH} from \"../../../enum/Path\";\r\nimport {INPUT_TYPE} from \"../../../enum/InputType\";\r\nimport {BUTTON_TYPE} from \"../../../enum/ButtonTyoe\";\r\nimport {FORMIK_FIELDS_NAME} from \"../../../enum/FormikFieldNames\";\r\nimport {loginTC} from \"../../../store/thunks/login\";\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: EMPTY_STRING,\r\n            password: EMPTY_STRING,\r\n            rememberMe: false,\r\n        },\r\n\r\n        validate: (values) => {\r\n            validates(values)\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    let isLoggedIn = useSelector<RootReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={PATH.START}/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <h2>Welcome</h2>\r\n            <form className={styles.form} onSubmit={(e) => {\r\n                formik.handleSubmit(e)\r\n            }}>\r\n                <div className={styles.inputsWrapper}>\r\n                    <UniversalInput validationErr={(formik.touched.email && formik.errors.email) || EMPTY_STRING}\r\n                                    formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.EMAIL)}/>\r\n                    <UniversalInput validationErr={(formik.touched.password && formik.errors.password) || EMPTY_STRING}\r\n                                    formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.PASSWORD)}\r\n                                    type={INPUT_TYPE.PASSWORD}\r\n                                    isPassword={true}/>\r\n                </div>\r\n\r\n                <div className={styles.row}>\r\n                    <SuperCheckbox checked={formik.values.rememberMe}\r\n                                   {...formik.getFieldProps(FORMIK_FIELDS_NAME.REMEMBER_ME)}>\r\n                        Remember Me</SuperCheckbox>\r\n                    <NavLink to={PATH.FORGOT_PASSWORD}>Lost Password?</NavLink>\r\n                </div>\r\n                <SuperButton className={styles.submitBtn} type={BUTTON_TYPE.SUBMIT}>Login</SuperButton>\r\n            </form>\r\n\r\n            <NavLink className={styles.registerLink} to={PATH.REGISTRATION}>Register</NavLink>\r\n        </div>\r\n    )\r\n}","import {AppDispatch} from \"../store\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {authorizationAPI} from \"../../dal/authorization/authorization\";\r\nimport {setProfileAC} from \"../reducers/profile-reducer\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {isAuthToggleAC, loginAuthDataType} from \"../reducers/login-reducer\";\r\n\r\nexport const loginTC = (loginAuthData: loginAuthDataType) =>\r\n    async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            let res = await authorizationAPI.loginMe(loginAuthData)\r\n\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n            dispatch(isAuthToggleAC(true))\r\n            dispatch(setProfileAC(res))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const logoutTC = () =>\r\n    async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await authorizationAPI.logoutMe()\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n            dispatch(isAuthToggleAC(false))\r\n\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }","import React, {useCallback} from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\nimport { registerStatusAC} from \"../../../store/reducers/registration-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport styles from \"../Login/Login.module.scss\";\r\nimport {UniversalInput} from \"../../../common/components/Input/UniversalInput\";\r\nimport {validates} from \"../../../utils/validates\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\nimport {registerMeTC} from \"../../../store/thunks/registration\";\r\nimport {PATH} from \"../../../enum/Path\";\r\nimport {FORMIK_FIELDS_NAME} from \"../../../enum/FormikFieldNames\";\r\nimport {INPUT_TYPE} from \"../../../enum/InputType\";\r\nimport {BUTTON_TYPE} from \"../../../enum/ButtonTyoe\";\r\n\r\n\r\nexport const Registration = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const navigate = useNavigate()\r\n\r\n    let registerStatus = useSelector<RootReducerType, boolean>(state => state.register.registerStatus)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: EMPTY_STRING,\r\n            password: EMPTY_STRING,\r\n            confirmPassword: EMPTY_STRING,\r\n        },\r\n\r\n        validate: (values) => {\r\n            validates(values)\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(registerMeTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    const onCancelButtonClick = useCallback(() => {\r\n        formik.resetForm()\r\n        navigate(PATH.LOGIN)\r\n    },[formik,navigate])\r\n\r\n    if (registerStatus) {\r\n        dispatch(registerStatusAC(false))\r\n        return <Navigate to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <h2>Sign up</h2>\r\n            <form onSubmit={formik.handleSubmit} className={styles.form}>\r\n                <div className={styles.inputsWrapper}>\r\n\r\n                    <UniversalInput validationErr={(formik.touched.email && formik.errors.email) || EMPTY_STRING}\r\n                                    formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.EMAIL)}/>\r\n                    <UniversalInput validationErr={(formik.touched.password && formik.errors.password) || EMPTY_STRING}\r\n                                    formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.PASSWORD)}\r\n                                    type={INPUT_TYPE.PASSWORD}\r\n                                    isPassword={true}/>\r\n                    <UniversalInput\r\n                        validationErr={(formik.touched.confirmPassword && formik.errors.confirmPassword) || EMPTY_STRING}\r\n                        formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.CONFIRM_PASSWORD)} type={INPUT_TYPE.PASSWORD}\r\n                        isPassword={true}/>\r\n                </div>\r\n\r\n                <div className={styles.row}>\r\n                    <div className={styles.registrationBtns}>\r\n                        <SuperButton type={BUTTON_TYPE.BUTTON} onClick={onCancelButtonClick}>Cancel</SuperButton>\r\n                        <SuperButton type={BUTTON_TYPE.SUBMIT}>Register</SuperButton>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {AppDispatch} from \"../store\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {authorizationAPI} from \"../../dal/authorization/authorization\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {registerStatusAC} from \"../reducers/registration-reducer\";\r\n\r\nexport const registerMeTC = (email: string, password: string) =>\r\n    async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await authorizationAPI.registerMe(email, password)\r\n            dispatch(registerStatusAC(true))\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n            dispatch(registerStatusAC(false))\r\n        }\r\n    }","import React from 'react';\r\nimport style from './NotFound.module.scss'\r\nimport SuperButton from \"../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../enum/Path\";\r\n\r\n\r\n\r\nexport const NotFound=()=>{\r\n    return(\r\n        <div className={style.notFoundBackgr}>\r\n            <div className={style.notFoundBlock}>\r\n            <h2 >Not Found &#128532;</h2>\r\n            <SuperButton><NavLink to={PATH.PROFILE} className={style.link}>Go Back</NavLink></SuperButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useCallback} from 'react';\r\nimport styles from \"../Login/Login.module.scss\";\r\nimport {UniversalInput} from \"../../../common/components/Input/UniversalInput\";\r\nimport { NavLink, useNavigate} from \"react-router-dom\";\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {\r\n    addEmailAC,\r\n    SetResponseInfoForgotPassAC\r\n} from \"../../../store/reducers/passwordRecovery-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport {validates} from \"../../../utils/validates\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\nimport {PATH} from \"../../../enum/Path\";\r\nimport {BUTTON_TYPE} from \"../../../enum/ButtonTyoe\";\r\nimport {sendPassword} from \"../../../store/thunks/passwordRecovery\";\r\n\r\n\r\n\r\nexport const ForgotPassword = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const emailForRecovery = useSelector<RootReducerType, null | string>(state => state.passRecovery.emailForRecovery)\r\n    const responseInfoForgotPass = useSelector<RootReducerType, string>(state => state.passRecovery.responseInfoForgotPass)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: EMPTY_STRING,\r\n        },\r\n        validate: (values) => {\r\n         validates(values)\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(sendPassword(values.email))\r\n        },\r\n    })\r\n\r\n    const onButtonTogglePasswordStatusClick = useCallback(() => {\r\n        dispatch(SetResponseInfoForgotPassAC(EMPTY_STRING))\r\n        dispatch(addEmailAC(EMPTY_STRING))\r\n\r\n    },[dispatch])\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n\r\n            {responseInfoForgotPass ?\r\n                <div className={styles.sendMailBlock}>\r\n                    <h2>Check email</h2>\r\n                    <div>We've sent an Email with instructions to {emailForRecovery}</div>\r\n                    <SuperButton className={styles.sendMailBtn} type={BUTTON_TYPE.BUTTON}\r\n                                 onClick={onButtonTogglePasswordStatusClick}>Ok</SuperButton>\r\n                </div>\r\n\r\n                : <>\r\n                    <h2>Forgot your password?</h2>\r\n                    <form className={styles.form} onSubmit={(e) => {\r\n                        formik.handleSubmit(e)\r\n                    }}>\r\n                        <div className={styles.inputsWrapper}>\r\n                            <UniversalInput validationErr={(formik.touched.email && formik.errors.email) || EMPTY_STRING}\r\n                                            formikProps={formik.getFieldProps('email')}/>\r\n                        </div>\r\n\r\n                        <div>\r\n                            Enter your email address and we will send you further instructions\r\n                        </div>\r\n\r\n                        <SuperButton className={styles.submitBtn} type={BUTTON_TYPE.SUBMIT}>Send instructions</SuperButton>\r\n                    </form>\r\n                    <div>Do you remember your password?</div>\r\n                    <NavLink className={styles.registerLink} to={PATH.LOGIN}>Try logging in</NavLink>\r\n                </>}\r\n        </div>\r\n    )\r\n}","import {AppDispatch} from \"../store\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {authorizationAPI} from \"../../dal/authorization/authorization\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {newPassDataType} from \"../../dal/packs/types\";\r\nimport {addEmailAC, SetResponseInfoForgotPassAC, SetResponseInfoNewPassAC} from \"../reducers/passwordRecovery-reducer\";\r\n\r\nexport const sendPassword = (email: string) =>\r\n    async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            let res = await authorizationAPI.sendPassword(email)\r\n            dispatch(addEmailAC(email))\r\n            res.info && dispatch(SetResponseInfoForgotPassAC(res.info))\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\n\r\nexport const setNewPasswordTC = (newPassData: newPassDataType) =>\r\n    async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            let res = await authorizationAPI.setNewPassword(newPassData)\r\n            res.info && dispatch(SetResponseInfoNewPassAC(res.info))\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }","import React from 'react';\r\nimport styles from \"../Login/Login.module.scss\";\r\nimport {UniversalInput} from \"../../../common/components/Input/UniversalInput\";\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport {\r\n    SetResponseInfoNewPassAC\r\n} from \"../../../store/reducers/passwordRecovery-reducer\";\r\nimport {validates} from \"../../../utils/validates\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\nimport {setNewPasswordTC} from \"../../../store/thunks/passwordRecovery\";\r\nimport {PATH} from \"../../../enum/Path\";\r\nimport {FORMIK_FIELDS_NAME} from \"../../../enum/FormikFieldNames\";\r\nimport {INPUT_TYPE} from \"../../../enum/InputType\";\r\nimport {BUTTON_TYPE} from \"../../../enum/ButtonTyoe\";\r\n\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const params = useParams<'*'>()\r\n    const some = params['*']\r\n\r\n    const responseInfoNewPass = useSelector<RootReducerType, string>(state => state.passRecovery.responseInfoNewPass)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: EMPTY_STRING,\r\n        },\r\n\r\n        validate: (values) => {\r\n            validates(values)\r\n        },\r\n\r\n        onSubmit: values => {\r\n            let newPassDataType = {\r\n                password: values.password,\r\n                resetPasswordToken: some || EMPTY_STRING\r\n            }\r\n            dispatch(setNewPasswordTC(newPassDataType))\r\n        },\r\n    })\r\n\r\n    if (responseInfoNewPass) {\r\n        dispatch(SetResponseInfoNewPassAC(''))\r\n        return <Navigate to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <h2>Create new password</h2>\r\n            <form className={styles.form} onSubmit={(e) => {\r\n                formik.handleSubmit(e)\r\n            }}>\r\n\r\n                <div className={styles.inputsWrapper}>\r\n                    <UniversalInput validationErr={(formik.touched.password && formik.errors.password) || EMPTY_STRING}\r\n                                    formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.PASSWORD)}\r\n                                    type={INPUT_TYPE.PASSWORD}\r\n                                    isPassword={true}/>\r\n                </div>\r\n\r\n                <SuperButton className={styles.submitBtn} type={BUTTON_TYPE.SUBMIT}>Create new password</SuperButton>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport styles from './NavBar.module.scss'\r\nimport {EMPTY_STRING} from \"../../constants\";\r\nimport {PATH} from \"../../enum/Path\";\r\n\r\n\r\nexport const NavBar = () => {\r\n\r\n    const classNameForLink = ({isActive}: { isActive: boolean }) => isActive ? `${styles.active}` : EMPTY_STRING\r\n    const NavLinkDataArray = [\r\n        {navlinkPath: PATH.PROFILE, title: 'Profile'},\r\n        {navlinkPath: PATH.PACKS, title: 'Packs List'},\r\n    ]\r\n    return (\r\n        <div className={styles.navBarContainer}>\r\n\r\n            {NavLinkDataArray.map(({navlinkPath, title}) =>\r\n                <NavLink key={title} to={navlinkPath} className={classNameForLink}>{title}</NavLink>)}\r\n\r\n        </div>\r\n    )\r\n}","import React, {memo} from 'react';\r\nimport styles from './Header.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {NavBar} from \"../NavBar/NavBar\";\r\nimport {logoutTC} from \"../../store/thunks/login\";\r\n\r\n\r\nexport const Header = memo(() => {\r\n    const dispatch = useDispatch();\r\n\r\n    let isLoggedIn = useSelector<RootReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={styles.headerBlock}>\r\n            <div className={styles.container}>\r\n                <h2>CardsApp</h2>\r\n\r\n                {isLoggedIn && <><NavBar/>\r\n                    <span className={styles.logout} onClick={logoutHandler}>Logout</span>\r\n                </>}\r\n            </div>\r\n        </div>\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/oval.c2cdedba.svg\";","import preload from './../assets/svg/oval.svg'\r\nimport React from \"react\";\r\nimport s from './Preloader.module.scss'\r\n\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preload} alt='waiting...'  className={s.loading}/>)\r\n}\r\n\r\nexport default Preloader","import React, {FC, memo, useCallback, useState} from \"react\";\r\nimport styles from './Pagination.module.scss'\r\nimport SuperButton from \"../../../Components/TestComponents/components/c2-SuperButton/SuperButton\";\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemCount: number\r\n    pageCount: number\r\n    currentPage: number\r\n    onChangePageClick: (currentPage: number) => void\r\n    portionSize: number\r\n}\r\n\r\nconst START_VALUE_PORTION_NUMBER = 1\r\n\r\nconst Paginator: FC<PaginatorPropsType> = memo(({\r\n                                                    totalItemCount, pageCount, currentPage, onChangePageClick,\r\n                                                    portionSize\r\n                                                }) => {\r\n\r\n    let [portionNumber, setPortionNumber] = useState(START_VALUE_PORTION_NUMBER);\r\n\r\n    let pagesCount = Math.ceil(totalItemCount / pageCount);\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    const styleForBtn = {padding: '5px', margin: '0 5px', fontWeight: 'bold'}\r\n    const conditionForShowButton = portionNumber > START_VALUE_PORTION_NUMBER\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    const onButtonNextPageClick = useCallback(() => {\r\n        setPortionNumber(portionNumber + 1)\r\n    }, [portionNumber])\r\n\r\n    const onButtonPrevPageClick = useCallback(() => {\r\n        setPortionNumber(portionNumber - 1)\r\n    }, [portionNumber])\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n\r\n            {conditionForShowButton &&\r\n            <SuperButton\r\n                style={styleForBtn} onClick={onButtonPrevPageClick}>&#8592;</SuperButton>}\r\n\r\n            {pages\r\n                .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n                .map((page) => {\r\n\r\n                    const classNameForPage = (page === currentPage ? `${styles.pageNum} ${styles.activePage}`\r\n                        : styles.pageNum)\r\n\r\n                    const onSpanClick = () => {\r\n                        onChangePageClick(page)\r\n                    }\r\n\r\n                    return <span key={page}\r\n                                 className={classNameForPage}\r\n                                 onClick={onSpanClick}>{page}</span>\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n            <SuperButton style={styleForBtn}\r\n                         onClick={onButtonNextPageClick}>&#8594;</SuperButton>}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Paginator;","import {CardType} from \"../dal/cards/types\";\r\n\r\n\r\nexport const convertDateFormat = (dateAsString: string) => {\r\n    let date = new Date(dateAsString)\r\n    return `${addZeroToDate(date.getDate())}.${addZeroToDate(date.getMonth() + 1)}.${date.getFullYear()}`\r\n}\r\n\r\nexport const addZeroToDate = (date: number) => {\r\n    if (date.toString().length === 1) {\r\n        return `0${date}`\r\n    }\r\n    return date\r\n}\r\n\r\nexport const getCard = (cards: CardType[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number}, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}","export const COMPONENT_NAME={\r\n    PACKS:'packs',\r\n    CARDS:'cards',\r\n}","import React, {FC, memo, MouseEvent} from \"react\";\r\nimport style from \"../UniversalTable.module.scss\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport SuperButton from \"../../../../Components/TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {RootReducerType} from \"../../../../store/store\";\r\nimport {COMPONENT_NAME} from \"../../../../enum/ComponentName\";\r\n\r\n\r\ntype TableRowT={\r\n    item:{\r\n        name?: string\r\n        cardsCount?: number\r\n        updated: string\r\n        created?: string\r\n        user_id?: string\r\n        _id: string\r\n        question?: string\r\n        answer?: string\r\n        grade?: number\r\n    }\r\n    component: string\r\n    onDeleteButtonClick?: (id: string) => void\r\n    onUpdateButtonClick?: (id: string) => void\r\n    onLearnPackClick?: (packId: string) => void\r\n}\r\nexport const TableRow:FC<TableRowT>=memo(({item,component,onDeleteButtonClick,onUpdateButtonClick,\r\n                                              onLearnPackClick})=>{\r\n\r\n    const navigate = useNavigate()\r\n    const userId = useSelector<RootReducerType, string>(state => state.profile._id)\r\n\r\n    const CONDITION_FOR_DISABLE_BUTTON = item.user_id !== userId\r\n\r\n    const onLearnButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        e.stopPropagation()\r\n        onLearnPackClick!(item._id)\r\n    }\r\n\r\n    const onDeleteModalCallClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        e.stopPropagation()\r\n        onDeleteButtonClick!(item._id)\r\n    }\r\n\r\n    const onOpenCardClick = () => {\r\n        if ((item.cardsCount! > 0) || (item.user_id === userId)) {\r\n            navigate(`/cards/${item._id}`)\r\n        }\r\n    }\r\n\r\n    const onUpdateModalCallClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        e.stopPropagation()\r\n        onUpdateButtonClick!(item._id)\r\n    }\r\n\r\n    return(\r\n        <tr onClick={onOpenCardClick}>\r\n            {Object.entries(item).map(([key, value], i) => {\r\n                const conditionForHidingCell = (key !== \"user_id\") && (key !== \"_id\")\r\n                if (conditionForHidingCell) {\r\n                    return (\r\n                        <td key={i}><div className={style.cell}>{value}</div></td>\r\n                    )\r\n                }\r\n            })}\r\n            <td className={style.btns}>\r\n                <SuperButton disabled={CONDITION_FOR_DISABLE_BUTTON}\r\n                             onClick={onDeleteModalCallClick}>Delete</SuperButton>\r\n                <SuperButton\r\n                    disabled={CONDITION_FOR_DISABLE_BUTTON} onClick={onUpdateModalCallClick}>\r\n                    Edit</SuperButton>\r\n                {component === COMPONENT_NAME.PACKS &&\r\n                <SuperButton onClick={onLearnButtonClick} disabled={item.cardsCount! === 0}>Learn</SuperButton>}</td>\r\n        </tr>\r\n    )\r\n})","import React, {memo} from 'react';\r\nimport style from './UniversalTable.module.scss'\r\nimport {TableRow} from \"./TableRow/TableRow\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\n\r\n\r\ntype TablePropsType = {\r\n    component: string\r\n    rows: Array<{\r\n        name?: string\r\n        cardsCount?: number\r\n        updated: string\r\n        created?: string\r\n        user_id?: string\r\n        _id: string\r\n        question?: string\r\n        answer?: string\r\n        grade?: number\r\n    }>\r\n\r\n    headers: {\r\n        name?: string\r\n        cardsCount?: string\r\n        updated: string\r\n        created?: string\r\n        actions?: string\r\n        question?: string\r\n        answer?: string\r\n        grade?: string\r\n\r\n    }\r\n    onSetSortingClick: (headerName: string) => void\r\n    onDeleteButtonClick?: (id: string) => void\r\n    onUpdateButtonClick?: (id: string) => void\r\n    onLearnPackClick?: (packId: string) => void\r\n}\r\n\r\nexport const UniversalTable = memo(({\r\n                                        rows, headers, onSetSortingClick, component,\r\n                                        onDeleteButtonClick, onUpdateButtonClick, onLearnPackClick\r\n                                    }: TablePropsType) => {\r\n\r\n        const titlesOfHeaders = Object.entries(headers)\r\n\r\n        return (\r\n            <table className={style.table}>\r\n                <thead>\r\n                <tr>\r\n                    {titlesOfHeaders.map(([key, value], i) => {\r\n\r\n                            const classNameForSpanValue = key !== 'actions' ? style.value : EMPTY_STRING\r\n\r\n                            const onTitleClick = () => {\r\n                                onSetSortingClick(key)\r\n                            }\r\n\r\n                            return (\r\n                                <th key={i} onClick={onTitleClick} className={style.tableHeader}>\r\n                                    <span className={classNameForSpanValue}>{value}</span></th>)\r\n                        }\r\n                    )}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                {rows.map((row) => {\r\n                    return <TableRow key={row._id} item={row} component={component}\r\n                                     onDeleteButtonClick={onDeleteButtonClick}\r\n                                     onUpdateButtonClick={onUpdateButtonClick} onLearnPackClick={onLearnPackClick}/>\r\n                })}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n)\r\n\r\n\r\n","import {modalActionType} from \"../common/components/Modal/ModalContainer/ModalContainer\";\r\n\r\nexport const MODAL_ACTION:{[key:string]:modalActionType}={\r\n    LEARN:'learn',\r\n    ADD:'add',\r\n    DELETE:'delete',\r\n    UPDATE:'update',\r\n    EMPTY:'',\r\n}","import {FC, memo, ReactElement} from \"react\";\r\nimport s from './Modal.module.scss'\r\nimport SuperButton from \"../../../Components/TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\nimport {modalActionType} from \"./ModalContainer/ModalContainer\";\r\nimport {MODAL_ACTION} from \"../../../enum/ModalAction\";\r\n\r\n\r\nexport type ModalPropsType = {\r\n    modalBody?: {\r\n        title: string\r\n        btn: {\r\n            title: string\r\n            callback: () => void\r\n        }\r\n    }\r\n    onCloseModalButtonClick: () => void\r\n    isActivePrevBtn: boolean\r\n    modalAction: modalActionType\r\n    onNextCardButtonClick: () => void\r\n}\r\n\r\nexport const Modal: FC<ModalPropsType> = memo((\r\n    {\r\n        children,\r\n        modalBody,\r\n        onCloseModalButtonClick,\r\n        modalAction,\r\n        onNextCardButtonClick,\r\n        isActivePrevBtn\r\n    }\r\n): Nullable<ReactElement> => {\r\n\r\n    const conditionForDisabledPrevBtn = modalAction === MODAL_ACTION.LEARN ? !isActivePrevBtn : false\r\n\r\n    if (modalBody) {\r\n        return (\r\n            <div className={s.modalWrapper}>\r\n                <div className={s.modalBlock}>\r\n                    <h3>\r\n                        {modalBody.title}\r\n                    </h3>\r\n                    {children}\r\n\r\n                    <div className={s.buttons}>\r\n                        <SuperButton onClick={modalBody.btn.callback} className={s.btn}\r\n                                     disabled={conditionForDisabledPrevBtn}>\r\n                            {modalBody.btn.title}</SuperButton>\r\n                        {modalAction === MODAL_ACTION.LEARN &&\r\n                        <SuperButton onClick={onNextCardButtonClick}>\r\n                            Next</SuperButton>}\r\n                        <SuperButton onClick={onCloseModalButtonClick} className={s.btn}>Cancel</SuperButton>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return null\r\n})","import {instance} from \"../apiConfig\";\r\nimport {\r\n    addNewCardPayloadType,\r\n    getCardsQueryParamsType,\r\n    getCardsResponseType,\r\n    updateCardPayloadType,\r\n    updateCardRatingType\r\n} from \"./types\";\r\n\r\nexport const cardsAPI = {\r\n    getCards(getCardsQueryParams: getCardsQueryParamsType) {\r\n        return instance.get<getCardsResponseType>(`cards/card`, {params: getCardsQueryParams})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n\r\n    addCard(card:addNewCardPayloadType){\r\n        return instance.post(`cards/card`, card)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    deleteCard(id:string){\r\n        return instance.delete(`cards/card/?id=${id}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    updateCard(card:updateCardPayloadType){\r\n        return instance.put(`cards/card`,card)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    updateCardGrade(grade: number,card_id: string){\r\n\r\n        return instance.put<updateCardRatingType>(`cards/grade`, {grade,card_id})\r\n            .then(res => {\r\n                return res.data.updatedGrade\r\n            })\r\n    },\r\n}","import {getCardsQueryParamsType, updateCardType} from \"../../dal/cards/types\";\r\nimport {AppDispatch, ThunkType} from \"../store\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {cardsAPI} from \"../../dal/cards/cardsAPI\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {setCardsAC, setCardsRatingAC} from \"../reducers/cards-reducer\";\r\n\r\nexport const getCardsTC = (getCardsQueryParams: getCardsQueryParamsType) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC(STATUS.LOADING))\r\n        const data = await cardsAPI.getCards(getCardsQueryParams)\r\n        dispatch(setCardsAC(data))\r\n        dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n    } catch (err) {\r\n        catchErrorHandler(dispatch, err)\r\n    }\r\n}\r\n\r\nexport const addCardTC = (cardsPack_id: string, question: string, answer: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            const card = {\r\n                cardsPack_id,\r\n                question,\r\n                answer,\r\n            }\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await cardsAPI.addCard({card})\r\n            await dispatch(getCardsTC({cardsPack_id}))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const deleteCardTC = (cardsPack_id: string, id: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await cardsAPI.deleteCard(id)\r\n            await dispatch(getCardsTC({cardsPack_id}))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const updateCardTC = (cardsPack_id: string, {_id, ...rest}: updateCardType): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            const card = {\r\n                _id,\r\n                ...rest\r\n            }\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await cardsAPI.updateCard({card})\r\n            await dispatch(getCardsTC({cardsPack_id}))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const updateCardRatingTC = (newGrade: number, card_id: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            let {_id, grade, shots} = await cardsAPI.updateCardGrade(newGrade, card_id)\r\n            dispatch(setCardsRatingAC(_id, grade, shots))\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }","import {FC, memo, useCallback, useState} from \"react\";\r\nimport s from './LearnPackModal.module.scss'\r\nimport SuperButton from \"../../../../Components/TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateCardRatingTC} from \"../../../../store/thunks/cards\";\r\n\r\ntype LearnPackModalT = {\r\n    answer: string\r\n    activeCardId: string\r\n    onNextCardButtonClick: () => void\r\n}\r\n\r\nexport const LearnPackModal: FC<LearnPackModalT> = memo(({answer, activeCardId, onNextCardButtonClick}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [isAnswerShow, setIsAnswerShow] = useState<boolean>(false)\r\n\r\n    const BtnTitle = {\r\n        Hide: 'Hide',\r\n        Show: 'Show'\r\n    }\r\n    const BtnShowTitle = isAnswerShow ? BtnTitle.Hide : BtnTitle.Show\r\n\r\n    const onToggleShowAnswerClick = useCallback(() => {\r\n        setIsAnswerShow(!isAnswerShow)\r\n    }, [isAnswerShow])\r\n\r\n    const onRateButtonClick = useCallback((grade: number) => {\r\n        dispatch(updateCardRatingTC(grade, activeCardId))\r\n        onNextCardButtonClick()\r\n    }, [dispatch, activeCardId, onNextCardButtonClick])\r\n\r\n    const markButtons = [\r\n        {name: 'I know', callback: () => onRateButtonClick(5),},\r\n        {name: 'I know part of the answer', callback: () => onRateButtonClick(4),},\r\n        {name: `Maybe I know`, callback: () => onRateButtonClick(3),},\r\n        {name: 'I\\'m not sure', callback: () => onRateButtonClick(2),},\r\n        {name: `I don't know`, callback: () => onRateButtonClick(1),},\r\n    ]\r\n\r\n    return (\r\n        <div className={s.learnPackModalWrapper}>\r\n            <div className={s.answerBlock}>\r\n                Answer\r\n                <SuperButton onClick={onToggleShowAnswerClick} className={s.btn}>{BtnShowTitle}</SuperButton>\r\n                {isAnswerShow && <span className={s.answer}>{answer}</span>}\r\n            </div>\r\n\r\n            <div className={s.buttonsBlock}>\r\n                {markButtons.map(({name, callback}, i) => {\r\n                    return <SuperButton key={i} onClick={callback}>{name}</SuperButton>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {modalEntityType} from \"../common/components/Modal/ModalContainer/ModalContainer\";\r\n\r\nexport const MODAL_ENTITY: { [key: string]: modalEntityType } = {\r\n    PACK: 'pack',\r\n    CARD: 'card',\r\n    EMPTY: '',\r\n}","import {instance} from \"../apiConfig\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {addNewPackPayloadType, getPacksQueryParamsType, getPacksResponseType, updatePackPayloadType} from \"./types\";\r\n\r\nexport const packsAPI = {\r\n    getPacks(getPacksQueryParams: Nullable<getPacksQueryParamsType>) {\r\n        return instance.get<getPacksResponseType>(`cards/pack`, {params: getPacksQueryParams})\r\n            .then(res => res.data)\r\n    },\r\n    addPack(cardsPack: addNewPackPayloadType) {\r\n        return instance.post(`cards/pack`, cardsPack)\r\n            .then(res => res.data)\r\n    },\r\n    deletePack(packId: string) {\r\n       return instance.delete(`cards/pack/?id=${packId}`)\r\n            .then(res => res.data)\r\n    },\r\n    updatePack(cardsPack: updatePackPayloadType) {\r\n        return instance.put(`cards/pack`, cardsPack)\r\n            .then(res => res.data)\r\n    },\r\n}","import {AppDispatch, RootReducerType, ThunkType} from \"../store\";\r\nimport {getPacksQueryParamsType} from \"../../dal/packs/types\";\r\nimport {packsAPI} from \"../../dal/packs/packsAPI\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {setPacksAC} from \"../reducers/packs-reducer\";\r\nimport {pageCountNumber} from \"../../constants\";\r\n\r\nexport const getPacksTC = () => async (dispatch: AppDispatch, getState: () => RootReducerType) => {\r\n    const {min, max, page, user_id, sortPacks, packName} = getState().packs\r\n    let paramsForQuery: getPacksQueryParamsType = {\r\n        min,\r\n        max,\r\n        sortPacks,\r\n        page,\r\n        pageCount: pageCountNumber,\r\n        user_id,\r\n        packName\r\n    }\r\n\r\n    try {\r\n        const data = await packsAPI.getPacks(paramsForQuery)\r\n        dispatch(setAppStatusAC(STATUS.LOADING))\r\n        dispatch(setPacksAC(data))\r\n\r\n    } catch (err) {\r\n        catchErrorHandler(dispatch, err)\r\n    } finally {\r\n        dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n    }\r\n}\r\n\r\nexport const addPackTC = (name: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            const cardsPack = {\r\n                name,\r\n            }\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await packsAPI.addPack({cardsPack})\r\n            await dispatch(getPacksTC())\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const deletePackTC = (packId: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await packsAPI.deletePack(packId)\r\n            await dispatch(getPacksTC())\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const updatePackTC = (packId: string, newName: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            const cardsPack = {\r\n                _id: packId,\r\n                name: newName,\r\n            }\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await packsAPI.updatePack({cardsPack})\r\n            await dispatch(getPacksTC())\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }","import {FC, memo, useCallback, useEffect, useState} from \"react\";\r\nimport {Modal} from \"../Modal\";\r\nimport SuperInputText from \"../../../../Components/TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport s from './ModalContainer.module.scss'\r\nimport {setModalTypeAC} from \"../../../../store/reducers/modal-reducer\";\r\nimport {RootReducerType} from \"../../../../store/store\";\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {CardType} from \"../../../../dal/cards/types\";\r\n\r\nimport {PackType} from \"../../../../dal/packs/types\";\r\nimport {LearnPackModal} from \"../LearnPackModal/LearnPackModal\";\r\nimport {getCard} from \"../../../../utils/handles\";\r\nimport {EMPTY_STRING} from \"../../../../constants\";\r\nimport {addCardTC, deleteCardTC, updateCardTC} from \"../../../../store/thunks/cards\";\r\nimport {MODAL_ACTION} from \"../../../../enum/ModalAction\";\r\nimport {MODAL_ENTITY} from \"../../../../enum/ModalEntity\";\r\nimport {addPackTC, deletePackTC, updatePackTC} from \"../../../../store/thunks/packs\";\r\n\r\nexport type modalActionType = 'delete' | 'add' | 'update' | 'learn' | ''\r\nexport type modalEntityType = 'card' | 'pack' | ''\r\ntype ModalContainerPropsType = {\r\n    pack?: PackType\r\n}\r\n\r\nexport const ModalContainer: FC<ModalContainerPropsType> = memo(({pack}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const params = useParams<'id'>()\r\n    const cardsPack_id = params.id\r\n\r\n    const id = useSelector<RootReducerType, string>(state => state.modals.id)\r\n    const cards = useSelector<RootReducerType, Array<CardType>>(state => state.cards.cards)\r\n    const modalAction = useSelector<RootReducerType, modalActionType>(state => state.modals.modalAction)\r\n    const modalEntity = useSelector<RootReducerType, modalEntityType>(state => state.modals.modalEntity)\r\n\r\n    const card = cards.find(card => card._id === id)\r\n\r\n    const questionInitialValue = card ? card.question : EMPTY_STRING\r\n    const answerInitialValue = card ? card.answer : EMPTY_STRING\r\n    const nameInitialValue = pack ? pack.name : EMPTY_STRING\r\n\r\n\r\n    const [name, setName] = useState<string>(nameInitialValue)\r\n    const [question, setQuestion] = useState<string>(questionInitialValue)\r\n    const [answer, setAnswer] = useState<string>(answerInitialValue)\r\n    const [activeCardIndex, setActiveCardIndex] = useState<number>(0)\r\n    const [isActivePrevBtn, setIsActivePrevBtn] = useState<boolean>(true)\r\n    const [prevCards, setIsPrevCards] = useState<CardType[]>([])\r\n    const [activeCard, setActiveCard] = useState(cards[0])\r\n\r\n    let questionForLearn = activeCard ? activeCard.question : EMPTY_STRING\r\n    let answerForLearn = activeCard ? activeCard.answer : EMPTY_STRING\r\n    let activeCardId = activeCard ? activeCard._id : EMPTY_STRING\r\n\r\n    const limitLength = prevCards.length - 1\r\n    const conditionForExecution = (prevCards.length > 0) && (activeCardIndex < limitLength)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (activeCardIndex === 0) {\r\n            setIsActivePrevBtn(false)\r\n        }\r\n    }, [activeCardIndex])\r\n\r\n    const onCloseModalButtonClick = useCallback(() => {\r\n        dispatch(setModalTypeAC(MODAL_ACTION.EMPTY, MODAL_ENTITY.EMPTY))\r\n    }, [dispatch])\r\n\r\n    const onSavePackButtonClick = useCallback(() => {\r\n        dispatch(addPackTC(name))\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, name,onCloseModalButtonClick])\r\n\r\n    const onSaveCardButtonClick = useCallback(() => {\r\n        dispatch(addCardTC(id, question, answer))\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, id, question, answer,onCloseModalButtonClick])\r\n\r\n    const onDeletePackButtonClick = useCallback(() => {\r\n        dispatch(deletePackTC(id))\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, id,onCloseModalButtonClick])\r\n\r\n    const onDeleteCardButtonClick = useCallback(() => {\r\n        if (cardsPack_id) {\r\n            dispatch(deleteCardTC(cardsPack_id, id))\r\n        }\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, cardsPack_id, id,onCloseModalButtonClick])\r\n\r\n    const onUpdatePackClick = useCallback(() => {\r\n        dispatch(updatePackTC(id, name))\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, id, name,onCloseModalButtonClick])\r\n\r\n    const onUpdateCardClick = useCallback(() => {\r\n        if (cardsPack_id) {\r\n            dispatch(updateCardTC(cardsPack_id, {_id: id, question, answer}))\r\n        }\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, cardsPack_id, id, question, answer,onCloseModalButtonClick])\r\n\r\n    const onNextCardButtonClick = useCallback(() => {\r\n        if (!isActivePrevBtn) {\r\n            setIsActivePrevBtn(true)\r\n        }\r\n        let newCard = getCard(cards)\r\n        setActiveCard(newCard)\r\n        setIsPrevCards([newCard, ...prevCards])\r\n    }, [cards, isActivePrevBtn, prevCards])\r\n\r\n    const onPrevCardButtonClick = useCallback(() => {\r\n            if (conditionForExecution) {\r\n                setActiveCard(prevCards[activeCardIndex])\r\n                setActiveCardIndex(activeCardIndex + 1)\r\n                return\r\n            }\r\n            setIsActivePrevBtn(false)\r\n        }\r\n        , [activeCard, activeCardIndex, prevCards, conditionForExecution])\r\n\r\n\r\n\r\n\r\n    const modals = {\r\n        [MODAL_ACTION.ADD]: {\r\n            title: `Add new ${modalEntity}`, btn: {\r\n                title: 'Save', callback:\r\n                    modalEntity === MODAL_ENTITY.CARD ? onSaveCardButtonClick : onSavePackButtonClick\r\n            }\r\n        },\r\n\r\n        [MODAL_ACTION.DELETE]: {\r\n            title: `Delete ${modalEntity}`, btn: {\r\n                title: 'Delete', callback:\r\n                    modalEntity === MODAL_ENTITY.PACK ? onDeletePackButtonClick : onDeleteCardButtonClick\r\n            }\r\n        },\r\n\r\n        [MODAL_ACTION.UPDATE]: {\r\n            title: `Update ${modalEntity}`, btn: {\r\n                title: 'Update', callback:\r\n                    modalEntity === MODAL_ENTITY.PACK ? onUpdatePackClick : onUpdateCardClick\r\n            }\r\n        },\r\n\r\n        [MODAL_ACTION.LEARN]: {\r\n            title: ` ${questionForLearn}`, btn: {\r\n                title: 'Prev', callback: onPrevCardButtonClick\r\n            }\r\n        },\r\n    }\r\n\r\n\r\n    let modalBody;\r\n    if (modalAction === MODAL_ACTION.ADD) {\r\n        modalBody = modals.add\r\n    }\r\n    if (modalAction === MODAL_ACTION.DELETE) {\r\n        modalBody = modals.delete\r\n    }\r\n\r\n    if (modalAction === MODAL_ACTION.UPDATE) {\r\n        modalBody = modals.update\r\n    }\r\n    if (modalAction === MODAL_ACTION.LEARN) {\r\n        modalBody = modals.learn\r\n    }\r\n\r\n    const conditionForUpdateAddCardModal = (modalEntity === MODAL_ENTITY.CARD) && (modalAction !== MODAL_ACTION.DELETE)\r\n    const conditionActivateInputName = (modalEntity === MODAL_ENTITY.PACK && (modalAction === MODAL_ACTION.ADD\r\n        || modalAction === MODAL_ACTION.UPDATE))\r\n\r\n    return (\r\n        <Modal modalBody={modalBody} onCloseModalButtonClick={onCloseModalButtonClick}\r\n               onNextCardButtonClick={onNextCardButtonClick} modalAction={modalAction}\r\n               isActivePrevBtn={isActivePrevBtn}>\r\n\r\n            {modalAction === MODAL_ACTION.DELETE &&\r\n            <span className={s.span}>Do you really want to remove this `&{modalEntity}`?\r\n                <br/>All cards will be excluded from this course</span>}\r\n\r\n            {conditionActivateInputName &&\r\n            <SuperInputText className={s.input} value={name} onChangeText={setName} placeholder={'Title'}/>}\r\n\r\n            {conditionForUpdateAddCardModal &&\r\n            <>\r\n                <SuperInputText className={s.input} value={question} onChangeText={setQuestion}\r\n                                placeholder={'Your question'}/>\r\n                <SuperInputText className={s.input} value={answer} onChangeText={setAnswer}\r\n                                placeholder={'Your answer'}/>\r\n            </>}\r\n            {modalAction === MODAL_ACTION.LEARN && <LearnPackModal answer={answerForLearn} activeCardId={activeCardId}\r\n                                                                   onNextCardButtonClick={onNextCardButtonClick}/>\r\n            }\r\n        </Modal>\r\n    )\r\n})","import {FC, memo, ReactElement} from \"react\";\r\n\r\ntype RatingProps = {\r\n    grade: number\r\n}\r\n\r\n\r\nexport const Rating: FC<RatingProps> = memo(({grade}) => {\r\n    const STAR_COUNT = 5\r\n    let rating: ReactElement[] = []\r\n\r\n    for (let i = 0; i < STAR_COUNT; i++) {\r\n        rating = [...rating, <Star selected={grade > i}/>]\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {rating}\r\n        </div>\r\n    )\r\n})\r\n\r\ntype starPropsType = {\r\n    selected: boolean\r\n}\r\n\r\nexport const Star = memo(({selected}: starPropsType) => {\r\n    return (\r\n        <span>{selected ? <b>Star </b> : \"Star \"}</span>\r\n    )\r\n})","import React, {FC, memo, useCallback, useEffect, useMemo} from 'react';\r\nimport style from './Cards.module.scss'\r\nimport Pagination from \"../../features/cards/pagination/Pagination\";\r\nimport {convertDateFormat} from \"../../utils/handles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {changePageCardsAC, setSortingFilterCards} from \"../../store/reducers/cards-reducer\";\r\nimport {UniversalTable} from \"../../features/cards/table/UniversalTable\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport SuperButton from \"../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {CardType} from \"../../dal/cards/types\";\r\nimport {setAppStatusAC} from \"../../store/reducers/app-reducer\";\r\nimport {\r\n    modalActionType,\r\n    ModalContainer,\r\n    modalEntityType\r\n} from \"../../common/components/Modal/ModalContainer/ModalContainer\";\r\nimport {Rating} from \"./Rating/Rating\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {getCardsTC} from \"../../store/thunks/cards\";\r\nimport {MODAL_ACTION} from \"../../enum/ModalAction\";\r\nimport {COMPONENT_NAME} from \"../../enum/ComponentName\";\r\n\r\n\r\ntype CardsT = {\r\n    setModalData: (modalAction: modalActionType, id: string) => void\r\n}\r\n\r\nexport const Cards: FC<CardsT> = memo(({setModalData}) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const params = useParams<'id'>()\r\n        const cardsPack_id = params.id\r\n\r\n        const navigate = useNavigate()\r\n\r\n        const cards = useSelector<RootReducerType, Array<CardType>>(state => state.cards.cards)\r\n        const sortCards = useSelector<RootReducerType, string>((state) => state.cards.sortCards)\r\n        const totalItemCount = useSelector<RootReducerType, number>((state) => state.cards.cardsTotalCount)\r\n        const pageCount = useSelector<RootReducerType, number>((state) => state.cards.pageCount)\r\n        const currentPage = useSelector<RootReducerType, number>((state) => state.cards.page)\r\n        const modalEntity = useSelector<RootReducerType, modalEntityType>(state => state.modals.modalEntity)\r\n\r\n        const PORTION_SIZE = 10\r\n        const headersForTable = {\r\n            question: 'Question', answer: 'Answer',\r\n            updated: 'Last updated', grade: 'Grade', actions: 'Actions'\r\n        }\r\n        const cardsForTable = useMemo(() => {\r\n                return cards.map(({\r\n                                      question, answer,\r\n                                      updated, grade, _id, user_id\r\n                                  }) => {\r\n                        updated = convertDateFormat(updated)\r\n                        let rating = <Rating grade={grade}/>\r\n                        return {question, answer, updated, rating, _id, user_id}\r\n                    }\r\n                )\r\n            }\r\n            , [cards])\r\n\r\n        useEffect(() => {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n\r\n            let idOfTimeout = setTimeout(() => {\r\n                if (cardsPack_id) {\r\n                    dispatch(getCardsTC({cardsPack_id, page: currentPage, sortCards}))\r\n                }\r\n            }, 1000)\r\n\r\n            return () => {\r\n                clearTimeout(idOfTimeout)\r\n            }\r\n        }, [dispatch, currentPage, sortCards])\r\n\r\n\r\n        const handleSetSortingClick = useCallback((headerName: string) => {\r\n            dispatch(setSortingFilterCards(sortCards[0] === '0' ? `1${headerName}`  : `0${headerName}`))\r\n        }, [dispatch, sortCards])\r\n\r\n        const handleChangePageClick = useCallback((page: number) => {\r\n                dispatch(changePageCardsAC(page))},\r\n            [dispatch])\r\n\r\n        const onTitleGoBackClick = () => {\r\n            navigate(-1)\r\n        }\r\n\r\n        const handleAddCardButtonClick = useCallback(() => {\r\n            if (cardsPack_id) {\r\n                setModalData(MODAL_ACTION.ADD, cardsPack_id)\r\n            }\r\n        }, [setModalData, cardsPack_id])\r\n\r\n\r\n        const handleDeleteButtonClick = useCallback((_id: string) => {\r\n            setModalData(MODAL_ACTION.DELETE, _id)\r\n        }, [setModalData])\r\n\r\n        const handleUpdateCardClick = useCallback((_id: string) => {\r\n            setModalData(MODAL_ACTION.UPDATE, _id)\r\n        }, [setModalData])\r\n\r\n        if (!cards) {\r\n            return <></>\r\n        }\r\n        return (\r\n            <div className={style.wrapper}>\r\n                <h2 onClick={onTitleGoBackClick} className={style.cursor}>&#8592; Pack Name</h2>\r\n                <SuperButton onClick={handleAddCardButtonClick} className={style.btn}>Add new card</SuperButton>\r\n                {modalEntity && <ModalContainer />}\r\n\r\n                <UniversalTable rows={cardsForTable} headers={headersForTable}\r\n                                onSetSortingClick={handleSetSortingClick} component={COMPONENT_NAME.CARDS}\r\n                                onDeleteButtonClick={handleDeleteButtonClick}\r\n                                onUpdateButtonClick={handleUpdateCardClick}/>\r\n                <Pagination totalItemCount={totalItemCount}\r\n                            pageCount={pageCount}\r\n                            currentPage={currentPage}\r\n                            onChangePageClick={handleChangePageClick}\r\n                            portionSize={PORTION_SIZE}/>\r\n            </div>\r\n        )\r\n    }\r\n)","import React, { ComponentType } from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {PATH} from \"../../enum/Path\";\r\n\r\nexport function withRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    let RedirectComponent = (props:T) => {\r\n        let isLoggedIn = useSelector<RootReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n        if (!isLoggedIn) {\r\n            return <Navigate to={PATH.LOGIN}/>\r\n        }\r\n        return <Component {...props}/>\r\n    }\r\n    return RedirectComponent\r\n}","import SuperInputText from \"../../../Components/TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport {ChangeEvent, FC, KeyboardEvent, memo, useState} from \"react\";\r\nimport style from './EditableSpan.module.scss'\r\n\r\ntype editableSpanPropsType = {\r\n    title: string\r\n    updateTitle: (newTitle: string) => void\r\n}\r\nexport const EditableSpan: FC<editableSpanPropsType> = memo(({title, updateTitle}) => {\r\n\r\n    let [isEdit, toggleEdit] = useState(true)\r\n    let [name, setName] = useState(title)\r\n\r\n    const onActivateInputModeDblClick = () => {\r\n        toggleEdit(false)\r\n    }\r\n\r\n    const onInputActivateSpanModeBlur = () => {\r\n        toggleEdit(true)\r\n        updateTitle(name)\r\n    }\r\n\r\n    const onInputActivateModePress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            toggleEdit(true)\r\n            updateTitle(name)\r\n        }\r\n    }\r\n\r\n    const onInputUpdateTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        isEdit ?\r\n            <h2 onDoubleClick={onActivateInputModeDblClick} className={style.cursor}>{name}</h2>\r\n            : <SuperInputText value={name} onBlur={onInputActivateSpanModeBlur} autoFocus\r\n                              onChange={onInputUpdateTitleChange}\r\n                              className={style.input} onKeyPress={onInputActivateModePress}/>\r\n    )\r\n})","import React, {ChangeEvent, useState, KeyboardEvent} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {withRedirect} from \"../../common/hoc/withRedirect\";\r\nimport style from './Profile.module.scss'\r\nimport SuperInputText from \"../TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport {EditableSpan} from \"../../common/components/EditableSpan/EditableSpan\";\r\nimport {updatePackTC} from \"../../store/thunks/packs\";\r\nimport {EMPTY_STRING} from \"../../constants\";\r\n\r\n\r\nconst Profile = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const avatar = useSelector<RootReducerType, string>(state => state.profile.avatar)\r\n    const email = useSelector<RootReducerType, string>(state => state.profile.email)\r\n    const name = useSelector<RootReducerType, string>(state => state.profile.name)\r\n    const publicCardPacksCount = useSelector<RootReducerType, number>(state => state.profile.publicCardPacksCount)\r\n\r\n    const [avatarURL, setAvatarURL] = useState<string>(EMPTY_STRING)\r\n    const [isInputActive, setIsInputActive] = useState<boolean>(false)\r\n\r\n    const onChangePhotoClick = () => {\r\n        setIsInputActive(true)\r\n    }\r\n\r\n    const onInputForURLChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAvatarURL(e.currentTarget.value)\r\n    }\r\n\r\n    const onAddNewPhotoClick = () => {\r\n        dispatch(updatePackTC(name, avatarURL))\r\n        setIsInputActive(false)\r\n        setAvatarURL(EMPTY_STRING)\r\n    }\r\n\r\n    const onInputForURLKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onAddNewPhotoClick()\r\n        }\r\n    }\r\n\r\n    const onUpdateTitle = (newTitle: string) => {\r\n        if (newTitle !== name) {\r\n            dispatch(updatePackTC(newTitle, avatarURL))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={style.profileWrapper}>\r\n            <div className={style.avatarBlock}>\r\n\r\n                <div className={style.avatarWrapper}>\r\n                    <div className={style.tooltip} onClick={onChangePhotoClick}>Change Photo</div>\r\n                    <img alt='avatar' className={style.avatar} src={avatar}/>\r\n                </div>\r\n\r\n                {isInputActive &&\r\n\r\n                <div className={style.inputForURL}><SuperInputText className={style.input} value={avatarURL}\r\n                                                                   onChange={onInputForURLChange}\r\n                                                                   onKeyPress={onInputForURLKeyPress}\r\n                                                                   autoFocus placeholder={'Add URL'}/>\r\n\r\n                    <span className={style.addPhotoURlBtn} onClick={onAddNewPhotoClick}/></div>}\r\n            </div>\r\n\r\n            <div className={style.profileInfo}>\r\n                <EditableSpan title={name} updateTitle={onUpdateTitle}/>\r\n\r\n                <div className={style.info}>\r\n                    <span><b>Email</b>: {email}</span>\r\n                    <span><b>Count of cards</b>: {publicCardPacksCount}</span>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRedirect(Profile)\r\n\r\n\r\n","import { useEffect} from \"react\";\r\n\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nexport const UseSetTimeoutEffect = (callBack: () => void, dependencies:any, ms: number) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        console.log('useeffSet')\r\n        let idOfTimeout = setTimeout(() => {\r\n            callBack()\r\n        }, ms)\r\n        return () => {\r\n\r\n            clearTimeout(idOfTimeout)\r\n        }\r\n    }, [dispatch,dependencies])\r\n}","import Box from '@mui/material/Box';\r\nimport Slider from '@mui/material/Slider';\r\nimport {FC, memo, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport s from './RangeSlider.module.scss'\r\nimport {UseSetTimeoutEffect} from \"../../../common/hooks/customUseEffect\";\r\n\r\ntype SliderPropsType = {\r\n    minValueForRangeSlider: number\r\n    maxValueForRangeSlider: number\r\n    onChangeCardsCountsChange: (minValueForRangeSlider: number, maxValueForRangeSlider: number) => void\r\n}\r\n\r\n\r\nexport const RangeSlider:FC<SliderPropsType> = memo(({minValueForRangeSlider,maxValueForRangeSlider,\r\n                                                         onChangeCardsCountsChange}) => {\r\n\r\n        const maxCardsCount = useSelector<RootReducerType, number>((state) => state.packs.maxCardsCount)\r\n        const minCardsCount = useSelector<RootReducerType, number>((state) => state.packs.minCardsCount)\r\n\r\n        const [value, setValue] = useState<number[]>([minValueForRangeSlider, maxValueForRangeSlider]);\r\n\r\n        const changeCardsCount = () => {\r\n            onChangeCardsCountsChange(value[0], value[1])\r\n        }\r\n\r\n        UseSetTimeoutEffect(changeCardsCount, value, 500)\r\n\r\n        const onSliderChange = (event: Event, newValue: number | number[]) => {\r\n            setValue(newValue as number[]);\r\n        };\r\n\r\n        return (\r\n            <Box sx={{width: '80%'}}>\r\n                <div className={s.sliderWrapper}>\r\n                    <Slider\r\n                        value={value}\r\n                        onChange={onSliderChange}\r\n                        valueLabelDisplay=\"auto\"\r\n                        max={maxCardsCount}\r\n                    />\r\n                    <div className={s.sliderValues}>\r\n                        <span>{minCardsCount}</span>\r\n                        <span>{maxCardsCount}</span>\r\n                    </div>\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n)\r\n","import style from './PacksParams.module.scss'\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setNewMinMaxValues, toggleShowUserPacksAC} from \"../../../store/reducers/packs-reducer\";\r\nimport {FC, memo, useCallback} from \"react\";\r\nimport {RangeSlider} from \"../../../features/cards/rangeSlider/RangeSlider\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\n\r\ntype PacksParamsPropsT = {\r\n    minValueForRangeSlider: number\r\n    maxValueForRangeSlider: number\r\n}\r\n\r\nexport const PacksParams:FC<PacksParamsPropsT> = memo(({minValueForRangeSlider,maxValueForRangeSlider}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const user_id = useSelector<RootReducerType, string>(state => state.profile._id)\r\n\r\n    const onShowMyCardsClick = useCallback(() => {\r\n        dispatch(toggleShowUserPacksAC(user_id))\r\n    }, [dispatch, user_id])\r\n\r\n    const onShowAllCardsClick = useCallback(() => {\r\n        dispatch(toggleShowUserPacksAC(EMPTY_STRING))\r\n    }, [dispatch])\r\n\r\n    const handleChangeCardsCountChange = useCallback((minValue: number, maxValue: number) => {\r\n        dispatch(setNewMinMaxValues(minValue, maxValue))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <h4>Show packs cards</h4>\r\n\r\n            <div className={style.btnsWrapper}>\r\n                <SuperButton onClick={onShowMyCardsClick}>My</SuperButton>\r\n                <SuperButton onClick={onShowAllCardsClick}>All</SuperButton>\r\n            </div>\r\n\r\n            <RangeSlider minValueForRangeSlider={minValueForRangeSlider}\r\n                         maxValueForRangeSlider={maxValueForRangeSlider}\r\n                         onChangeCardsCountsChange={handleChangeCardsCountChange}/>\r\n        </div>\r\n    )\r\n})","import {RootReducerType} from \"../store/store\";\r\nimport {PackType} from \"../dal/packs/types\";\r\n\r\n\r\nexport const getPacks=(state:RootReducerType):PackType[]=>state.packs.cardPacks","import {RootReducerType} from \"../store/store\";\r\n\r\nexport const getCurrentPage=(state:RootReducerType):number=>state.packs.page","import s from './PacksList.module.scss'\r\nimport React, {memo, useCallback, useMemo, useState} from 'react';\r\nimport {UniversalTable} from \"../../../features/cards/table/UniversalTable\";\r\nimport Paginator from \"../../../features/cards/pagination/Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changePageAC, changeSearchPackNameAC, setSortingFilter} from \"../../../store/reducers/packs-reducer\";\r\nimport {convertDateFormat} from \"../../../utils/handles\";\r\nimport SuperInputText from \"../../TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {UseSetTimeoutEffect} from \"../../../common/hooks/customUseEffect\";\r\nimport {PackType} from \"../../../dal/packs/types\";\r\n\r\nimport {\r\n    modalActionType,\r\n    ModalContainer,\r\n    modalEntityType\r\n} from \"../../../common/components/Modal/ModalContainer/ModalContainer\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\nimport {MODAL_ACTION} from \"../../../enum/ModalAction\";\r\nimport {getCardsTC} from \"../../../store/thunks/cards\";\r\nimport {COMPONENT_NAME} from \"../../../enum/ComponentName\";\r\n\r\n\r\ntype PackListPropsType = {\r\n    packs: Array<PackType>\r\n    currentPage: number\r\n    totalItemCount: number\r\n    pageCount: number\r\n    sortPacks: string\r\n    setModalData: (modalAction: modalActionType, id: string) => void\r\n}\r\n\r\n\r\nexport const PacksList = memo(({\r\n                                   packs, currentPage, totalItemCount, pageCount, sortPacks,\r\n                                   setModalData\r\n                               }: PackListPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const modalEntity = useSelector<RootReducerType, modalEntityType>(state => state.modals.modalEntity)\r\n    const id = useSelector<RootReducerType, string>(state => state.modals.id)\r\n\r\n    const [text, setText] = useState<string>(EMPTY_STRING)\r\n\r\n    const portionSize = 10\r\n    const headersForPacks = {\r\n        name: 'Name', cardsCount: 'Cards',\r\n        updated: 'Last updated', user_name: 'Created by', actions: 'Actions'\r\n    }\r\n\r\n    const packsForTable = useMemo(() => {\r\n            return packs.map(({\r\n                                  cardsCount, user_name,\r\n                                  name, updated, user_id, _id\r\n                              }) => {\r\n                    updated = convertDateFormat(updated)\r\n\r\n                    return {name, cardsCount, updated, user_name, user_id, _id}}\r\n            )\r\n        }\r\n        , [packs])\r\n\r\n    const packForModal = packs.find(pack => pack._id === id)\r\n\r\n    const handleSearchPack=useCallback(()=> {\r\n        dispatch(changeSearchPackNameAC(text))\r\n    },[dispatch,text])\r\n\r\n    UseSetTimeoutEffect(handleSearchPack, text, 2000)\r\n\r\n    const handleChangePageClick = useCallback((page: number) => {\r\n            dispatch(changePageAC(page))\r\n        },\r\n        [dispatch])\r\n\r\n    const handleSetSortingClick = useCallback((headerName: string) => {\r\n        dispatch(setSortingFilter(sortPacks[0] === '0' ? `1${headerName}` : `0${headerName}`))\r\n    }, [dispatch, sortPacks])\r\n\r\n    const handleAddPackButtonClick = useCallback(() => {\r\n        setModalData(MODAL_ACTION.ADD, EMPTY_STRING)\r\n    }, [setModalData])\r\n\r\n    const handleDeleteButtonClick = useCallback((packId: string) => {\r\n        setModalData(MODAL_ACTION.DELETE, packId)\r\n    }, [setModalData])\r\n\r\n    const handleUpdatePackClick = useCallback((packId: string) => {\r\n        setModalData(MODAL_ACTION.UPDATE, packId)\r\n    }, [setModalData])\r\n\r\n    async function handleLearnPackClick(packId: string) {\r\n        await dispatch(getCardsTC({cardsPack_id: packId, max: 100, pageCount: 100}))\r\n        setModalData(MODAL_ACTION.LEARN, packId)\r\n    }\r\n\r\n    return (\r\n        <div className={s.listWrapper} aria-disabled={true}>\r\n            <h2>Packs List</h2>\r\n\r\n            <div className={s.row}>\r\n                <SuperInputText style={{width: '60%'}} value={text}\r\n                                onChangeText={setText} onEnter={handleSearchPack}/>\r\n                <SuperButton style={{width: '35%'}} onClick={handleAddPackButtonClick}>Add new pack</SuperButton>\r\n            </div>\r\n\r\n            {modalEntity && <ModalContainer pack={packForModal}/>}\r\n\r\n            <UniversalTable rows={packsForTable} headers={headersForPacks}\r\n                            onSetSortingClick={handleSetSortingClick}\r\n                            component={COMPONENT_NAME.PACKS} onDeleteButtonClick={handleDeleteButtonClick}\r\n                            onUpdateButtonClick={handleUpdatePackClick} onLearnPackClick={handleLearnPackClick}/>\r\n            <Paginator totalItemCount={totalItemCount} pageCount={pageCount} currentPage={currentPage}\r\n                       onChangePageClick={handleChangePageClick} portionSize={portionSize}/>\r\n        </div>\r\n    )\r\n})","import React, {FC, memo, useEffect} from 'react';\r\nimport s from './Packs.module.scss'\r\nimport {PacksParams} from \"./PacksParams/PacksParams\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {getPacks} from \"../../selectors/getPacks\";\r\nimport {getCurrentPage} from \"../../selectors/getCurrentPage\";\r\nimport {setAppStatusAC} from \"../../store/reducers/app-reducer\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {PackType} from \"../../dal/packs/types\";\r\nimport {modalActionType} from \"../../common/components/Modal/ModalContainer/ModalContainer\";\r\nimport {withRedirect} from \"../../common/hoc/withRedirect\";\r\nimport {PacksList} from \"./PacksList\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {getPacksTC} from \"../../store/thunks/packs\";\r\ntype PacksT={\r\n    setModalData:(modalAction:modalActionType,id: string)=>void\r\n}\r\n\r\nconst Packs:FC<PacksT> = memo(({setModalData}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const packs = useSelector<RootReducerType, Array<PackType>>(getPacks)\r\n    const currentPage = useSelector<RootReducerType, number>(getCurrentPage)\r\n    const totalItemCount = useSelector<RootReducerType, number>((state) => state.packs.cardPacksTotalCount)\r\n    const pageCount = useSelector<RootReducerType, number>((state) => state.packs.pageCount)\r\n    const minValueForRangeSlider = useSelector<RootReducerType, number>((state) => state.packs.min)\r\n    const maxValueForRangeSlider = useSelector<RootReducerType, number>((state) => state.packs.max)\r\n    const sortPacks = useSelector<RootReducerType, string>((state) => state.packs.sortPacks)\r\n    const packName = useSelector<RootReducerType, Nullable<string>>((state) => state.packs.packName)\r\n    const user_id = useSelector<RootReducerType, Nullable<string>>((state) => state.packs.user_id)\r\n\r\n    useEffect(() => {\r\n        dispatch(setAppStatusAC(STATUS.LOADING))\r\n        let idOfTimeout = setTimeout(() => {\r\n            dispatch(getPacksTC())\r\n        }, 1000)\r\n\r\n        return () => {\r\n            clearTimeout(idOfTimeout)\r\n        }\r\n    }, [dispatch, currentPage, minValueForRangeSlider, maxValueForRangeSlider, user_id,\r\n        sortPacks,packName])\r\n\r\n    if (!packs) {\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <PacksParams minValueForRangeSlider={minValueForRangeSlider} maxValueForRangeSlider={maxValueForRangeSlider}/>\r\n            <PacksList packs={packs} currentPage={currentPage} totalItemCount={totalItemCount} pageCount={pageCount}\r\n                       sortPacks={sortPacks} setModalData={setModalData}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default withRedirect(Packs)","import React, {useCallback, useEffect} from 'react';\r\nimport {Login} from \"./Components/Authorization/Login/Login\";\r\nimport {Registration} from \"./Components/Authorization/Redistration/Registration\";\r\nimport {NotFound} from \"./Components/NotFound/NotFound\";\r\nimport {ForgotPassword} from \"./Components/Authorization/ForgotPassword/ForgotPassword\";\r\nimport {NewPassword} from \"./Components/Authorization/NewPassword/NewPassword\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Header} from \"./Components/Header/Header\";\r\nimport styles from './App.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./store/store\";\r\nimport Preloader from \"./common/Preloader/Preloader\";\r\nimport {Cards} from \"./Components/Cards/Cards\";\r\nimport {setModalPropsAC, setModalTypeAC} from \"./store/reducers/modal-reducer\";\r\nimport {modalActionType, modalEntityType} from \"./common/components/Modal/ModalContainer/ModalContainer\";\r\nimport Profile from \"./Components/Profile/Profile\";\r\nimport Packs from \"./Components/Packs/Packs\";\r\nimport {initializeAppTC} from \"./store/thunks/app\";\r\nimport {Nullable} from \"./types/Nullable\";\r\nimport {STATUS} from \"./enum/StatusType\";\r\nimport {PATH} from \"./enum/Path\";\r\nimport {MODAL_ENTITY} from \"./enum/ModalEntity\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector<RootReducerType, string>(state => state.app.status)\r\n    const isInitialized = useSelector<RootReducerType, boolean>(state => state.app.isInitialized)\r\n    const error = useSelector<RootReducerType, Nullable<string>>(state => state.app.error)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const setModalData = useCallback((modalAction: modalActionType, modalEntity: modalEntityType, id: string) => {\r\n        dispatch(setModalPropsAC(id))\r\n        dispatch(setModalTypeAC(modalAction, modalEntity))\r\n    }, [dispatch])\r\n\r\n    const setModalDataCards = useCallback((modalAction: modalActionType, id: string) => {\r\n        setModalData(modalAction, MODAL_ENTITY.CARD, id)\r\n    }, [setModalData])\r\n\r\n    const setModalDataPacks = useCallback((modalAction: modalActionType, id: string) => {\r\n        setModalData(modalAction, MODAL_ENTITY.PACK, id)\r\n    }, [setModalData])\r\n\r\n\r\n    return (\r\n\r\n        <div className={styles.appWrapper}>\r\n            <Header/>\r\n\r\n            <div className={styles.mainBlock}>\r\n                {status === STATUS.LOADING && <Preloader/>}\r\n\r\n                {!isInitialized ? <></>\r\n                    :\r\n                    <Routes>\r\n                        <Route path={PATH.START} element={<Navigate to={PATH.PROFILE}/>}/>\r\n                        <Route path={PATH.PROFILE} element={<Profile/>}/>\r\n                        <Route path={PATH.REGISTRATION} element={<Registration/>}/>\r\n                        <Route path={PATH.NOT_FOUND} element={<NotFound/>}/>\r\n                        <Route path={PATH.FORGOT_PASSWORD} element={<ForgotPassword/>}/>\r\n                        <Route path={PATH.NEW_PASSWORD} element={<NewPassword/>}>\r\n                            <Route path=\":token\" element={<NewPassword/>}/>\r\n                        </Route>\r\n                        <Route path={'*'} element={<Navigate to={PATH.NOT_FOUND}/>}/>\r\n                        <Route path={PATH.CARDS} element={<Cards setModalData={setModalDataCards}/>}>\r\n                            <Route path=\":id\" element={<Cards setModalData={setModalDataCards}/>}/>\r\n                        </Route>\r\n                        <Route path={PATH.PACKS} element={<Packs setModalData={setModalDataPacks}/>}/>\r\n                        <Route path={PATH.LOGIN} element={<Login/>}/>\r\n\r\n                    </Routes>\r\n                }\r\n            </div>\r\n            <div className={styles.err}>{error}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n\r\n","import {ThunkType} from \"../store\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {authorizationAPI} from \"../../dal/authorization/authorization\";\r\nimport {isAuthToggleAC} from \"../reducers/login-reducer\";\r\nimport {setProfileAC} from \"../reducers/profile-reducer\";\r\nimport {setAppStatusAC, setIsInitializedAC} from \"../reducers/app-reducer\";\r\n\r\nexport const initializeAppTC = (): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            const res = await authorizationAPI.authMe()\r\n            dispatch(isAuthToggleAC(true))\r\n            dispatch(setProfileAC(res))\r\n        } catch (err) {\r\n            dispatch(isAuthToggleAC(false))\r\n        } finally {\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n            dispatch(setIsInitializedAC())\r\n        }\r\n    }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n        <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__1QeDt\",\"form\":\"Login_form__2Xo5h\",\"inputsWrapper\":\"Login_inputsWrapper__2Vk9k\",\"row\":\"Login_row__2Oh6t\",\"registrationBtns\":\"Login_registrationBtns__1dEYv\",\"submitBtn\":\"Login_submitBtn__2jSaA\",\"registerLink\":\"Login_registerLink__3lZqv\",\"sendMailBlock\":\"Login_sendMailBlock__2O_Nv\",\"sendMailBtn\":\"Login_sendMailBtn__2MyM-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__3r7Cl\",\"avatarBlock\":\"Profile_avatarBlock__3Upag\",\"avatarWrapper\":\"Profile_avatarWrapper__2Zeyo\",\"tooltip\":\"Profile_tooltip__3XPiP\",\"avatar\":\"Profile_avatar__UbSor\",\"inputForURL\":\"Profile_inputForURL__7p2zC\",\"input\":\"Profile_input__Dnkxg\",\"addPhotoURlBtn\":\"Profile_addPhotoURlBtn__3kLPu\",\"profileInfo\":\"Profile_profileInfo__3s99S\",\"info\":\"Profile_info__1ASM6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableHeader\":\"UniversalTable_tableHeader__2z-7K\",\"value\":\"UniversalTable_value__36UJW\",\"cell\":\"UniversalTable_cell__ZYQ_n\",\"btns\":\"UniversalTable_btns__2fhB_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"Modal_modalWrapper__2-u5o\",\"modalBlock\":\"Modal_modalBlock__1Y2Vy\",\"buttons\":\"Modal_buttons__3Yymo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"learnPackModalWrapper\":\"LearnPackModal_learnPackModalWrapper__wYfI1\",\"answerBlock\":\"LearnPackModal_answerBlock__1D2sY\",\"btn\":\"LearnPackModal_btn__2sZSg\",\"answer\":\"LearnPackModal_answer__3wSb2\",\"buttonsBlock\":\"LearnPackModal_buttonsBlock__2a7Or\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"UniversalInput_inputWrapper__1pOz9\",\"input\":\"UniversalInput_input__1Lh8z\",\"togglePassBtn\":\"UniversalInput_togglePassBtn__1McrO\",\"error\":\"UniversalInput_error__32yEU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNum\":\"Pagination_pageNum__1PDjj\",\"activePage\":\"Pagination_activePage__3rx4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"ModalContainer_span__2yunN\",\"input\":\"ModalContainer_input__1W0F1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SuperButton_btn__1J1we\",\"red\":\"SuperButton_red__3tJ4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__2cpqV\",\"spanClassName\":\"SuperCheckbox_spanClassName__23i5x\",\"labelForCheckBox\":\"SuperCheckbox_labelForCheckBox__3gJhp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__3wnaw\",\"superInput\":\"SuperInputText_superInput__36AEF\",\"errorInput\":\"SuperInputText_errorInput__26Z7d\",\"error\":\"SuperInputText_error__32TC9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notFoundBackgr\":\"NotFound_notFoundBackgr__1CIhc\",\"notFoundBlock\":\"NotFound_notFoundBlock__2FTvu\",\"link\":\"NotFound_link__2yzft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBlock\":\"Header_headerBlock__2aNET\",\"container\":\"Header_container__3IPHz\",\"logout\":\"Header_logout__3U8OT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__rjX5L\",\"mainBlock\":\"App_mainBlock__3yE-n\",\"err\":\"App_err__2QqvI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Cards_wrapper__2Dyeu\",\"btn\":\"Cards_btn__xx2rm\",\"cursor\":\"Cards_cursor__2Ip2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBarContainer\":\"NavBar_navBarContainer__3_-qn\",\"active\":\"NavBar_active__PIP3M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__Mymnz\",\"cursor\":\"EditableSpan_cursor__3qwvA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PacksParams_wrapper__1Q4h2\",\"btnsWrapper\":\"PacksParams_btnsWrapper__2Whek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sliderWrapper\":\"RangeSlider_sliderWrapper__1bUM7\",\"sliderValues\":\"RangeSlider_sliderValues__2yCF_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrapper\":\"PacksList_listWrapper__22qI3\",\"row\":\"PacksList_row__ZTozg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Preloader_loading__1UQ_o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Packs_wrapper__3pTOf\"};"],"sourceRoot":""}