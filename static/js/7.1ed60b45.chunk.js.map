{"version":3,"sources":["common/hooks/useResponseHandler.tsx","pages/Cards/Cards.module.scss","pages/Cards/index.tsx"],"names":["useResponseHandler","isLoading","isSuccess","isError","dispatch","useAppDispatch","useEffect","setAppStatus","status","STATUS","LOADING","SUCCEEDED","FAILED","setErrorText","errorText","module","exports","Cards","memo","params","useParams","useSearchParams","searchParams","navigate","useNavigate","location","useLocation","cardsPack_id","id","sortCards","get","currentPage","Number","uriParams","state","packs","useState","cards","setcards","useGetCardsQuery","page","pageCount","PAGE_COUNT","skip","cardsData","data","formattedCardsForTable","map","question","answer","updated","grade","_id","userId","user_id","cardsPackId","tableValues","convertDateFormat","rating","className","style","wrapper","onClick","pathname","search","createSearchParams","cursor","title","itemName","addButton","tableTitles","CARD_TABLE_FIELDS","tableItems","totalItemCount","cardsTotalCount"],"mappings":"wGAAA,sEAYaA,EAAqB,SAAH,GAII,IAHjCC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAO,EAAPA,QAEMC,EAAWC,cAEjBC,qBAAU,WACJL,GACFG,EAASG,YAAa,CAAEC,OAAQC,IAAOC,WAErCR,GACFE,EAASG,YAAa,CAAEC,OAAQC,IAAOE,aAErCR,IACFC,EAASG,YAAa,CAAEC,OAAQC,IAAOG,UACvCR,EAASS,YAAa,CAAEC,UAAW,0BAEvC,GAAG,CAACV,EAAUH,EAAWC,EAAWC,GACtC,C,sBC9BAY,EAAOC,QAAU,CAAC,QAAU,uBAAuB,IAAM,mBAAmB,OAAS,sBAAsB,UAAY,yBAAyB,MAAQ,qB,uJC2BlJC,EAAQC,gBAAK,WAA4B,IAAD,EACtCC,EAASC,cAEf,EAAuBC,cAAhBC,EAAiC,iBAArB,GACbC,EAAWC,cACXC,EAAWC,cAEXC,EAAeR,EAAOS,GAEtBC,EAAYP,EAAaQ,IAAI,SAAW,WACxCC,EAAcC,OAAOV,EAAaQ,IAAI,UAAY,EAElDG,EAAoB,OAARR,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUS,aAAK,WAAP,EAAR,EAAiBC,MAEnC,EAA0BC,qBAA6B,mBAAhDC,EAAK,KAAEC,EAAQ,KAEtB,EAKIC,YACF,CAAEZ,eAAca,KAAMT,EAAaF,YAAWY,UAAWC,KACzD,CAAEC,MAAOhB,IANHiB,EAAS,EAAfC,KACA3C,EAAS,EAATA,UACAD,EAAS,EAATA,UACAE,EAAO,EAAPA,QAwCF,OA3BAH,YAAmB,CACjBC,YACAC,YACAC,YAGFG,qBAAU,WACR,GAAIJ,GAAsB,OAAT0C,QAAS,IAATA,KAAWP,MAAO,CACjC,IAAMS,EAAyBF,EAAUP,MAAMU,KAC7C,YAAiF,IAA9EC,EAAQ,EAARA,SAAUC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAK5B,MAAO,CACLvB,GANoC,EAAHwB,IAOjCC,OAP6C,EAAPC,QAQtCC,YAR2D,EAAZ5B,aAS/C6B,YAAa,CAAER,WAAUC,SAAQC,QARJO,YAAkBP,GAQmBQ,OANrD,cAAC,IAAM,CAACP,MAAOA,KAQhC,IAGFb,EAASQ,EACX,CACF,GAAG,CAAC5C,EAAW0C,IAEX1C,GAAamC,EAEb,sBAAKsB,UAAWC,IAAMC,QAAQ,UAC5B,oBAAIC,QArCiB,WACzBvC,EAAS,CACPwC,SAAU,SACVC,OAAO,IAAD,OAAMC,YAAmBhC,KAEnC,EAgCuC0B,UAAS,UAAKC,IAAMM,OAAM,YAAIN,IAAMO,OAAQ,8BAG7E,eAAC,IAAQ,CAACC,SAAS,QAAQb,YAAa5B,EAAa,UAClD,IACD,cAAC,IAAW,CAACgC,UAAWC,IAAMS,UAAU,yBAG1C,cAAC,IAAK,CAACC,YAAaC,IAAmBC,WAAYnC,EAAO+B,SAAS,UACnE,cAAC,IAAU,CACTK,eAAgB7B,EAAU8B,gBAC1B3C,YAAaA,OAMd,IACT,IAEed,W","file":"static/js/7.1ed60b45.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\n\r\nimport { STATUS } from 'constants/app';\r\nimport { useAppDispatch } from 'store';\r\nimport { setAppStatus, setErrorText } from 'store/reducers';\r\n\r\ntype UseResponsePropsType = {\r\n  isLoading: boolean;\r\n  isSuccess: boolean;\r\n  isError: boolean;\r\n};\r\n\r\nexport const useResponseHandler = ({\r\n  isLoading,\r\n  isSuccess,\r\n  isError,\r\n}: UseResponsePropsType): void => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      dispatch(setAppStatus({ status: STATUS.LOADING }));\r\n    }\r\n    if (isSuccess) {\r\n      dispatch(setAppStatus({ status: STATUS.SUCCEEDED }));\r\n    }\r\n    if (isError) {\r\n      dispatch(setAppStatus({ status: STATUS.FAILED }));\r\n      dispatch(setErrorText({ errorText: 'Something went wrong' }));\r\n    }\r\n  }, [dispatch, isLoading, isSuccess, isError]);\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Cards_wrapper__1uBgm\",\"btn\":\"Cards_btn__1JwZG\",\"cursor\":\"Cards_cursor__h5j34\",\"addButton\":\"Cards_addButton__1VzKM\",\"title\":\"Cards_title__1Wh2f\"};","import { memo, useState, useEffect } from 'react';\r\n\r\nimport {\r\n  useNavigate,\r\n  useParams,\r\n  useSearchParams,\r\n  createSearchParams,\r\n  useLocation,\r\n} from 'react-router-dom';\r\n\r\nimport style from './Cards.module.scss';\r\n\r\nimport { useResponseHandler } from 'common/hooks/useResponseHandler';\r\nimport { ReturnComponentType } from 'common/types';\r\nimport { Rating, SuperButton, Table, Pagination } from 'components';\r\nimport { AddModal } from 'components/Modal';\r\nimport { CARD_TABLE_FIELDS, PAGE_COUNT } from 'constants/table';\r\nimport { useGetCardsQuery } from 'dal/cards';\r\nimport { CardType } from 'dal/cards/types';\r\nimport { convertDateFormat } from 'utils';\r\n\r\ntype CardsForTableType = {\r\n  id: string;\r\n  userId: string;\r\n  cardsPackId: string;\r\n  tableValues: { question: string; answer: string; updated: string; rating: JSX.Element };\r\n}[];\r\n\r\nconst Cards = memo((): ReturnComponentType => {\r\n  const params = useParams<'id'>();\r\n\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const cardsPack_id = params.id;\r\n\r\n  const sortCards = searchParams.get('sort') || '0updated';\r\n  const currentPage = Number(searchParams.get('page')) || 1;\r\n\r\n  const uriParams = location?.state?.packs;\r\n\r\n  const [cards, setcards] = useState<CardsForTableType>();\r\n\r\n  const {\r\n    data: cardsData,\r\n    isSuccess,\r\n    isLoading,\r\n    isError,\r\n  } = useGetCardsQuery(\r\n    { cardsPack_id, page: currentPage, sortCards, pageCount: PAGE_COUNT },\r\n    { skip: !cardsPack_id },\r\n  );\r\n\r\n  const onTitleGoBackClick = (): void => {\r\n    navigate({\r\n      pathname: '/packs',\r\n      search: `?${createSearchParams(uriParams)}`,\r\n    });\r\n  };\r\n\r\n  useResponseHandler({\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isSuccess && cardsData?.cards) {\r\n      const formattedCardsForTable = cardsData.cards.map(\r\n        ({ question, answer, updated, grade, _id, user_id, cardsPack_id }: CardType) => {\r\n          const convertedToDateUpdated = convertDateFormat(updated);\r\n\r\n          const rating = <Rating grade={grade} />;\r\n\r\n          return {\r\n            id: _id,\r\n            userId: user_id,\r\n            cardsPackId: cardsPack_id,\r\n            tableValues: { question, answer, updated: convertedToDateUpdated, rating },\r\n          };\r\n        },\r\n      );\r\n\r\n      setcards(formattedCardsForTable);\r\n    }\r\n  }, [isSuccess, cardsData]);\r\n\r\n  if (isSuccess && cards) {\r\n    return (\r\n      <div className={style.wrapper}>\r\n        <h2 onClick={onTitleGoBackClick} className={`${style.cursor} ${style.title}`}>\r\n          &#8592; Pack Name\r\n        </h2>\r\n        <AddModal itemName=\"cards\" cardsPackId={cardsPack_id}>\r\n          {' '}\r\n          <SuperButton className={style.addButton}>Add card</SuperButton>\r\n        </AddModal>\r\n\r\n        <Table tableTitles={CARD_TABLE_FIELDS} tableItems={cards} itemName=\"cards\" />\r\n        <Pagination\r\n          totalItemCount={cardsData.cardsTotalCount}\r\n          currentPage={currentPage}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n});\r\n\r\nexport default Cards;\r\n"],"sourceRoot":""}