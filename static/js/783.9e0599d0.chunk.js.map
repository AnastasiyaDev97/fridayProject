{"version":3,"file":"static/js/783.9e0599d0.chunk.js","mappings":"6JAAO,IAAMA,EACD,WAKCC,EAA2B,CACtC,CACEC,SAAU,QACVC,YAAa,mBACbC,KAPK,SASP,CACEF,SAAU,WACVC,YAAa,uBACbC,KAAMJ,GAER,CACEE,SAAU,kBACVC,YAAa,wBACbC,KAAMJ,IAIGK,EAAmB,CAC9BC,YAAa,aACbC,MAAO,QACPC,SAAU,WACVC,KAAM,OACNC,iBAAkB,kB,mGCjBPC,EAAqB,SAAHC,GAII,IAHjCC,EAASD,EAATC,UACAC,EAASF,EAATE,UACAC,EAAOH,EAAPG,QAEMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACJL,GACFG,GAASG,EAAAA,EAAAA,IAAa,CAAEC,OAAQC,EAAAA,EAAAA,WAE9BP,GACFE,GAASG,EAAAA,EAAAA,IAAa,CAAEC,OAAQC,EAAAA,EAAAA,aAE9BN,IACFC,GAASG,EAAAA,EAAAA,IAAa,CAAEC,OAAQC,EAAAA,EAAAA,UAChCL,GAASM,EAAAA,EAAAA,IAAa,CAAEC,UAAW,0BAEvC,GAAG,CAACP,EAAUH,EAAWC,EAAWC,GACtC,C,uJCiDA,UAlEoB,WAClB,IAAAS,GACEC,EAAAA,EAAAA,MAA2BC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GADtBI,EAAcF,EAAA,GAAAG,EAAAH,EAAA,GAAUI,EAAeD,EAArBE,KAAuBhB,EAAOc,EAAPd,QAASF,EAASgB,EAAThB,UAAWC,EAASe,EAATf,UAG5DkB,GAAUC,EAAAA,EAAAA,MAAVD,MAEFE,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,SAAUC,EAAAA,IAGZC,SAAU,SAAAC,GACR,IAAMC,EAAmB,CAAC,EAI1B,OAFAC,EAAAA,EAAAA,IAAwBF,EAAQC,GAEzBA,CACT,EAEAE,SAAU,SAAAH,GACR,IAAMI,EAAkB,CACtBP,SAAUG,EAAOH,SACjBQ,mBAAoBb,GAASM,EAAAA,IAG/BV,EAAegB,EACjB,IASF,OANAjC,EAAAA,EAAAA,GAAmB,CACjBE,UAAAA,EACAC,UAAAA,EACAC,QAAAA,IAGEe,GACKgB,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAIC,EAAAA,EAAAA,SAIrBC,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,QAAeC,SAAA,EAC7BP,EAAAA,EAAAA,KAAA,MAAIK,UAAWC,EAAAA,EAAAA,MAAaC,SAAC,yBAC7BH,EAAAA,EAAAA,MAAA,QACEC,UAAWC,EAAAA,EAAAA,KACXT,SAAU,SAAAW,GACRpB,EAAOqB,aAAaD,EACtB,EAAED,SAAA,EAEFP,EAAAA,EAAAA,KAAA,OAAKK,UAAWC,EAAAA,EAAAA,cAAqBC,UACnCP,EAAAA,EAAAA,KAACU,EAAAA,GAAc,CACbC,cACGvB,EAAOwB,QAAQrB,UAAYH,EAAOO,OAAOJ,UAAaC,EAAAA,GAEzDqB,YAAazB,EAAO0B,cAAcvD,EAAAA,GAAAA,UAClCD,KAAK,gBAIT0C,EAAAA,EAAAA,KAACe,EAAAA,GAAW,CAACV,UAAWC,EAAAA,EAAAA,UAAkBhD,KAAK,SAAQiD,SAAC,6BAMhE,C,qBC7EA,KAAgB,QAAU,uBAAuB,KAAO,oBAAoB,cAAgB,6BAA6B,iBAAmB,gCAAgC,UAAY,yBAAyB,aAAe,4BAA4B,IAAM,mBAAmB,MAAQ,qBAAqB,cAAgB,6BAA6B,YAAc,2BAA2B,gBAAkB,+BAA+B,YAAc,2B","sources":["constants/form/index.ts","hooks/useResponseHandler.tsx","pages/NewPassword/index.tsx","webpack://my-app/./src/pages/Login/Login.module.scss?62e7"],"sourcesContent":["export const INPUT_TYPE = {\r\n  PASSWORD: 'password',\r\n  TEXT: 'text',\r\n  EMAIL: 'email',\r\n} as const;\r\n\r\nexport const REGISTRATION_FORM_FIELDS = [\r\n  {\r\n    register: 'email',\r\n    placeholder: 'Enter your email',\r\n    type: INPUT_TYPE.EMAIL,\r\n  },\r\n  {\r\n    register: 'password',\r\n    placeholder: 'Enter a new password',\r\n    type: INPUT_TYPE.PASSWORD,\r\n  },\r\n  {\r\n    register: 'confirmPassword',\r\n    placeholder: 'Confirm your password',\r\n    type: INPUT_TYPE.PASSWORD,\r\n  },\r\n];\r\n\r\nexport const FORM_FIELDS_NAME = {\r\n  REMEMBER_ME: 'rememberMe',\r\n  EMAIL: 'email',\r\n  PASSWORD: 'password',\r\n  NAME: 'name',\r\n  CONFIRM_PASSWORD: 'confirmPassword',\r\n} as const;\r\n","import { useEffect } from 'react';\r\n\r\nimport { STATUS } from 'constants/app';\r\nimport { useAppDispatch } from 'store';\r\nimport { setAppStatus, setErrorText } from 'store/reducers';\r\n\r\ntype UseResponsePropsType = {\r\n  isLoading: boolean;\r\n  isSuccess: boolean;\r\n  isError: boolean;\r\n};\r\n\r\nexport const useResponseHandler = ({\r\n  isLoading,\r\n  isSuccess,\r\n  isError,\r\n}: UseResponsePropsType): void => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      dispatch(setAppStatus({ status: STATUS.LOADING }));\r\n    }\r\n    if (isSuccess) {\r\n      dispatch(setAppStatus({ status: STATUS.SUCCEEDED }));\r\n    }\r\n    if (isError) {\r\n      dispatch(setAppStatus({ status: STATUS.FAILED }));\r\n      dispatch(setErrorText({ errorText: 'Something went wrong' }));\r\n    }\r\n  }, [dispatch, isLoading, isSuccess, isError]);\r\n};\r\n","import { useFormik } from 'formik';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nimport styles from '../Login/Login.module.scss';\r\n\r\nimport { ReturnComponentType } from 'common/types/ReturnComponentType';\r\nimport { SuperButton, UniversalInput } from 'components';\r\nimport { FORM_FIELDS_NAME } from 'constants/form';\r\nimport { EMPTY_STRING } from 'constants/index';\r\nimport { ROUTES } from 'constants/routes';\r\nimport { useSetNewPasswordMutation } from 'dal/authorization';\r\nimport { useResponseHandler } from 'hooks/useResponseHandler';\r\nimport { AuthData, validateNewPasswordForm } from 'utils';\r\n\r\nconst NewPassword = (): ReturnComponentType => {\r\n  const [setNewPassword, { data: newPasswordData, isError, isLoading, isSuccess }] =\r\n    useSetNewPasswordMutation();\r\n\r\n  const { token } = useParams<string>();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password: EMPTY_STRING,\r\n    },\r\n\r\n    validate: values => {\r\n      const errors: AuthData = {};\r\n\r\n      validateNewPasswordForm(values, errors);\r\n\r\n      return errors;\r\n    },\r\n\r\n    onSubmit: values => {\r\n      const newPassDataType = {\r\n        password: values.password,\r\n        resetPasswordToken: token || EMPTY_STRING,\r\n      };\r\n\r\n      setNewPassword(newPassDataType);\r\n    },\r\n  });\r\n\r\n  useResponseHandler({\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n  });\r\n\r\n  if (newPasswordData) {\r\n    return <Navigate to={ROUTES.LOGIN} />;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <h2 className={styles.title}>Create new password</h2>\r\n      <form\r\n        className={styles.form}\r\n        onSubmit={e => {\r\n          formik.handleSubmit(e);\r\n        }}\r\n      >\r\n        <div className={styles.inputsWrapper}>\r\n          <UniversalInput\r\n            validationErr={\r\n              (formik.touched.password && formik.errors.password) || EMPTY_STRING\r\n            }\r\n            formikProps={formik.getFieldProps(FORM_FIELDS_NAME.PASSWORD)}\r\n            type=\"password\"\r\n          />\r\n        </div>\r\n\r\n        <SuperButton className={styles.submitBtn} type=\"submit\">\r\n          Create new password\r\n        </SuperButton>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPassword;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Login_wrapper__1rI2S\",\"form\":\"Login_form__LxTDf\",\"inputsWrapper\":\"Login_inputsWrapper__FcfGc\",\"registrationBtns\":\"Login_registrationBtns__4bEon\",\"submitBtn\":\"Login_submitBtn__oXced\",\"registerLink\":\"Login_registerLink__D-fug\",\"row\":\"Login_row__bysr9\",\"title\":\"Login_title__-Qf3T\",\"sendMailBlock\":\"Login_sendMailBlock__0MDly\",\"sendMailBtn\":\"Login_sendMailBtn__DEA8C\",\"sendMailMessage\":\"Login_sendMailMessage__VIUxh\",\"registerBtn\":\"Login_registerBtn__OeUh8\"};"],"names":["INPUT_TYPE","REGISTRATION_FORM_FIELDS","register","placeholder","type","FORM_FIELDS_NAME","REMEMBER_ME","EMAIL","PASSWORD","NAME","CONFIRM_PASSWORD","useResponseHandler","_ref","isLoading","isSuccess","isError","dispatch","useAppDispatch","useEffect","setAppStatus","status","STATUS","setErrorText","errorText","_useSetNewPasswordMut","useSetNewPasswordMutation","_useSetNewPasswordMut2","_slicedToArray","setNewPassword","_useSetNewPasswordMut3","newPasswordData","data","token","useParams","formik","useFormik","initialValues","password","EMPTY_STRING","validate","values","errors","validateNewPasswordForm","onSubmit","newPassDataType","resetPasswordToken","_jsx","Navigate","to","ROUTES","_jsxs","className","styles","children","e","handleSubmit","UniversalInput","validationErr","touched","formikProps","getFieldProps","SuperButton"],"sourceRoot":""}