{"version":3,"file":"static/js/321.87553ec3.chunk.js","mappings":"iLAYaA,EAAqB,SAAHC,GAII,IAHjCC,EAASD,EAATC,UACAC,EAASF,EAATE,UACAC,EAAOH,EAAPG,QAEMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACJL,GACFG,GAASG,EAAAA,EAAAA,IAAa,CAAEC,OAAQC,EAAAA,EAAAA,WAE9BP,GACFE,GAASG,EAAAA,EAAAA,IAAa,CAAEC,OAAQC,EAAAA,EAAAA,aAE9BN,IACFC,GAASG,EAAAA,EAAAA,IAAa,CAAEC,OAAQC,EAAAA,EAAAA,UAChCL,GAASM,EAAAA,EAAAA,IAAa,CAAEC,UAAW,0BAEvC,GAAG,CAACP,EAAUH,EAAWC,EAAWC,GACtC,C,2FC9BA,EAAwB,uBAAxB,EAAyD,yB,uCCuB1CS,E,QAjBIC,EAAAA,gBAA0B,CAC3CC,UAAW,SAACC,GAAkB,MAAM,CAClCC,cAAeD,EAAME,SAA8D,CACjFC,MAAK,SAACC,GAGJ,MAAO,CACLC,IAHU,IAAIC,IAAJ,CAAQ,WAGTC,WACTC,OAAQ,MACRC,KAAML,EAEV,IAEH,EACDM,kBAAkB,IAGLb,yB,uCCsDf,EAlEgB,WACd,IAAMR,GAAWC,EAAAA,EAAAA,MAEjBqB,EACEd,IAA0Be,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GADrBV,EAAaW,EAAA,GAAAE,EAAAF,EAAA,GAAUG,EAAkBD,EAAxBV,KAA0BhB,EAAO0B,EAAP1B,QAASF,EAAS4B,EAAT5B,UAAWC,EAAS2B,EAAT3B,UAGhE6B,GAAQC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQH,KAAK,IACnDI,GAASH,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQC,MAAM,IACrDC,GAAOJ,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQE,IAAI,IACjDC,GAAuBL,EAAAA,EAAAA,KAC3B,SAAAC,GAAK,OAAIA,EAAMC,QAAQG,oBAAoB,IAGvCC,GAAcC,EAAAA,EAAAA,UAClB,iBAAO,CAAER,MAAAA,EAAOI,OAAAA,EAAQC,KAAAA,EAAMC,qBAAAA,EAAsB,GACpD,CAACN,EAAOI,EAAQC,EAAMC,IAGlBG,GAAiBC,EAAAA,EAAAA,cACrB,SAACC,GACKA,IAAcP,GAChBnB,EAAc,CAAEmB,OAAQO,GAE5B,GACA,CAAC1B,EAAemB,IAGZQ,GAAgBF,EAAAA,EAAAA,cACpB,SAACG,GACKA,IAAaR,GACfpB,EAAc,CAAEoB,KAAMQ,GAE1B,GACA,CAAC5B,EAAeoB,IAelB,OAZA9B,EAAAA,EAAAA,YAAU,WACJwB,GACF1B,GAASyC,EAAAA,EAAAA,IAAef,EAAmBgB,aAE/C,GAAG,CAAChB,EAAoB1B,KAExBL,EAAAA,EAAAA,GAAmB,CACjBE,UAAAA,EACAC,UAAAA,EACAC,QAAAA,IAGEmC,GAEAS,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAcC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAYC,SAAC,kBAC5BC,EAAAA,EAAAA,KAACC,EAAAA,GAAW,CACVd,YAAaA,EACbe,cAAcF,EAAAA,EAAAA,KAACG,EAAAA,GAAY,CAACC,MAAOnB,EAAMoB,YAAab,IACtDc,gBACEN,EAAAA,EAAAA,KAACO,EAAAA,GAAS,CAACC,YAAanB,EAAgBoB,MAAOzB,GAAU0B,SAO5D,IACT,C","sources":["hooks/useResponseHandler.tsx","webpack://my-app/./src/pages/Profile/Profile.module.scss?292a","dal/profile/index.ts","pages/Profile/index.tsx"],"sourcesContent":["import { useEffect } from 'react';\r\n\r\nimport { STATUS } from 'constants/app';\r\nimport { useAppDispatch } from 'store';\r\nimport { setAppStatus, setErrorText } from 'store/reducers';\r\n\r\ntype UseResponsePropsType = {\r\n  isLoading: boolean;\r\n  isSuccess: boolean;\r\n  isError: boolean;\r\n};\r\n\r\nexport const useResponseHandler = ({\r\n  isLoading,\r\n  isSuccess,\r\n  isError,\r\n}: UseResponsePropsType): void => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      dispatch(setAppStatus({ status: STATUS.LOADING }));\r\n    }\r\n    if (isSuccess) {\r\n      dispatch(setAppStatus({ status: STATUS.SUCCEEDED }));\r\n    }\r\n    if (isError) {\r\n      dispatch(setAppStatus({ status: STATUS.FAILED }));\r\n      dispatch(setErrorText({ errorText: 'Something went wrong' }));\r\n    }\r\n  }, [dispatch, isLoading, isSuccess, isError]);\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Profile_title__AcshT\",\"wrapper\":\"Profile_wrapper__mhQMa\"};","import URI from 'urijs';\r\n\r\nimport { clientAPI } from '..';\r\nimport type { builderType } from '..';\r\n\r\nimport { UpdateProfilePayloadtype, UpdateProfileResponseType } from './types';\r\n\r\nconst profileAPI = clientAPI.injectEndpoints({\r\n  endpoints: (build: builderType) => ({\r\n    updateProfile: build.mutation<UpdateProfileResponseType, UpdateProfilePayloadtype>({\r\n      query(data) {\r\n        const URL = new URI(`auth/me`);\r\n\r\n        return {\r\n          url: URL.toString(),\r\n          method: 'PUT',\r\n          body: data,\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n  overrideExisting: false,\r\n});\r\n\r\nexport const { useUpdateProfileMutation } = profileAPI;\r\n","import { useCallback, useEffect, useMemo } from 'react';\r\n\r\nimport style from './Profile.module.scss';\r\n\r\nimport initialAvatar from 'common/assets/images/noavatar.png';\r\nimport { ReturnComponentType } from 'common/types/ReturnComponentType';\r\nimport { EditableSpan, FileInput, ProfileCard } from 'components';\r\nimport { useUpdateProfileMutation } from 'dal/profile';\r\nimport { useResponseHandler } from 'hooks/useResponseHandler';\r\nimport { useAppDispatch, useAppSelector } from 'store';\r\nimport { setProfileData } from 'store/reducers';\r\n\r\nconst Profile = (): ReturnComponentType => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [updateProfile, { data: updatedProfileData, isError, isLoading, isSuccess }] =\r\n    useUpdateProfileMutation();\r\n\r\n  const email = useAppSelector(state => state.profile.email);\r\n  const avatar = useAppSelector(state => state.profile.avatar);\r\n  const name = useAppSelector(state => state.profile.name);\r\n  const publicCardPacksCount = useAppSelector(\r\n    state => state.profile.publicCardPacksCount,\r\n  );\r\n\r\n  const profileData = useMemo(\r\n    () => ({ email, avatar, name, publicCardPacksCount }),\r\n    [email, avatar, name, publicCardPacksCount],\r\n  );\r\n\r\n  const onUpdateAvatar = useCallback(\r\n    (newAvatar: string): void => {\r\n      if (newAvatar !== avatar) {\r\n        updateProfile({ avatar: newAvatar });\r\n      }\r\n    },\r\n    [updateProfile, avatar],\r\n  );\r\n\r\n  const onUpdateTitle = useCallback(\r\n    (newTitle: string) => {\r\n      if (newTitle !== name) {\r\n        updateProfile({ name: newTitle });\r\n      }\r\n    },\r\n    [updateProfile, name],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (updatedProfileData) {\r\n      dispatch(setProfileData(updatedProfileData.updatedUser));\r\n    }\r\n  }, [updatedProfileData, dispatch]);\r\n\r\n  useResponseHandler({\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n  });\r\n\r\n  if (profileData) {\r\n    return (\r\n      <div className={style.wrapper}>\r\n        <h2 className={style.title}>Profile Page</h2>\r\n        <ProfileCard\r\n          profileData={profileData}\r\n          nameChildren={<EditableSpan title={name} updateTitle={onUpdateTitle} />}\r\n          avatarChildren={\r\n            <FileInput updateImage={onUpdateAvatar} image={avatar || initialAvatar} />\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Profile;\r\n"],"names":["useResponseHandler","_ref","isLoading","isSuccess","isError","dispatch","useAppDispatch","useEffect","setAppStatus","status","STATUS","setErrorText","errorText","useUpdateProfileMutation","clientAPI","endpoints","build","updateProfile","mutation","query","data","url","URI","toString","method","body","overrideExisting","_useUpdateProfileMuta","_useUpdateProfileMuta2","_slicedToArray","_useUpdateProfileMuta3","updatedProfileData","email","useAppSelector","state","profile","avatar","name","publicCardPacksCount","profileData","useMemo","onUpdateAvatar","useCallback","newAvatar","onUpdateTitle","newTitle","setProfileData","updatedUser","_jsxs","className","style","children","_jsx","ProfileCard","nameChildren","EditableSpan","title","updateTitle","avatarChildren","FileInput","updateImage","image","initialAvatar"],"sourceRoot":""}