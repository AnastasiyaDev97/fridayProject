{"version":3,"sources":["Components/Authorization/Login/Login.module.scss","reportWebVitals.ts","enum/StatusType.ts","store/reducers/app-reducer.ts","store/reducers/login-reducer.ts","store/reducers/registration-reducer.ts","constants/index.ts","store/reducers/profile-reducer.ts","store/reducers/passwordRecovery-reducer.ts","store/reducers/packs-reducer.ts","store/reducers/cards-reducer.ts","store/reducers/modal-reducer.ts","store/store.ts","enum/InputType.ts","Components/TestComponents/components/c2-SuperButton/SuperButton.tsx","Components/TestComponents/components/c1-SuperInputText/SuperInputText.tsx","common/components/Input/UniversalInput.tsx","enum/Path.ts","enum/FormikFieldNames.ts","enum/ButtonTyoe.ts","enum/errorMessages.ts","dal/apiConfig/index.ts","dal/authorization/authorization.ts","utils/error-utils.ts","utils/validates.ts","enum/ComponentName.ts","Components/Authorization/Redistration/Registration.tsx","store/thunks/registration.ts","Components/NotFound/NotFound.tsx","Components/Authorization/ForgotPassword/ForgotPassword.tsx","store/thunks/passwordRecovery.ts","Components/Authorization/NewPassword/NewPassword.tsx","Components/NavBar/NavBar.tsx","Components/Header/Header.tsx","store/thunks/login.ts","common/assets/svg/oval.svg","common/Preloader/Preloader.tsx","features/cards/pagination/Pagination.tsx","utils/handles.ts","features/cards/table/TableRow/TableRow.tsx","enum/ModalAction.ts","features/cards/table/UniversalTable.tsx","common/components/Modal/Modal.tsx","enum/ModalEntity.ts","dal/cards/cardsAPI.ts","store/thunks/cards.ts","common/components/Modal/LearnPackModal/LearnPackModal.tsx","dal/packs/packsAPI.ts","store/thunks/packs.ts","common/components/Modal/ModalContainer/ModalContainer.tsx","Components/Cards/Rating/Rating.tsx","Components/Cards/Cards.tsx","common/hoc/withRedirect.tsx","common/components/EditableSpan/EditableSpan.tsx","dal/profile/profileAPI.ts","store/thunks/profile.ts","Components/Profile/Profile.tsx","common/hooks/customUseEffect.ts","features/cards/rangeSlider/RangeSlider.tsx","Components/Packs/PacksParams/PacksParams.tsx","selectors/getPacks.ts","selectors/getCurrentPage.ts","Components/Packs/PacksList/PacksList.tsx","Components/Packs/Packs.tsx","Components/TestComponents/components/c3-SuperCheckbox/SuperCheckbox.tsx","Components/Authorization/Login/Login.tsx","App.tsx","store/thunks/app.ts","index.tsx","Components/Profile/Profile.module.scss","features/cards/table/UniversalTable.module.scss","common/components/Modal/Modal.module.scss","common/components/Modal/LearnPackModal/LearnPackModal.module.scss","common/components/Input/UniversalInput.module.scss","features/cards/pagination/Pagination.module.scss","common/components/Modal/ModalContainer/ModalContainer.module.scss","Components/TestComponents/components/c2-SuperButton/SuperButton.module.scss","Components/TestComponents/components/c1-SuperInputText/SuperInputText.module.css","Components/NotFound/NotFound.module.scss","Components/Header/Header.module.scss","App.module.css","Components/Cards/Cards.module.scss","Components/TestComponents/components/c3-SuperCheckbox/SuperCheckbox.module.css","Components/NavBar/NavBar.module.scss","common/components/EditableSpan/EditableSpan.module.scss","Components/Packs/PacksParams/PacksParams.module.scss","features/cards/rangeSlider/RangeSlider.module.scss","Components/Packs/PacksList/PacksList.module.scss","common/Preloader/Preloader.module.scss","Components/Packs/Packs.module.scss"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","STATUS","initialState","status","isInitialized","error","setAppStatusAC","type","payload","setErrorText","isLoggedIn","isAuthToggleAC","registerStatus","registerStatusAC","EMPTY_STRING","avatar","created","email","isAdmin","name","publicCardPacksCount","rememberMe","token","tokenDeathTime","updated","verified","__v","_id","setProfileAC","profile","responseInfoForgotPass","responseInfoNewPass","emailForRecovery","SetResponseInfoForgotPassAC","addEmailAC","page","maxCardsCount","minCardsCount","pageCount","min","max","sortPacks","packName","user_id","toggleShowUserPacksAC","cards","answer","question","cardsPack_id","grade","shots","cardsTotalCount","maxGrade","minGrade","packUserId","sortCards","setCardsRatingAC","modalAction","modalEntity","id","setModalTypeAC","rootReducer","combineReducers","app","state","action","login","register","passRecovery","packs","map","card","modals","store","createStore","applyMiddleware","thunk","window","INPUT_TYPE","SuperButton","memo","red","className","restProps","finalClassName","style","btn","default","SuperInputText","onChange","onChangeText","onKeyPress","onEnter","dispatch","useDispatch","finalInputClassName","s","input","errorInput","superInput","e","currentTarget","value","key","PATH","FORMIK_FIELDS_NAME","BUTTON_TYPE","ERROR_MESSAGE","UniversalInput","validationErr","formikProps","isPassword","useState","passwordShown","setPasswordShown","typeForInput","PASSWORD","TEXT","styles","inputWrapper","placeholder","togglePassBtn","onClick","instance","axios","create","baseURL","withCredentials","authorizationAPI","password","post","res","data","loginAuthData","delete","messageDataPassword","from","message","newPassData","catchErrorHandler","err","response","COMPONENT_NAME","passwordRegex","checkEmail","values","errors","test","INVALID_EMAIL","REQUIRED","checkPassword","length","SHORT_PASSWORD","NEED_NUMBER","validates","confirmPassword","NOT_MATCHED","checkConfirmPassword","Registration","navigate","useNavigate","useSelector","formik","useFormik","initialValues","validate","onSubmit","a","resetForm","useEffect","onCancelButtonClick","useCallback","LOGIN","to","wrapper","handleSubmit","form","inputsWrapper","touched","getFieldProps","EMAIL","CONFIRM_PASSWORD","row","registrationBtns","BUTTON","SUBMIT","NotFound","notFoundBackgr","notFoundBlock","PROFILE","link","ForgotPassword","validateForgotPasswordForm","info","onButtonTogglePasswordStatusClick","sendMailBlock","sendMailMessage","sendMailBtn","submitBtn","registerLink","NewPassword","useParams","validateNewPasswordForm","newPassDataType","resetPasswordToken","NavBar","classNameForLink","isActive","active","NavLinkDataArray","navlinkPath","title","PACKS","navBarContainer","Header","headerBlock","container","logout","Preloader","src","preload","alt","loading","Paginator","totalItemCount","currentPage","onChangePageClick","portionSize","portionNumber","setPortionNumber","pagesCount","Math","ceil","portionCount","leftPortionPageNumber","rightPortionPageNumber","styleForBtn","padding","margin","fontWeight","conditionForShowButton","pages","i","push","onButtonNextPageClick","onButtonPrevPageClick","paginator","filter","classNameForPage","pageNum","activePage","convertDateFormat","dateAsString","date","Date","addZeroToDate","getDate","getMonth","getFullYear","toString","MODAL_ACTION","TableRow","item","component","onDeleteButtonClick","onUpdateButtonClick","onLearnPackClick","userId","CONDITION_FOR_DISABLE_BUTTON","cardsCount","Object","entries","cell","btns","disabled","stopPropagation","UniversalTable","rows","headers","onSetSortingClick","titlesOfHeaders","table","classNameForSpanValue","tableHeader","MODAL_ENTITY","Modal","children","modalBody","onCloseModalButtonClick","onNextCardButtonClick","isActivePrevBtn","conditionForDisabledPrevBtn","LEARN","modalWrapper","modalBlock","buttons","callback","cardsAPI","getCardsQueryParams","get","params","put","card_id","updatedGrade","getCardsTC","LearnPackModal","activeCardId","isAnswerShow","setIsAnswerShow","BtnShowTitle","onToggleShowAnswerClick","onRateButtonClick","newGrade","markButtons","learnPackModalWrapper","answerBlock","buttonsBlock","packsAPI","getPacksQueryParams","cardsPack","packId","getPacksTC","getState","paramsForQuery","ModalContainer","pack","find","questionInitialValue","answerInitialValue","nameInitialValue","setName","setQuestion","setAnswer","activeCardIndex","setActiveCardIndex","setIsActivePrevBtn","prevCards","setIsPrevCards","activeCard","setActiveCard","questionForLearn","answerForLearn","limitLength","conditionForExecution","EMPTY","onSavePackButtonClick","addPackTC","onSaveCardButtonClick","addCardTC","onDeletePackButtonClick","onDeleteCardButtonClick","deleteCardTC","onUpdatePackClick","newName","onUpdateCardClick","rest","updateCardTC","newCard","sum","reduce","acc","rand","random","newSum","console","log","getCard","onPrevCardButtonClick","ADD","CARD","DELETE","PACK","UPDATE","add","update","learn","conditionForUpdateAddCardModal","conditionActivateInputName","span","Rating","rating","Star","selected","Cards","setModalData","cardsForTable","useMemo","idOfTimeout","setTimeout","clearTimeout","handleSetSortingClick","headerName","setSortingFilterCards","handleChangePageClick","changePageCardsAC","handleAddCardButtonClick","handleDeleteButtonClick","handleUpdateCardClick","cursor","actions","CARDS","Pagination","withRedirect","Component","props","EditableSpan","updateTitle","isEdit","toggleEdit","onDoubleClick","onBlur","autoFocus","profileAPI","updatedUser","updateProfileTC","updatedProfile","avatarURL","setAvatarURL","isInputActive","setIsInputActive","onInputForURLChange","onAddNewPhotoClick","onInputForURLKeyPress","onCloseInputBlur","profileWrapper","avatarBlock","avatarWrapper","tooltip","inputForURL","addPhotoURlBtn","profileInfo","newTitle","UseSetTimeoutEffect","callBack","dependencies","ms","RangeSlider","minValueForRangeSlider","maxValueForRangeSlider","onChangeCardsCountsChange","setValue","Box","sx","width","sliderWrapper","Slider","event","newValue","valueLabelDisplay","sliderValues","PacksParams","onShowMyCardsClick","onShowAllCardsClick","handleChangeCardsCountChange","minValue","maxValue","btnsWrapper","getPacks","cardPacks","getCurrentPage","PacksList","text","setText","packsForTable","user_name","packForModal","handleSearchPack","changePageAC","setSortingFilter","handleAddPackButtonClick","handleUpdatePackClick","listWrapper","aria-disabled","cardPacksTotalCount","SuperCheckbox","onChangeChecked","spanClassName","checkbox","labelForCheckBox","checked","Login","validateLoginForm","conditionForDisableButton","START","REMEMBER_ME","FORGOT_PASSWORD","REGISTRATION","App","setModalPropsAC","setModalDataCards","setModalDataPacks","appWrapper","mainBlock","path","element","NOT_FOUND","NEW_PASSWORD","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1483d1e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__1QeDt\",\"form\":\"Login_form__2Xo5h\",\"inputsWrapper\":\"Login_inputsWrapper__2Vk9k\",\"row\":\"Login_row__2Oh6t\",\"registrationBtns\":\"Login_registrationBtns__1dEYv\",\"submitBtn\":\"Login_submitBtn__2jSaA\",\"registerLink\":\"Login_registerLink__3lZqv\",\"sendMailBlock\":\"Login_sendMailBlock__2O_Nv\",\"sendMailBtn\":\"Login_sendMailBtn__2MyM-\",\"sendMailMessage\":\"Login_sendMailMessage__3Tqvp\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const STATUS = {\r\n    LOADING: 'loading',\r\n    IDLE: 'idle',\r\n    SUCCEEDED: 'succeeded',\r\n    FAILED: 'failed',\r\n}","import {Nullable} from \"../../types/Nullable\";\r\nimport {ActionsType} from \"./AC types/types\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\n\r\n\r\nconst initialState = {\r\n    status: STATUS.IDLE,\r\n    isInitialized: false,\r\n    error: null as Nullable<string>,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n        case \"APP/SET-ERROR\":\r\n            return {...state, ...action.payload}\r\n        case 'APP/INITIALIZE': {\r\n            return {...state, isInitialized: true}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAppStatusAC = (status: string) => ({\r\n    type: 'APP/SET-STATUS',\r\n    payload: {\r\n        status,\r\n    }\r\n} as const)\r\n\r\n\r\nexport const setIsInitializedAC = () => ({\r\n    type: 'APP/INITIALIZE'\r\n} as const)\r\n\r\nexport const setErrorText = (error: Nullable<string>) => ({\r\n    type: 'APP/SET-ERROR',\r\n    payload: {error}\r\n} as const)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {ActionsType} from \"./AC types/types\";\r\n\r\nexport type loginAuthDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nlet initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"LOGIN/TOGGLE-IS-AUTH\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const isAuthToggleAC = (isLoggedIn: boolean) => ({\r\n    type: 'LOGIN/TOGGLE-IS-AUTH',\r\n    payload: {\r\n        isLoggedIn\r\n    }\r\n} as const)\r\n\r\n","import {ActionsType} from \"./AC types/types\";\r\n\r\n\r\nlet initialState = {registerStatus: false}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const registrationReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n\r\n        case \"SET-REGISTER-STATUS\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const registerStatusAC = (registerStatus: boolean) =>\r\n    ({\r\n        type: 'SET-REGISTER-STATUS',\r\n        payload: {registerStatus}\r\n    } as const)\r\n\r\n\r\n","export const pageCountNumber=10\r\nexport const profileInitializeAvatarURL='https://lh3.googleusercontent.com/DQj-gonAVTlhj5W7_DhBVmX-0P42rfvx8TSp1WfQeZ6iFIon6InIS8M4Nbqy7Ql5ahgEXSiRDiWD88v-bcPYIEAg3Q=w640-h400-e365-rj-sc0x00ffffff'\r\nexport const EMPTY_STRING=''","import {ActionsType} from \"./AC types/types\";\r\nimport {ResponseLoginType} from \"../../dal/authorization/types\";\r\nimport {EMPTY_STRING, profileInitializeAvatarURL} from \"../../constants\";\r\n\r\n\r\nconst initialState = {\r\n    avatar: profileInitializeAvatarURL,\r\n    created: EMPTY_STRING,\r\n    email: EMPTY_STRING,\r\n    isAdmin: false,\r\n    name: EMPTY_STRING,\r\n    publicCardPacksCount: 0,\r\n    rememberMe: false,\r\n    token: EMPTY_STRING,\r\n    tokenDeathTime: 0,\r\n    updated: EMPTY_STRING,\r\n    verified: false,\r\n    __v: 0,\r\n    _id: EMPTY_STRING,\r\n}\r\n\r\n\r\nexport const profileReducer = (state: ResponseLoginType = initialState, action: ActionsType): ResponseLoginType => {\r\n    switch (action.type) {\r\n        case 'SET-PROFILE':\r\n            debugger\r\n            return {...state, ...action.payload.profile}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setProfileAC = (profile: ResponseLoginType) => ({\r\n        type: 'SET-PROFILE',\r\n        payload: {\r\n            profile,}\r\n    }\r\n) as const\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {Nullable} from \"../../types/Nullable\";\r\nimport {ActionsType} from \"./AC types/types\";\r\nimport {EMPTY_STRING} from \"../../constants\";\r\n\r\nlet initialState = {\r\n    responseInfoForgotPass: EMPTY_STRING,\r\n    responseInfoNewPass: EMPTY_STRING,\r\n    emailForRecovery: null as Nullable<string>\r\n\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const passwordRecoveryReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"SET-RESPONSE-INFO-FORGOT-PASS\":\r\n        case \"SET-RESPONSE-INFO-NEW-PASS\":\r\n            debugger\r\n            return {...state, ...action.payload}\r\n        case \"ADD-EMAIL\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const SetResponseInfoForgotPassAC = (responseInfoForgotPass: string) => ({\r\n    type: 'SET-RESPONSE-INFO-FORGOT-PASS',\r\n    payload: {responseInfoForgotPass}\r\n} as const)\r\n\r\nexport const SetResponseInfoNewPassAC = (responseInfoNewPass: string) => ({\r\n    type: 'SET-RESPONSE-INFO-NEW-PASS',\r\n    payload: {responseInfoNewPass}\r\n} as const)\r\n\r\nexport const addEmailAC = (emailForRecovery: string) => ({\r\n    type: 'ADD-EMAIL',\r\n    payload: {emailForRecovery}\r\n} as const)\r\n\r\n","import {ActionsType} from \"./AC types/types\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {getPacksResponseType} from \"../../dal/packs/types\";\r\nimport {EMPTY_STRING} from \"../../constants\";\r\n\r\n\r\ntype initialStateType = getPacksResponseType & {\r\n    min: number\r\n    max: number\r\n    sortPacks: string\r\n    packName: Nullable<string>\r\n    user_id: Nullable<string>\r\n}\r\n\r\n\r\nconst INITIAL_CARDS_MAX_BORDER = 100\r\nlet initialState = {\r\n    page: 1,\r\n    /*   cardPacks: [] as Array<PackType>,*/\r\n    /* cardPacksTotalCount: 0,*/\r\n    maxCardsCount: 0,\r\n    minCardsCount: 0,\r\n    pageCount: 0,\r\n    min: 0,\r\n    max: INITIAL_CARDS_MAX_BORDER,\r\n    sortPacks: '0updated',\r\n    packName: EMPTY_STRING,\r\n    user_id: null,\r\n} as initialStateType\r\n\r\n\r\nexport const packsReducer = (state: initialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"PACKS/CHANGE-SEARCH-PACK-NAME\":\r\n        case \"PACKS/SET-PACKS\":\r\n        case \"PACKS/CHANGE-PAGE\":\r\n        case \"SET-RESPONSE-INFO-NEW-PASS\":\r\n        case \"PACKS/TOGGLE-SHOW-USER-PACKS\":\r\n        case \"PACKS/SET-NEW-MIN-MAX-VALUE\":\r\n        case \"PACKS/SET-SORTING-FILTER\":\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setPacksAC = (payload: getPacksResponseType) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    payload\r\n} as const)\r\n\r\n\r\nexport const changePageAC = (page: number) => ({\r\n    type: 'PACKS/CHANGE-PAGE',\r\n    payload: {page}\r\n} as const)\r\n\r\nexport const setNewMinMaxValues = (min: number, max: number) => ({\r\n    type: 'PACKS/SET-NEW-MIN-MAX-VALUE',\r\n    payload: {min, max}\r\n} as const)\r\n\r\nexport const setSortingFilter = (sortPacks: string) => ({\r\n\r\n    type: 'PACKS/SET-SORTING-FILTER',\r\n    payload: {sortPacks}\r\n} as const)\r\n\r\nexport const changeSearchPackNameAC = (packName: string) => ({\r\n    type: 'PACKS/CHANGE-SEARCH-PACK-NAME',\r\n    payload: {packName}\r\n} as const)\r\n\r\nexport const toggleShowUserPacksAC = (user_id: string) => ({\r\n    type: 'PACKS/TOGGLE-SHOW-USER-PACKS',\r\n    payload: {user_id}\r\n} as const)\r\n\r\n\r\n","import {ActionsType} from \"./AC types/types\";\r\nimport {getCardsResponseType} from \"../../dal/cards/types\";\r\nimport {EMPTY_STRING} from \"../../constants\";\r\n\r\n\r\n\r\nlet initialState = {\r\n    cards: [\r\n        {\r\n            answer: EMPTY_STRING,\r\n            question: EMPTY_STRING,\r\n            cardsPack_id: EMPTY_STRING,\r\n            grade: 0,\r\n            shots: 0,\r\n            user_id: EMPTY_STRING,\r\n            created: EMPTY_STRING,\r\n            updated: EMPTY_STRING,\r\n            _id: EMPTY_STRING,\r\n        }\r\n    ],\r\n    cardsTotalCount: 0,\r\n    maxGrade: 0,\r\n    minGrade: 0,\r\n    page: 1,\r\n    pageCount: 0,\r\n    packUserId: EMPTY_STRING,\r\n    sortCards: '0updated'\r\n} as InitialStateType\r\n\r\ntype InitialStateType = getCardsResponseType & { sortCards: string }\r\n\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"CARDS/SET-CARDS\":\r\n        case 'CARDS/CHANGE-PAGE':\r\n        case 'CARDS/SET-SORTING-FILTER':\r\n            return {...state, ...action.payload}\r\n        case 'CARDS/SET-CARDS-RATING':\r\n\r\n            return {\r\n                ...state,\r\n                cards: [...state.cards.map(card => card._id === action._id ? {...card, ...action.payload} : card)]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setCardsAC = (payload: getCardsResponseType) => ({\r\n    type: 'CARDS/SET-CARDS',\r\n    payload\r\n} as const)\r\n\r\nexport const setSortingFilterCards = (sortCards: string) => {\r\n    return {\r\n        type: 'CARDS/SET-SORTING-FILTER',\r\n        payload: {sortCards}\r\n    } as const\r\n}\r\n\r\nexport const changePageCardsAC = (page: number) => {\r\n    return (\r\n        {\r\n            type: 'CARDS/CHANGE-PAGE',\r\n            payload: {page}\r\n        }) as const\r\n}\r\nexport const setCardsRatingAC = (_id: string, grade: number, shots: number) => {\r\n    return ({\r\n        type: 'CARDS/SET-CARDS-RATING',\r\n        _id,\r\n        payload: {grade, shots}\r\n    }) as const\r\n}\r\n\r\n\r\n\r\n","import {ActionsType} from \"./AC types/types\";\r\nimport {modalActionType, modalEntityType} from \"../../common/components/Modal/ModalContainer/ModalContainer\";\r\n\r\n\r\n\r\n/*export type modalTypeT='addCard'|''|'addPack'|'deleteCard'|'deletePack'|'updatePack'|'updateCard'|'learnPack'*/\r\n\r\nlet initialState = {\r\n    modalAction: '' as modalActionType,\r\n    modalEntity: '' as modalEntityType,\r\n    id: ''\r\n}\r\n\r\ntype InitialStateType = {\r\n    modalAction: modalActionType\r\n    modalEntity: modalEntityType\r\n    id:string\r\n}\r\n\r\n\r\nexport const modalReducer = (state: InitialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'MODAL/SET-MODAL-TYPE':\r\n            return {...state, ...action.payload}\r\n        case 'MODAL/SET-MODAL-PROPS':\r\n\r\n            return {...state, ...action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setModalTypeAC = (modalAction: modalActionType, modalEntity: modalEntityType) => ({\r\n    type: 'MODAL/SET-MODAL-TYPE',\r\n    payload: {\r\n        modalAction,\r\n        modalEntity\r\n    }\r\n} as const)\r\n\r\nexport const setModalPropsAC = (id:string) => {\r\n    return{\r\n    type: 'MODAL/SET-MODAL-PROPS',\r\n    payload: {id}\r\n} as const}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, { ThunkAction } from 'redux-thunk';\r\n\r\nimport {appReducer} from \"./reducers/app-reducer\";\r\nimport {loginReducer} from \"./reducers/login-reducer\";\r\nimport {registrationReducer} from \"./reducers/registration-reducer\";\r\nimport {profileReducer} from \"./reducers/profile-reducer\";\r\nimport {passwordRecoveryReducer} from \"./reducers/passwordRecovery-reducer\";\r\nimport {packsReducer} from \"./reducers/packs-reducer\";\r\nimport {cardsReducer} from \"./reducers/cards-reducer\";\r\nimport {ActionsType} from \"./reducers/AC types/types\";\r\nimport {modalReducer} from \"./reducers/modal-reducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    register: registrationReducer,\r\n    profile: profileReducer,\r\n    passRecovery:passwordRecoveryReducer,\r\n    packs:packsReducer,\r\n    cards:cardsReducer,\r\n    modals:modalReducer,\r\n\r\n});\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type RootReducerType = ReturnType<typeof rootReducer>;\r\n/*export type ThunkType<ReturnType = void> = ThunkAction<ReturnType, RootReducerType, unknown, any>*/\r\nexport type ThunkType = ThunkAction<void, RootReducerType, unknown, ActionsType>\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n\r\n// @ts-ignore\r\nwindow.store=store","export enum INPUT_TYPE {\r\n    PASSWORD= 'password',\r\n    TEXT= 'text'\r\n}","import {ButtonHTMLAttributes, DetailedHTMLProps, FC, memo} from 'react'\r\nimport style from './SuperButton.module.scss'\r\n\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: FC<SuperButtonPropsType> = memo((\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${style.btn} ${red ? style.red : style.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n})\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, KeyboardEvent, memo} from 'react'\r\nimport s from './SuperInputText.module.css'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setErrorText} from \"../../../../store/reducers/app-reducer\";\r\nimport {Nullable} from \"../../../../types/Nullable\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: Nullable<string>\r\n    spanClassName?: string\r\n\r\n}\r\n\r\nconst SuperInputText: FC<SuperInputTextPropsType> = memo((\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className,\r\n        /*value*/\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const dispatch=useDispatch()\r\n\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className} `\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n        dispatch(setErrorText(null))\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={type}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                {...restProps}\r\n            />\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default SuperInputText\r\n","import styles from \"./UniversalInput.module.scss\"\r\nimport SuperInputText from \"../../../Components/TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport React, {FC, memo, useState} from \"react\";\r\nimport {FieldInputProps} from \"formik\";\r\nimport {INPUT_TYPE} from \"../../../enum/InputType\";\r\n\r\nexport type InputType= 'password'|'text'\r\n\r\n\r\ntype universalInputPropsType = {\r\n    validationErr: string\r\n    formikProps: FieldInputProps<any>\r\n    type?: InputType\r\n    isPassword?: boolean\r\n}\r\n\r\nexport const UniversalInput: FC<universalInputPropsType> = memo(({\r\n                                                                     validationErr, formikProps, type,\r\n                                                                     isPassword\r\n                                                                 }) => {\r\n   /* debugger*/\r\n\r\n    let [passwordShown, setPasswordShown] = useState<boolean>(false);\r\n\r\n    const typeForInput = !passwordShown && type ? INPUT_TYPE.PASSWORD : INPUT_TYPE.TEXT\r\n\r\n    const onSpanToggleShowPasswordClick = () => {\r\n        setPasswordShown(!passwordShown)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.inputWrapper}>\r\n            <SuperInputText className={styles.input}\r\n                            placeholder={formikProps.name}\r\n                            {...formikProps}\r\n                            type={typeForInput}/>\r\n            {isPassword && <span className={styles.togglePassBtn} onClick={onSpanToggleShowPasswordClick}/>}\r\n            <div className={styles.error}>{validationErr}</div>\r\n        </div>\r\n    )\r\n})\r\n","export enum PATH {\r\n    PROFILE = '/profile',\r\n    REGISTRATION = '/registration',\r\n    NOT_FOUND = '/404',\r\n    FORGOT_PASSWORD = '/forgot-password',\r\n    NEW_PASSWORD = '/new-password',\r\n    CARDS = '/cards',\r\n    PACKS = '/packs',\r\n    LOGIN = '/login',\r\n    START = '/',\r\n}","export enum FORMIK_FIELDS_NAME{\r\n    REMEMBER_ME='rememberMe',\r\n    EMAIL='email',\r\n    PASSWORD= 'password',\r\n    NAME='name',\r\n    CONFIRM_PASSWORD='confirmPassword'\r\n}","export enum BUTTON_TYPE{\r\n    SUBMIT='submit',\r\n    BUTTON='button',\r\n}","export enum ERROR_MESSAGE {\r\n    INVALID_EMAIL = 'Invalid email address',\r\n    REQUIRED = 'Required',\r\n    SHORT_PASSWORD = 'Password must be 8 characters long',\r\n    NEED_NUMBER = 'Invalid password. Must contain one number',\r\n    NOT_MATCHED = 'Password not matched',\r\n\r\n}","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true,\r\n})\r\n\r\n/*http://localhost:7542/2.0/*/\r\n","import {instance} from \"../apiConfig\";\r\nimport {loginAuthDataType} from \"../../store/reducers/login-reducer\";\r\nimport {LogoutResponse, RegisterErrorResponse, ResponseForgotPasswordType, ResponseLoginType} from \"./types\";\r\nimport {newPassDataType} from \"../packs/types\";\r\n\r\n\r\n\r\nexport const authorizationAPI = {\r\n    registerMe(email: string, password: string) {\r\n        return instance.post<RegisterErrorResponse>(`auth/register`, {email, password})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    loginMe(loginAuthData: loginAuthDataType) {\r\n\r\n        return instance.post<ResponseLoginType>(`auth/login`, loginAuthData)\r\n            .then(res => {\r\n\r\n                return res.data\r\n            })\r\n\r\n    },\r\n    logoutMe() {\r\n        return instance.delete<LogoutResponse>(`auth/me`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    authMe() {\r\n        return instance.post<ResponseLoginType>(`auth/me`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    sendPassword(email: string) {\r\n        const messageDataPassword = {\r\n            email,\r\n            from: 'test-front-admin <ai73a@yandex.by>',\r\n            message: `<div style=\"background-color: lime; padding: 15px\">\r\npassword recovery link: <a href='http://nastyaz23.github.io/fridayProject/#/new-password/$token$'<!--https://nastyaz23.github.io/fridayProject/#new-password/$token$-->'>\r\nlink</a></div>`\r\n\r\n           /* http://localhost:3000/#/new-password/$token$*/\r\n        }\r\n        return instance.post<ResponseForgotPasswordType>(`auth/forgot`\r\n            , messageDataPassword)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    setNewPassword(newPassData: newPassDataType) {\r\n            return instance.post<LogoutResponse>(`auth/set-new-password`\r\n            , newPassData\r\n            )\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    }\r\n}\r\n\r\n/*\r\n<!--https://nastyaZ23.github.io/fridayProject-->*!/*/\r\n","import {setAppStatusAC, setErrorText} from \"../store/reducers/app-reducer\";\r\nimport {AppDispatch} from \"../store/store\";\r\nimport {STATUS} from \"../enum/StatusType\";\r\n\r\n\r\nexport const catchErrorHandler = (dispatch: AppDispatch, err: any) => {\r\n\r\n    dispatch(setErrorText(err.response ? err.response.data.error : err))\r\n    dispatch(setAppStatusAC(STATUS.FAILED))\r\n}","import {ERROR_MESSAGE} from \"../enum/errorMessages\";\r\n\r\nexport type AuthData = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\ntype valuesRegisterForm = {\r\n    email?: string\r\n    password?: string\r\n    confirmPassword?: string\r\n}\r\n\r\nconst minPasswordLength=8\r\nconst passwordRegex = /(?=.*[0-9])/\r\nconst checkEmail=(values: valuesRegisterForm, errors: AuthData)=>{\r\n    if (!values.email) {\r\n        errors.email = ERROR_MESSAGE.REQUIRED;\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = ERROR_MESSAGE.INVALID_EMAIL;\r\n    }\r\n}\r\n\r\nconst checkPassword=(values: valuesRegisterForm, errors: AuthData)=>{\r\n    if (!values.password) {\r\n        errors.password = ERROR_MESSAGE.REQUIRED;\r\n    } else if (values.password.length < minPasswordLength) {\r\n        errors.password = ERROR_MESSAGE.SHORT_PASSWORD;\r\n    } else if (!passwordRegex.test(values.password)) {\r\n        errors.password = ERROR_MESSAGE.NEED_NUMBER;\r\n    }\r\n}\r\n\r\nconst checkConfirmPassword=(values: valuesRegisterForm, errors: AuthData)=>{\r\n    if (!values.confirmPassword) {\r\n        errors.confirmPassword = ERROR_MESSAGE.REQUIRED;\r\n    }\r\n    if (values.password && values.confirmPassword) {\r\n        if (values.password !== values.confirmPassword) {\r\n            errors.confirmPassword = ERROR_MESSAGE.NOT_MATCHED;\r\n        }\r\n    }\r\n}\r\n\r\nexport const validates = (values: valuesRegisterForm, errors: AuthData) => {\r\n    checkEmail(values, errors)\r\n    checkPassword(values, errors)\r\n    checkConfirmPassword(values, errors)\r\n}\r\n\r\n\r\nexport const validateLoginForm = (values: valuesRegisterForm, errors: AuthData) => {\r\n    checkEmail(values, errors)\r\n    checkPassword(values, errors)\r\n}\r\n\r\nexport const validateForgotPasswordForm = (values: valuesRegisterForm, errors: AuthData) => {\r\n    checkEmail(values, errors)\r\n}\r\n\r\nexport const validateNewPasswordForm = (values: valuesRegisterForm, errors: AuthData) => {\r\n    checkPassword(values, errors)\r\n}\r\n","export enum COMPONENT_NAME{\r\n    PACKS='packs',\r\n    CARDS='cards',\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {Navigate, useNavigate} from \"react-router-dom\";\r\nimport {registerStatusAC} from \"../../../store/reducers/registration-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport styles from \"../Login/Login.module.scss\";\r\nimport {UniversalInput} from \"../../../common/components/Input/UniversalInput\";\r\n\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\nimport {registerMeTC} from \"../../../store/thunks/registration\";\r\nimport {PATH} from \"../../../enum/Path\";\r\nimport {FORMIK_FIELDS_NAME} from \"../../../enum/FormikFieldNames\";\r\nimport {INPUT_TYPE} from \"../../../enum/InputType\";\r\nimport {BUTTON_TYPE} from \"../../../enum/ButtonTyoe\";\r\nimport {AuthData, validates} from \"../../../utils/validates\";\r\n\r\n\r\nexport const Registration = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const navigate = useNavigate()\r\n\r\n    let registerStatus = useSelector<RootReducerType, boolean>(state => state.register.registerStatus)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: EMPTY_STRING,\r\n            password: EMPTY_STRING,\r\n            confirmPassword: EMPTY_STRING,\r\n        },\r\n\r\n        validate: values => {\r\n            const errors: AuthData = {};\r\n            validates(values, errors)\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(registerMeTC(values.email, values.password))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(registerStatusAC(false))\r\n        }\r\n    })\r\n\r\n    const onCancelButtonClick = useCallback(() => {\r\n        formik.resetForm()\r\n        navigate(PATH.LOGIN)\r\n    }, [formik, navigate])\r\n\r\n    if (registerStatus) {\r\n        return <Navigate to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <h2>Sign up</h2>\r\n            <form onSubmit={formik.handleSubmit} className={styles.form}>\r\n                <div className={styles.inputsWrapper}>\r\n\r\n                    <UniversalInput validationErr={(formik.touched.email && formik.errors.email) || EMPTY_STRING}\r\n                                    formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.EMAIL)}/>\r\n                    <UniversalInput validationErr={(formik.touched.password && formik.errors.password) || EMPTY_STRING}\r\n                                    formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.PASSWORD)}\r\n                                    type={INPUT_TYPE.PASSWORD}\r\n                                    isPassword={true}/>\r\n                    <UniversalInput\r\n                        validationErr={(formik.touched.confirmPassword && formik.errors.confirmPassword) || EMPTY_STRING}\r\n                        formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.CONFIRM_PASSWORD)}\r\n                        type={INPUT_TYPE.PASSWORD}\r\n                        isPassword={true}/>\r\n                </div>\r\n\r\n                <div className={styles.row}>\r\n                    <div className={styles.registrationBtns}>\r\n                        <SuperButton type={BUTTON_TYPE.BUTTON} onClick={onCancelButtonClick}>Cancel</SuperButton>\r\n                        <SuperButton type={BUTTON_TYPE.SUBMIT}>Register</SuperButton>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import {AppDispatch} from \"../store\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {authorizationAPI} from \"../../dal/authorization/authorization\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {registerStatusAC} from \"../reducers/registration-reducer\";\r\n\r\nexport const registerMeTC = (email: string, password: string) =>\r\n    async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await authorizationAPI.registerMe(email, password)\r\n            dispatch(registerStatusAC(true))\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n            dispatch(registerStatusAC(false))\r\n        }\r\n    }","import React from 'react';\r\nimport style from './NotFound.module.scss'\r\nimport SuperButton from \"../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../enum/Path\";\r\n\r\n\r\n\r\nexport const NotFound=()=>{\r\n    return(\r\n        <div className={style.notFoundBackgr}>\r\n            <div className={style.notFoundBlock}>\r\n            <h2 >Not Found &#128532;</h2>\r\n            <SuperButton><NavLink to={PATH.PROFILE} className={style.link}>Go Back</NavLink></SuperButton>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useCallback} from 'react';\r\nimport styles from \"../Login/Login.module.scss\";\r\nimport {UniversalInput} from \"../../../common/components/Input/UniversalInput\";\r\nimport {NavLink, useNavigate} from \"react-router-dom\";\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {addEmailAC, SetResponseInfoForgotPassAC} from \"../../../store/reducers/passwordRecovery-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\n\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\nimport {PATH} from \"../../../enum/Path\";\r\nimport {BUTTON_TYPE} from \"../../../enum/ButtonTyoe\";\r\nimport {sendPassword} from \"../../../store/thunks/passwordRecovery\";\r\nimport {AuthData, validateForgotPasswordForm} from \"../../../utils/validates\";\r\n\r\n\r\nexport const ForgotPassword = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const emailForRecovery = useSelector<RootReducerType, null | string>(state => state.passRecovery.emailForRecovery)\r\n    const responseInfoForgotPass = useSelector<RootReducerType, string>(state => state.passRecovery.responseInfoForgotPass)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: EMPTY_STRING,\r\n        },\r\n        validate: values => {\r\n            const errors: AuthData = {};\r\n            validateForgotPasswordForm(values, errors)\r\n            return errors;\r\n        },\r\n\r\n        onSubmit: values => {\r\n            dispatch(sendPassword(values.email))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    const onButtonTogglePasswordStatusClick = useCallback(() => {\r\n        dispatch(SetResponseInfoForgotPassAC(EMPTY_STRING))\r\n        dispatch(addEmailAC(EMPTY_STRING))\r\n        navigate(PATH.LOGIN)\r\n    }, [dispatch,navigate])\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n\r\n            {responseInfoForgotPass ?\r\n                <div className={styles.sendMailBlock}>\r\n                    <h2>Check email</h2>\r\n                    <div className={styles.sendMailMessage}>We've sent an Email with instructions\r\n                        to {emailForRecovery}</div>\r\n                    <SuperButton className={styles.sendMailBtn} type={BUTTON_TYPE.BUTTON}\r\n                                 onClick={onButtonTogglePasswordStatusClick}>Ok</SuperButton>\r\n                </div>\r\n\r\n                : <>\r\n                    <h2>Forgot your password?</h2>\r\n                    <form className={styles.form} onSubmit={(e) => {\r\n                        formik.handleSubmit(e)\r\n                    }}>\r\n                        <div className={styles.inputsWrapper}>\r\n                            <UniversalInput\r\n                                validationErr={(formik.touched.email && formik.errors.email) || EMPTY_STRING}\r\n                                formikProps={formik.getFieldProps('email')}/>\r\n                        </div>\r\n\r\n                        <div>\r\n                            Enter your email address and we will send you further instructions\r\n                        </div>\r\n\r\n                        <SuperButton className={styles.submitBtn} type={BUTTON_TYPE.SUBMIT}>Send\r\n                            instructions</SuperButton>\r\n                    </form>\r\n                    <div>Do you remember your password?</div>\r\n                    <NavLink className={styles.registerLink} to={PATH.LOGIN}>Try logging in</NavLink>\r\n                </>}\r\n        </div>\r\n    )\r\n}","import {AppDispatch} from \"../store\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {authorizationAPI} from \"../../dal/authorization/authorization\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {newPassDataType} from \"../../dal/packs/types\";\r\nimport {addEmailAC, SetResponseInfoForgotPassAC, SetResponseInfoNewPassAC} from \"../reducers/passwordRecovery-reducer\";\r\n\r\nexport const sendPassword = (email: string) =>\r\n    async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            let res = await authorizationAPI.sendPassword(email)\r\n            dispatch(addEmailAC(email))\r\n            res.info && dispatch(SetResponseInfoForgotPassAC(res.info))\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\n\r\nexport const setNewPasswordTC = (newPassData: newPassDataType) =>\r\n    async (dispatch: AppDispatch) => {\r\n        try {\r\n            debugger\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            let res = await authorizationAPI.setNewPassword(newPassData)\r\n            res.info && dispatch(SetResponseInfoNewPassAC(res.info))\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }","import React from 'react';\r\nimport styles from \"../Login/Login.module.scss\";\r\nimport {UniversalInput} from \"../../../common/components/Input/UniversalInput\";\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport {Navigate, useParams} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\nimport {setNewPasswordTC} from \"../../../store/thunks/passwordRecovery\";\r\nimport {PATH} from \"../../../enum/Path\";\r\nimport {FORMIK_FIELDS_NAME} from \"../../../enum/FormikFieldNames\";\r\nimport {INPUT_TYPE} from \"../../../enum/InputType\";\r\nimport {BUTTON_TYPE} from \"../../../enum/ButtonTyoe\";\r\nimport {AuthData, validateNewPasswordForm} from \"../../../utils/validates\";\r\n\r\n\r\nexport const NewPassword = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {token} = useParams<string>()\r\n\r\n\r\n    const responseInfoNewPass = useSelector<RootReducerType, string>(state => state.passRecovery.responseInfoNewPass)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            password: EMPTY_STRING,\r\n        },\r\n\r\n        validate: values => {\r\n            const errors: AuthData = {};\r\n            validateNewPasswordForm(values, errors)\r\n            return errors;\r\n\r\n        },\r\n\r\n        onSubmit: values => {\r\n            let newPassDataType = {\r\n                password: values.password,\r\n                resetPasswordToken: token || EMPTY_STRING\r\n            }\r\n            dispatch(setNewPasswordTC(newPassDataType))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (responseInfoNewPass) {\r\n        return <Navigate to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <h2>Create new password</h2>\r\n            <form className={styles.form} onSubmit={(e) => {\r\n                formik.handleSubmit(e)\r\n            }}>\r\n\r\n                <div className={styles.inputsWrapper}>\r\n                    <UniversalInput validationErr={(formik.touched.password && formik.errors.password) || EMPTY_STRING}\r\n                                    formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.PASSWORD)}\r\n                                    type={INPUT_TYPE.PASSWORD}\r\n                                    isPassword={true}/>\r\n                </div>\r\n\r\n                <SuperButton className={styles.submitBtn} type={BUTTON_TYPE.SUBMIT}>Create new password</SuperButton>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport styles from './NavBar.module.scss'\r\nimport {EMPTY_STRING} from \"../../constants\";\r\nimport {PATH} from \"../../enum/Path\";\r\n\r\n\r\nexport const NavBar = () => {\r\n\r\n    const classNameForLink = ({isActive}: { isActive: boolean }) => isActive ? `${styles.active}` : EMPTY_STRING\r\n    const NavLinkDataArray = [\r\n        {navlinkPath: PATH.PROFILE, title: 'Profile'},\r\n        {navlinkPath: PATH.PACKS, title: 'Packs List'},\r\n    ]\r\n    return (\r\n        <div className={styles.navBarContainer}>\r\n\r\n            {NavLinkDataArray.map(({navlinkPath, title}) =>\r\n                <NavLink key={title} to={navlinkPath} className={classNameForLink}>{title}</NavLink>)}\r\n\r\n        </div>\r\n    )\r\n}","import React, {memo} from 'react';\r\nimport styles from './Header.module.scss'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {NavBar} from \"../NavBar/NavBar\";\r\nimport {logoutTC} from \"../../store/thunks/login\";\r\n\r\n\r\nexport const Header = memo(() => {\r\n    const dispatch = useDispatch();\r\n\r\n    let isLoggedIn = useSelector<RootReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className={styles.headerBlock}>\r\n            <div className={styles.container}>\r\n                <h2>CardsApp</h2>\r\n\r\n                {isLoggedIn && <><NavBar/>\r\n                    <span className={styles.logout} onClick={logoutHandler}>Logout</span>\r\n                </>}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {AppDispatch} from \"../store\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {authorizationAPI} from \"../../dal/authorization/authorization\";\r\nimport {setProfileAC} from \"../reducers/profile-reducer\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {isAuthToggleAC, loginAuthDataType} from \"../reducers/login-reducer\";\r\n\r\nexport const loginTC = (loginAuthData: loginAuthDataType) =>\r\n    async (dispatch: AppDispatch) => {\r\n        try {\r\n\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            let res = await authorizationAPI.loginMe(loginAuthData)\r\n\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n            dispatch(isAuthToggleAC(true))\r\n            dispatch(setProfileAC(res))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const logoutTC = () =>\r\n    async (dispatch: AppDispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await authorizationAPI.logoutMe()\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n            dispatch(isAuthToggleAC(false))\r\n\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }","export default __webpack_public_path__ + \"static/media/oval.c2cdedba.svg\";","import preload from './../assets/svg/oval.svg'\r\nimport React from \"react\";\r\nimport s from './Preloader.module.scss'\r\n\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <img src={preload} alt='waiting...'  className={s.loading}/>)\r\n}\r\n\r\nexport default Preloader","import React, {FC, memo, useCallback, useState} from \"react\";\r\nimport styles from './Pagination.module.scss'\r\nimport SuperButton from \"../../../Components/TestComponents/components/c2-SuperButton/SuperButton\";\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemCount: number\r\n    pageCount: number\r\n    currentPage: number\r\n    onChangePageClick: (currentPage: number) => void\r\n    portionSize: number\r\n}\r\n\r\nconst START_VALUE_PORTION_NUMBER = 1\r\n\r\nconst Paginator: FC<PaginatorPropsType> = memo(({\r\n                                                    totalItemCount, pageCount, currentPage, onChangePageClick,\r\n                                                    portionSize\r\n                                                }) => {\r\n\r\n    let [portionNumber, setPortionNumber] = useState(START_VALUE_PORTION_NUMBER);\r\n\r\n    let pagesCount = Math.ceil(totalItemCount / pageCount);\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n    const styleForBtn = {padding: '5px', margin: '0 5px', fontWeight: 'bold'}\r\n    const conditionForShowButton = portionNumber > START_VALUE_PORTION_NUMBER\r\n    let pages = [];\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    const onButtonNextPageClick = useCallback(() => {\r\n        setPortionNumber(portionNumber + 1)\r\n    }, [portionNumber])\r\n\r\n    const onButtonPrevPageClick = useCallback(() => {\r\n        setPortionNumber(portionNumber - 1)\r\n    }, [portionNumber])\r\n\r\n    return (\r\n        <div className={styles.paginator}>\r\n\r\n            {conditionForShowButton &&\r\n            <SuperButton\r\n                style={styleForBtn} onClick={onButtonPrevPageClick}>&#8592;</SuperButton>}\r\n\r\n            {pages\r\n                .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n                .map((page) => {\r\n\r\n                    const classNameForPage = (page === currentPage ? `${styles.pageNum} ${styles.activePage}`\r\n                        : styles.pageNum)\r\n\r\n                    const onSpanClick = () => {\r\n                        onChangePageClick(page)\r\n                    }\r\n\r\n                    return <span key={page}\r\n                                 className={classNameForPage}\r\n                                 onClick={onSpanClick}>{page}</span>\r\n                })}\r\n\r\n            {portionCount > portionNumber &&\r\n            <SuperButton style={styleForBtn}\r\n                         onClick={onButtonNextPageClick}>&#8594;</SuperButton>}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Paginator;","import {CardType} from \"../dal/cards/types\";\r\n\r\n\r\nexport const convertDateFormat = (dateAsString: string) => {\r\n    let date = new Date(dateAsString)\r\n    return `${addZeroToDate(date.getDate())}.${addZeroToDate(date.getMonth() + 1)}.${date.getFullYear()}`\r\n}\r\n\r\nexport const addZeroToDate = (date: number) => {\r\n    if (date.toString().length === 1) {\r\n        return `0${date}`\r\n    }\r\n    return date\r\n}\r\n\r\nexport const getCard = (cards: CardType[]) => {\r\n    const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n    const rand = Math.random() * sum;\r\n    const res = cards.reduce((acc: { sum: number, id: number}, card, i) => {\r\n            const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n            return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n        }\r\n        , {sum: 0, id: -1});\r\n    console.log('test: ', sum, rand, res)\r\n\r\n    return cards[res.id + 1];\r\n}","import React, {FC, memo, MouseEvent} from \"react\";\r\nimport style from \"../UniversalTable.module.scss\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport SuperButton from \"../../../../Components/TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {RootReducerType} from \"../../../../store/store\";\r\nimport {COMPONENT_NAME} from \"../../../../enum/ComponentName\";\r\n\r\n\r\ntype TableRowT={\r\n    item:{\r\n        name?: string\r\n        cardsCount?: number\r\n        updated: string\r\n        created?: string\r\n        user_id?: string\r\n        _id: string\r\n        question?: string\r\n        answer?: string\r\n        grade?: number\r\n    }\r\n    component: string\r\n    onDeleteButtonClick?: (id: string) => void\r\n    onUpdateButtonClick?: (id: string) => void\r\n    onLearnPackClick?: (packId: string) => void\r\n}\r\nexport const TableRow:FC<TableRowT>=memo(({item,component,onDeleteButtonClick,onUpdateButtonClick,\r\n                                              onLearnPackClick})=>{\r\n\r\n    const navigate = useNavigate()\r\n    const userId = useSelector<RootReducerType, string>(state => state.profile._id)\r\n\r\n    const CONDITION_FOR_DISABLE_BUTTON = item.user_id !== userId\r\n\r\n    const onLearnButtonClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        e.stopPropagation()\r\n        onLearnPackClick!(item._id)\r\n    }\r\n\r\n    const onDeleteModalCallClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        e.stopPropagation()\r\n        onDeleteButtonClick!(item._id)\r\n    }\r\n\r\n    const onOpenCardClick = () => {\r\n        if ((item.cardsCount! > 0) || (item.user_id === userId)) {\r\n            navigate(`/cards/${item._id}`)\r\n        }\r\n    }\r\n\r\n    const onUpdateModalCallClick = (e: MouseEvent<HTMLButtonElement>) => {\r\n        e.stopPropagation()\r\n        onUpdateButtonClick!(item._id)\r\n    }\r\n\r\n    return(\r\n        <tr onClick={onOpenCardClick}>\r\n            {Object.entries(item).map(([key, value], i) => {\r\n                const conditionForHidingCell = (key !== \"user_id\") && (key !== \"_id\")\r\n                if (conditionForHidingCell) {\r\n                    return (\r\n                        <td key={i}><div className={style.cell}>{value}</div></td>\r\n                    )\r\n                }\r\n            })}\r\n            <td className={style.btns}>\r\n                <SuperButton disabled={CONDITION_FOR_DISABLE_BUTTON}\r\n                             onClick={onDeleteModalCallClick}>Delete</SuperButton>\r\n                <SuperButton\r\n                    disabled={CONDITION_FOR_DISABLE_BUTTON} onClick={onUpdateModalCallClick}>\r\n                    Edit</SuperButton>\r\n                {component === COMPONENT_NAME.PACKS &&\r\n                <SuperButton onClick={onLearnButtonClick} disabled={item.cardsCount! === 0}>Learn</SuperButton>}</td>\r\n        </tr>\r\n    )\r\n})","export enum MODAL_ACTION {\r\n    LEARN = 'learn',\r\n    ADD = 'add',\r\n    DELETE = 'delete',\r\n    UPDATE = 'update',\r\n    EMPTY = '',\r\n}","import React, {memo} from 'react';\r\nimport style from './UniversalTable.module.scss'\r\nimport {TableRow} from \"./TableRow/TableRow\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\n\r\n\r\ntype TablePropsType = {\r\n    component: string\r\n    rows: Array<{\r\n        name?: string\r\n        cardsCount?: number\r\n        updated: string\r\n        created?: string\r\n        user_id?: string\r\n        _id: string\r\n        question?: string\r\n        answer?: string\r\n        grade?: number\r\n    }>\r\n\r\n    headers: {\r\n        name?: string\r\n        cardsCount?: string\r\n        updated: string\r\n        created?: string\r\n        actions?: string\r\n        question?: string\r\n        answer?: string\r\n        grade?: string\r\n\r\n    }\r\n    onSetSortingClick: (headerName: string) => void\r\n    onDeleteButtonClick?: (id: string) => void\r\n    onUpdateButtonClick?: (id: string) => void\r\n    onLearnPackClick?: (packId: string) => void\r\n}\r\n\r\nexport const UniversalTable = memo(({\r\n                                        rows, headers, onSetSortingClick, component,\r\n                                        onDeleteButtonClick, onUpdateButtonClick, onLearnPackClick\r\n                                    }: TablePropsType) => {\r\n\r\n        const titlesOfHeaders = Object.entries(headers)\r\n\r\n        return (\r\n            <table className={style.table}>\r\n                <thead>\r\n                <tr>\r\n                    {titlesOfHeaders.map(([key, value], i) => {\r\n\r\n                            const classNameForSpanValue = key !== 'actions' ? style.value : EMPTY_STRING\r\n\r\n                            const onTitleClick = () => {\r\n                                onSetSortingClick(key)\r\n                            }\r\n\r\n                            return (\r\n                                <th key={i} onClick={onTitleClick} className={style.tableHeader}>\r\n                                    <span className={classNameForSpanValue}>{value}</span></th>)\r\n                        }\r\n                    )}\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n\r\n                {rows.map((row) => {\r\n                    return <TableRow key={row._id} item={row} component={component}\r\n                                     onDeleteButtonClick={onDeleteButtonClick}\r\n                                     onUpdateButtonClick={onUpdateButtonClick} onLearnPackClick={onLearnPackClick}/>\r\n                })}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n)\r\n\r\n\r\n","import {FC, memo, ReactElement} from \"react\";\r\nimport s from './Modal.module.scss'\r\nimport SuperButton from \"../../../Components/TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {Nullable} from \"../../../types/Nullable\";\r\nimport {modalActionType} from \"./ModalContainer/ModalContainer\";\r\nimport {MODAL_ACTION} from \"../../../enum/ModalAction\";\r\n\r\n\r\nexport type ModalPropsType = {\r\n    modalBody?: {\r\n        title: string\r\n        btn: {\r\n            title: string\r\n            callback: () => void\r\n        }\r\n    }\r\n    onCloseModalButtonClick: () => void\r\n    isActivePrevBtn: boolean\r\n    modalAction: modalActionType\r\n    onNextCardButtonClick: () => void\r\n}\r\n\r\nexport const Modal: FC<ModalPropsType> = memo((\r\n    {\r\n        children,\r\n        modalBody,\r\n        onCloseModalButtonClick,\r\n        modalAction,\r\n        onNextCardButtonClick,\r\n        isActivePrevBtn\r\n    }\r\n): Nullable<ReactElement> => {\r\n\r\n    const conditionForDisabledPrevBtn = modalAction === MODAL_ACTION.LEARN ? !isActivePrevBtn : false\r\n\r\n    if (modalBody) {\r\n        return (\r\n            <div className={s.modalWrapper}>\r\n                <div className={s.modalBlock}>\r\n                    <h3>\r\n                        {modalBody.title}\r\n                    </h3>\r\n                    {children}\r\n\r\n                    <div className={s.buttons}>\r\n                        <SuperButton onClick={modalBody.btn.callback} className={s.btn}\r\n                                     disabled={conditionForDisabledPrevBtn}>\r\n                            {modalBody.btn.title}</SuperButton>\r\n                        {modalAction === MODAL_ACTION.LEARN &&\r\n                        <SuperButton onClick={onNextCardButtonClick}>\r\n                            Next</SuperButton>}\r\n                        <SuperButton onClick={onCloseModalButtonClick} className={s.btn}>Cancel</SuperButton>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return null\r\n})","export enum MODAL_ENTITY {\r\n    PACK = 'pack',\r\n    CARD = 'card',\r\n    EMPTY = '',\r\n}","import {instance} from \"../apiConfig\";\r\nimport {\r\n    addNewCardPayloadType,\r\n    getCardsQueryParamsType,\r\n    getCardsResponseType,\r\n    updateCardPayloadType,\r\n    updateCardRatingType\r\n} from \"./types\";\r\n\r\nexport const cardsAPI = {\r\n    getCards(getCardsQueryParams: getCardsQueryParamsType) {\r\n        return instance.get<getCardsResponseType>(`cards/card`, {params: getCardsQueryParams})\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n\r\n    addCard(card:addNewCardPayloadType){\r\n        return instance.post(`cards/card`, card)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    deleteCard(id:string){\r\n        return instance.delete(`cards/card/?id=${id}`)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    updateCard(card:updateCardPayloadType){\r\n        return instance.put(`cards/card`,card)\r\n            .then(res => {\r\n                return res.data\r\n            })\r\n    },\r\n    updateCardGrade(grade: number,card_id: string){\r\n\r\n        return instance.put<updateCardRatingType>(`cards/grade`, {grade,card_id})\r\n            .then(res => {\r\n                return res.data.updatedGrade\r\n            })\r\n    },\r\n}","import {getCardsQueryParamsType, updateCardType} from \"../../dal/cards/types\";\r\nimport {AppDispatch, ThunkType} from \"../store\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {cardsAPI} from \"../../dal/cards/cardsAPI\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {setCardsAC, setCardsRatingAC} from \"../reducers/cards-reducer\";\r\n\r\nexport const getCardsTC = (getCardsQueryParams: getCardsQueryParamsType) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        dispatch(setAppStatusAC(STATUS.LOADING))\r\n        const data = await cardsAPI.getCards(getCardsQueryParams)\r\n        dispatch(setCardsAC(data))\r\n        dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n    } catch (err) {\r\n        catchErrorHandler(dispatch, err)\r\n    }\r\n}\r\n\r\nexport const addCardTC = (cardsPack_id: string, question: string, answer: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            const card = {\r\n                cardsPack_id,\r\n                question,\r\n                answer,\r\n            }\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await cardsAPI.addCard({card})\r\n            await dispatch(getCardsTC({cardsPack_id}))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const deleteCardTC = (cardsPack_id: string, id: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await cardsAPI.deleteCard(id)\r\n            await dispatch(getCardsTC({cardsPack_id}))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const updateCardTC = (cardsPack_id: string, {_id, ...rest}: updateCardType): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            const card = {\r\n                _id,\r\n                ...rest\r\n            }\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await cardsAPI.updateCard({card})\r\n            await dispatch(getCardsTC({cardsPack_id}))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const updateCardRatingTC = (newGrade: number, card_id: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            let {_id, grade, shots} = await cardsAPI.updateCardGrade(newGrade, card_id)\r\n            dispatch(setCardsRatingAC(_id, grade, shots))\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }","import {FC, memo, useCallback, useState} from \"react\";\r\nimport s from './LearnPackModal.module.scss'\r\nimport SuperButton from \"../../../../Components/TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateCardRatingTC} from \"../../../../store/thunks/cards\";\r\n\r\ntype LearnPackModalT = {\r\n    answer: string\r\n    activeCardId: string\r\n    onNextCardButtonClick: () => void\r\n}\r\n\r\nexport const LearnPackModal: FC<LearnPackModalT> = memo(({answer, activeCardId, onNextCardButtonClick}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const [isAnswerShow, setIsAnswerShow] = useState<boolean>(false)\r\n\r\n    const BtnTitle = {\r\n        Hide: 'Hide',\r\n        Show: 'Show'\r\n    }\r\n    const BtnShowTitle = isAnswerShow ? BtnTitle.Hide : BtnTitle.Show\r\n\r\n    const onToggleShowAnswerClick = useCallback(() => {\r\n        setIsAnswerShow(!isAnswerShow)\r\n    }, [isAnswerShow])\r\n\r\n    const onRateButtonClick = useCallback((grade: number) => {\r\n        dispatch(updateCardRatingTC(grade, activeCardId))\r\n        onNextCardButtonClick()\r\n    }, [dispatch, activeCardId, onNextCardButtonClick])\r\n\r\n    const markButtons = [\r\n        {name: 'I know', callback: () => onRateButtonClick(5),},\r\n        {name: 'I know part of the answer', callback: () => onRateButtonClick(4),},\r\n        {name: `Maybe I know`, callback: () => onRateButtonClick(3),},\r\n        {name: 'I\\'m not sure', callback: () => onRateButtonClick(2),},\r\n        {name: `I don't know`, callback: () => onRateButtonClick(1),},\r\n    ]\r\n\r\n    return (\r\n        <div className={s.learnPackModalWrapper}>\r\n            <div className={s.answerBlock}>\r\n                Answer\r\n                <SuperButton onClick={onToggleShowAnswerClick} className={s.btn}>{BtnShowTitle}</SuperButton>\r\n                {isAnswerShow && <span className={s.answer}>{answer}</span>}\r\n            </div>\r\n\r\n            <div className={s.buttonsBlock}>\r\n                {markButtons.map(({name, callback}, i) => {\r\n                    return <SuperButton key={i} onClick={callback}>{name}</SuperButton>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {instance} from \"../apiConfig\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {addNewPackPayloadType, getPacksQueryParamsType, getPacksResponseType, updatePackPayloadType} from \"./types\";\r\n\r\nexport const packsAPI = {\r\n    getPacks(getPacksQueryParams: Nullable<getPacksQueryParamsType>) {\r\n        return instance.get<getPacksResponseType>(`cards/pack`, {params: getPacksQueryParams})\r\n            .then(res => res.data)\r\n    },\r\n    addPack(cardsPack: addNewPackPayloadType) {\r\n        return instance.post(`cards/pack`, cardsPack)\r\n            .then(res => res.data)\r\n    },\r\n    deletePack(packId: string) {\r\n       return instance.delete(`cards/pack/?id=${packId}`)\r\n            .then(res => res.data)\r\n    },\r\n    updatePack(cardsPack: updatePackPayloadType) {\r\n        return instance.put(`cards/pack`, cardsPack)\r\n            .then(res => res.data)\r\n    },\r\n}","import {AppDispatch, RootReducerType, ThunkType} from \"../store\";\r\nimport {getPacksQueryParamsType} from \"../../dal/packs/types\";\r\nimport {packsAPI} from \"../../dal/packs/packsAPI\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {setPacksAC} from \"../reducers/packs-reducer\";\r\nimport {pageCountNumber} from \"../../constants\";\r\n\r\nexport const getPacksTC = () => async (dispatch: AppDispatch, getState: () => RootReducerType) => {\r\n    const {min, max, page, user_id, sortPacks, packName} = getState().packs\r\n    let paramsForQuery: getPacksQueryParamsType = {\r\n        min,\r\n        max,\r\n        sortPacks,\r\n        page,\r\n        pageCount: pageCountNumber,\r\n        user_id,\r\n        packName\r\n    }\r\n\r\n    try {\r\n        const data = await packsAPI.getPacks(paramsForQuery)\r\n        dispatch(setAppStatusAC(STATUS.LOADING))\r\n        dispatch(setPacksAC(data))\r\n\r\n    } catch (err) {\r\n        catchErrorHandler(dispatch, err)\r\n    } finally {\r\n        dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n    }\r\n}\r\n\r\nexport const addPackTC = (name: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            const cardsPack = {\r\n                name,\r\n            }\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await packsAPI.addPack({cardsPack})\r\n            await dispatch(getPacksTC())\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const deletePackTC = (packId: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await packsAPI.deletePack(packId)\r\n            await dispatch(getPacksTC())\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }\r\n\r\nexport const updatePackTC = (packId: string, newName: string): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            const cardsPack = {\r\n                _id: packId,\r\n                name: newName,\r\n            }\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            await packsAPI.updatePack({cardsPack})\r\n            await dispatch(getPacksTC())\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }","import {FC, memo, useCallback, useEffect, useState} from \"react\";\r\nimport {Modal} from \"../Modal\";\r\nimport SuperInputText from \"../../../../Components/TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport s from './ModalContainer.module.scss'\r\nimport {setModalTypeAC} from \"../../../../store/reducers/modal-reducer\";\r\nimport {RootReducerType} from \"../../../../store/store\";\r\n\r\nimport {useParams} from \"react-router-dom\";\r\nimport {CardType} from \"../../../../dal/cards/types\";\r\n\r\nimport {PackType} from \"../../../../dal/packs/types\";\r\nimport {LearnPackModal} from \"../LearnPackModal/LearnPackModal\";\r\nimport {getCard} from \"../../../../utils/handles\";\r\nimport {EMPTY_STRING} from \"../../../../constants\";\r\nimport {addCardTC, deleteCardTC, updateCardTC} from \"../../../../store/thunks/cards\";\r\nimport {MODAL_ACTION} from \"../../../../enum/ModalAction\";\r\nimport {MODAL_ENTITY} from \"../../../../enum/ModalEntity\";\r\nimport {addPackTC, deletePackTC, updatePackTC} from \"../../../../store/thunks/packs\";\r\n\r\nexport type modalActionType = 'delete' | 'add' | 'update' | 'learn' | ''\r\nexport type modalEntityType = 'card' | 'pack' | ''\r\ntype ModalContainerPropsType = {\r\n    pack?: PackType\r\n}\r\n\r\nexport const ModalContainer: FC<ModalContainerPropsType> = memo(({pack}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const params = useParams<'id'>()\r\n    const cardsPack_id = params.id\r\n\r\n    const id = useSelector<RootReducerType, string>(state => state.modals.id)\r\n    const cards = useSelector<RootReducerType, Array<CardType>>(state => state.cards.cards)\r\n    const modalAction = useSelector<RootReducerType, modalActionType>(state => state.modals.modalAction)\r\n    const modalEntity = useSelector<RootReducerType, modalEntityType>(state => state.modals.modalEntity)\r\n\r\n    const card = cards.find(card => card._id === id)\r\n\r\n    const questionInitialValue = card ? card.question : EMPTY_STRING\r\n    const answerInitialValue = card ? card.answer : EMPTY_STRING\r\n    const nameInitialValue = pack ? pack.name : EMPTY_STRING\r\n\r\n\r\n    const [name, setName] = useState<string>(nameInitialValue)\r\n    const [question, setQuestion] = useState<string>(questionInitialValue)\r\n    const [answer, setAnswer] = useState<string>(answerInitialValue)\r\n    const [activeCardIndex, setActiveCardIndex] = useState<number>(0)\r\n    const [isActivePrevBtn, setIsActivePrevBtn] = useState<boolean>(true)\r\n    const [prevCards, setIsPrevCards] = useState<CardType[]>([])\r\n    const [activeCard, setActiveCard] = useState(cards[0])\r\n\r\n    let questionForLearn = activeCard ? activeCard.question : EMPTY_STRING\r\n    let answerForLearn = activeCard ? activeCard.answer : EMPTY_STRING\r\n    let activeCardId = activeCard ? activeCard._id : EMPTY_STRING\r\n\r\n    const limitLength = prevCards.length - 1\r\n    const conditionForExecution = (prevCards.length > 0) && (activeCardIndex < limitLength)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (activeCardIndex === 0) {\r\n            setIsActivePrevBtn(false)\r\n        }\r\n    }, [activeCardIndex])\r\n\r\n    const onCloseModalButtonClick = useCallback(() => {\r\n        dispatch(setModalTypeAC(MODAL_ACTION.EMPTY, MODAL_ENTITY.EMPTY))\r\n    }, [dispatch])\r\n\r\n    const onSavePackButtonClick = useCallback(() => {\r\n        dispatch(addPackTC(name))\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, name,onCloseModalButtonClick])\r\n\r\n    const onSaveCardButtonClick = useCallback(() => {\r\n        dispatch(addCardTC(id, question, answer))\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, id, question, answer,onCloseModalButtonClick])\r\n\r\n    const onDeletePackButtonClick = useCallback(() => {\r\n        dispatch(deletePackTC(id))\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, id,onCloseModalButtonClick])\r\n\r\n    const onDeleteCardButtonClick = useCallback(() => {\r\n        if (cardsPack_id) {\r\n            dispatch(deleteCardTC(cardsPack_id, id))\r\n        }\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, cardsPack_id, id,onCloseModalButtonClick])\r\n\r\n    const onUpdatePackClick = useCallback(() => {\r\n        dispatch(updatePackTC(id, name))\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, id, name,onCloseModalButtonClick])\r\n\r\n    const onUpdateCardClick = useCallback(() => {\r\n        if (cardsPack_id) {\r\n            dispatch(updateCardTC(cardsPack_id, {_id: id, question, answer}))\r\n        }\r\n        onCloseModalButtonClick()\r\n    }, [dispatch, cardsPack_id, id, question, answer,onCloseModalButtonClick])\r\n\r\n    const onNextCardButtonClick = useCallback(() => {\r\n        if (!isActivePrevBtn) {\r\n            setIsActivePrevBtn(true)\r\n        }\r\n        let newCard = getCard(cards)\r\n        setActiveCard(newCard)\r\n        setIsPrevCards([newCard, ...prevCards])\r\n    }, [cards, isActivePrevBtn, prevCards])\r\n\r\n    const onPrevCardButtonClick = useCallback(() => {\r\n            if (conditionForExecution) {\r\n                setActiveCard(prevCards[activeCardIndex])\r\n                setActiveCardIndex(activeCardIndex + 1)\r\n                return\r\n            }\r\n            setIsActivePrevBtn(false)\r\n        }\r\n        , [activeCard, activeCardIndex, prevCards, conditionForExecution])\r\n\r\n\r\n\r\n\r\n    const modals = {\r\n        [MODAL_ACTION.ADD]: {\r\n            title: `Add new ${modalEntity}`, btn: {\r\n                title: 'Save', callback:\r\n                    modalEntity === MODAL_ENTITY.CARD ? onSaveCardButtonClick : onSavePackButtonClick\r\n            }\r\n        },\r\n\r\n        [MODAL_ACTION.DELETE]: {\r\n            title: `Delete ${modalEntity}`, btn: {\r\n                title: 'Delete', callback:\r\n                    modalEntity === MODAL_ENTITY.PACK ? onDeletePackButtonClick : onDeleteCardButtonClick\r\n            }\r\n        },\r\n\r\n        [MODAL_ACTION.UPDATE]: {\r\n            title: `Update ${modalEntity}`, btn: {\r\n                title: 'Update', callback:\r\n                    modalEntity === MODAL_ENTITY.PACK ? onUpdatePackClick : onUpdateCardClick\r\n            }\r\n        },\r\n\r\n        [MODAL_ACTION.LEARN]: {\r\n            title: ` ${questionForLearn}`, btn: {\r\n                title: 'Prev', callback: onPrevCardButtonClick\r\n            }\r\n        },\r\n    }\r\n\r\n\r\n    let modalBody;\r\n    if (modalAction === MODAL_ACTION.ADD) {\r\n        modalBody = modals.add\r\n    }\r\n    if (modalAction === MODAL_ACTION.DELETE) {\r\n        modalBody = modals.delete\r\n    }\r\n\r\n    if (modalAction === MODAL_ACTION.UPDATE) {\r\n        modalBody = modals.update\r\n    }\r\n    if (modalAction === MODAL_ACTION.LEARN) {\r\n        modalBody = modals.learn\r\n    }\r\n\r\n    const conditionForUpdateAddCardModal = (modalEntity === MODAL_ENTITY.CARD) && (modalAction !== MODAL_ACTION.DELETE)\r\n    const conditionActivateInputName = (modalEntity === MODAL_ENTITY.PACK && (modalAction === MODAL_ACTION.ADD\r\n        || modalAction === MODAL_ACTION.UPDATE))\r\n\r\n    return (\r\n        <Modal modalBody={modalBody} onCloseModalButtonClick={onCloseModalButtonClick}\r\n               onNextCardButtonClick={onNextCardButtonClick} modalAction={modalAction}\r\n               isActivePrevBtn={isActivePrevBtn}>\r\n\r\n            {modalAction === MODAL_ACTION.DELETE &&\r\n            <span className={s.span}>Do you really want to remove this `&{modalEntity}`?\r\n                <br/>All cards will be excluded from this course</span>}\r\n\r\n            {conditionActivateInputName &&\r\n            <SuperInputText className={s.input} value={name} onChangeText={setName} placeholder={'Title'}/>}\r\n\r\n            {conditionForUpdateAddCardModal &&\r\n            <>\r\n                <SuperInputText className={s.input} value={question} onChangeText={setQuestion}\r\n                                placeholder={'Your question'}/>\r\n                <SuperInputText className={s.input} value={answer} onChangeText={setAnswer}\r\n                                placeholder={'Your answer'}/>\r\n            </>}\r\n            {modalAction === MODAL_ACTION.LEARN && <LearnPackModal answer={answerForLearn} activeCardId={activeCardId}\r\n                                                                   onNextCardButtonClick={onNextCardButtonClick}/>\r\n            }\r\n        </Modal>\r\n    )\r\n})","import {FC, memo, ReactElement} from \"react\";\r\n\r\ntype RatingProps = {\r\n    grade: number\r\n}\r\n\r\n\r\nexport const Rating: FC<RatingProps> = memo(({grade}) => {\r\n    const STAR_COUNT = 5\r\n    let rating: ReactElement[] = []\r\n\r\n    for (let i = 0; i < STAR_COUNT; i++) {\r\n        rating = [...rating, <Star selected={grade > i}/>]\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {rating}\r\n        </div>\r\n    )\r\n})\r\n\r\ntype starPropsType = {\r\n    selected: boolean\r\n}\r\n\r\nexport const Star = memo(({selected}: starPropsType) => {\r\n    return (\r\n        <span>{selected ? <b>Star </b> : \"Star \"}</span>\r\n    )\r\n})","import React, {FC, memo, useCallback, useEffect, useMemo} from 'react';\r\nimport style from './Cards.module.scss'\r\nimport Pagination from \"../../features/cards/pagination/Pagination\";\r\nimport {convertDateFormat} from \"../../utils/handles\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {changePageCardsAC, setSortingFilterCards} from \"../../store/reducers/cards-reducer\";\r\nimport {UniversalTable} from \"../../features/cards/table/UniversalTable\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport SuperButton from \"../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {CardType} from \"../../dal/cards/types\";\r\nimport {setAppStatusAC} from \"../../store/reducers/app-reducer\";\r\nimport {\r\n    modalActionType,\r\n    ModalContainer,\r\n    modalEntityType\r\n} from \"../../common/components/Modal/ModalContainer/ModalContainer\";\r\nimport {Rating} from \"./Rating/Rating\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {getCardsTC} from \"../../store/thunks/cards\";\r\nimport {MODAL_ACTION} from \"../../enum/ModalAction\";\r\nimport {COMPONENT_NAME} from \"../../enum/ComponentName\";\r\n\r\n\r\ntype CardsT = {\r\n    setModalData: (modalAction: modalActionType, id: string) => void\r\n}\r\n\r\nexport const Cards: FC<CardsT> = memo(({setModalData}) => {\r\n\r\n        const dispatch = useDispatch()\r\n\r\n        const params = useParams<'id'>()\r\n        const cardsPack_id = params.id\r\n\r\n        const navigate = useNavigate()\r\n\r\n        const cards = useSelector<RootReducerType, Array<CardType>>(state => state.cards.cards)\r\n        const sortCards = useSelector<RootReducerType, string>((state) => state.cards.sortCards)\r\n        const totalItemCount = useSelector<RootReducerType, number>((state) => state.cards.cardsTotalCount)\r\n        const pageCount = useSelector<RootReducerType, number>((state) => state.cards.pageCount)\r\n        const currentPage = useSelector<RootReducerType, number>((state) => state.cards.page)\r\n        const modalEntity = useSelector<RootReducerType, modalEntityType>(state => state.modals.modalEntity)\r\n\r\n        const PORTION_SIZE = 10\r\n        const headersForTable = {\r\n            question: 'Question', answer: 'Answer',\r\n            updated: 'Last updated', grade: 'Grade', actions: 'Actions'\r\n        }\r\n        const cardsForTable = useMemo(() => {\r\n                return cards.map(({\r\n                                      question, answer,\r\n                                      updated, grade, _id, user_id\r\n                                  }) => {\r\n                        updated = convertDateFormat(updated)\r\n                        let rating = <Rating grade={grade}/>\r\n                        return {question, answer, updated, rating, _id, user_id}\r\n                    }\r\n                )\r\n            }\r\n            , [cards])\r\n\r\n        useEffect(() => {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n\r\n            let idOfTimeout = setTimeout(() => {\r\n                if (cardsPack_id) {\r\n                    dispatch(getCardsTC({cardsPack_id, page: currentPage, sortCards}))\r\n                }\r\n            }, 1000)\r\n\r\n            return () => {\r\n                clearTimeout(idOfTimeout)\r\n            }\r\n        }, [dispatch, currentPage, sortCards])\r\n\r\n\r\n        const handleSetSortingClick = useCallback((headerName: string) => {\r\n            dispatch(setSortingFilterCards(sortCards[0] === '0' ? `1${headerName}`  : `0${headerName}`))\r\n        }, [dispatch, sortCards])\r\n\r\n        const handleChangePageClick = useCallback((page: number) => {\r\n                dispatch(changePageCardsAC(page))},\r\n            [dispatch])\r\n\r\n        const onTitleGoBackClick = () => {\r\n            navigate(-1)\r\n        }\r\n\r\n        const handleAddCardButtonClick = useCallback(() => {\r\n            if (cardsPack_id) {\r\n                setModalData(MODAL_ACTION.ADD, cardsPack_id)\r\n            }\r\n        }, [setModalData, cardsPack_id])\r\n\r\n\r\n        const handleDeleteButtonClick = useCallback((_id: string) => {\r\n            setModalData(MODAL_ACTION.DELETE, _id)\r\n        }, [setModalData])\r\n\r\n        const handleUpdateCardClick = useCallback((_id: string) => {\r\n            setModalData(MODAL_ACTION.UPDATE, _id)\r\n        }, [setModalData])\r\n\r\n        if (!cards) {\r\n            return <></>\r\n        }\r\n        return (\r\n            <div className={style.wrapper}>\r\n                <h2 onClick={onTitleGoBackClick} className={style.cursor}>&#8592; Pack Name</h2>\r\n                <SuperButton onClick={handleAddCardButtonClick} className={style.btn}>Add new card</SuperButton>\r\n                {modalEntity && <ModalContainer />}\r\n\r\n                <UniversalTable rows={cardsForTable} headers={headersForTable}\r\n                                onSetSortingClick={handleSetSortingClick} component={COMPONENT_NAME.CARDS}\r\n                                onDeleteButtonClick={handleDeleteButtonClick}\r\n                                onUpdateButtonClick={handleUpdateCardClick}/>\r\n                <Pagination totalItemCount={totalItemCount}\r\n                            pageCount={pageCount}\r\n                            currentPage={currentPage}\r\n                            onChangePageClick={handleChangePageClick}\r\n                            portionSize={PORTION_SIZE}/>\r\n            </div>\r\n        )\r\n    }\r\n)","import React, { ComponentType } from \"react\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {PATH} from \"../../enum/Path\";\r\n\r\nexport function withRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    let RedirectComponent = (props:T) => {\r\n        let isLoggedIn = useSelector<RootReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n        if (!isLoggedIn) {\r\n            return <Navigate to={PATH.LOGIN}/>\r\n        }\r\n        return <Component {...props}/>\r\n    }\r\n    return RedirectComponent\r\n}","import SuperInputText from \"../../../Components/TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport {ChangeEvent, FC, KeyboardEvent, memo, useState} from \"react\";\r\nimport style from './EditableSpan.module.scss'\r\n\r\ntype editableSpanPropsType = {\r\n    title: string\r\n    updateTitle: (newTitle: string) => void\r\n}\r\nexport const EditableSpan: FC<editableSpanPropsType> = memo(({title, updateTitle}) => {\r\n\r\n    let [isEdit, toggleEdit] = useState(true)\r\n    let [name, setName] = useState(title)\r\n\r\n    const onActivateInputModeDblClick = () => {\r\n        toggleEdit(false)\r\n    }\r\n\r\n    const onInputActivateSpanModeBlur = () => {\r\n        toggleEdit(true)\r\n        updateTitle(name)\r\n    }\r\n\r\n    const onInputActivateModePress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            toggleEdit(true)\r\n            updateTitle(name)\r\n        }\r\n    }\r\n\r\n    const onInputUpdateTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        isEdit ?\r\n            <span onDoubleClick={onActivateInputModeDblClick} className={style.span}>{name}</span>\r\n            : <SuperInputText value={name} onBlur={onInputActivateSpanModeBlur} autoFocus\r\n                              onChange={onInputUpdateTitleChange}\r\n                              className={style.input} onKeyPress={onInputActivateModePress}/>\r\n    )\r\n})","import {instance} from \"../apiConfig\";\r\nimport {updateProfilePayloadtype, updateProfileResponseType} from \"./types\";\r\n\r\n\r\nexport const profileAPI = {\r\n    updateProfile(payload: updateProfilePayloadtype) {\r\n        return instance.put<updateProfileResponseType>(`auth/me`, payload)\r\n            .then(res => {\r\n                return res.data.updatedUser\r\n            })\r\n    },\r\n   /* updateAvatar()*/\r\n}","import {AppDispatch} from \"../store\";\r\nimport {setAppStatusAC} from \"../reducers/app-reducer\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {profileAPI} from \"../../dal/profile/profileAPI\";\r\nimport {catchErrorHandler} from \"../../utils/error-utils\";\r\nimport {setProfileAC} from \"../reducers/profile-reducer\";\r\n\r\nexport const updateProfileTC = (name: string,avatar:string) =>\r\n    async (dispatch:AppDispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            let updatedProfile = await profileAPI.updateProfile({name,avatar})\r\n            dispatch(setProfileAC(updatedProfile))\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n        } catch (err) {\r\n            catchErrorHandler(dispatch, err)\r\n        }\r\n    }","import React, {ChangeEvent, useState, KeyboardEvent, useCallback} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {withRedirect} from \"../../common/hoc/withRedirect\";\r\nimport style from './Profile.module.scss'\r\nimport SuperInputText from \"../TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport {EditableSpan} from \"../../common/components/EditableSpan/EditableSpan\";\r\nimport {EMPTY_STRING} from \"../../constants\";\r\nimport {updateProfileTC} from \"../../store/thunks/profile\";\r\n\r\n\r\nconst Profile = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const avatar = useSelector<RootReducerType, string>(state => state.profile.avatar)\r\n    const email = useSelector<RootReducerType, string>(state => state.profile.email)\r\n    const name = useSelector<RootReducerType, string>(state => state.profile.name)\r\n    const publicCardPacksCount = useSelector<RootReducerType, number>(state => state.profile.publicCardPacksCount)\r\n\r\n    const [avatarURL, setAvatarURL] = useState<string>(EMPTY_STRING)\r\n    const [isInputActive, setIsInputActive] = useState<boolean>(false)\r\n\r\n    const onActivateInputForURLClick = () => {\r\n        setIsInputActive(true)\r\n    }\r\n\r\n    const onInputForURLChange =useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setAvatarURL(e.currentTarget.value)\r\n    },[])\r\n\r\n    const onAddNewPhotoClick = useCallback(() => {\r\n        dispatch(updateProfileTC(name, avatarURL))\r\n        setIsInputActive(false)\r\n        setAvatarURL(EMPTY_STRING)\r\n    },[dispatch,name,avatarURL])\r\n\r\n    const onInputForURLKeyPress = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onAddNewPhotoClick()\r\n        }\r\n    },[onAddNewPhotoClick])\r\n\r\n    const onUpdateTitle = (newTitle: string) => {\r\n        if (newTitle !== name) {\r\n            dispatch(updateProfileTC(newTitle, avatarURL))\r\n        }\r\n    }\r\n\r\n    const onCloseInputBlur = useCallback(() => {\r\n        setIsInputActive(false)\r\n    }, [setIsInputActive])\r\n\r\n    return (\r\n        <div className={style.profileWrapper}>\r\n            <div className={style.avatarBlock}>\r\n\r\n                <div className={style.avatarWrapper}>\r\n                    <div className={style.tooltip} onClick={onActivateInputForURLClick}>Change Photo</div>\r\n                    <img alt='avatar' className={style.avatar} src={avatar}/>\r\n                </div>\r\n\r\n                {isInputActive &&\r\n\r\n                <div className={style.inputForURL}>\r\n                    <SuperInputText className={style.input} value={avatarURL}\r\n                                    onChange={onInputForURLChange}\r\n                                    onKeyPress={onInputForURLKeyPress}\r\n                                    autoFocus placeholder={'Add URL'}\r\n                                    onBlur={onCloseInputBlur}/>\r\n\r\n                    <span className={style.addPhotoURlBtn} onClick={onAddNewPhotoClick}/></div>}\r\n            </div>\r\n\r\n            <div className={style.profileInfo}>\r\n                <EditableSpan title={name} updateTitle={onUpdateTitle}/>\r\n\r\n                <div className={style.info}>\r\n                    <span><b>Email</b>: {email}</span>\r\n                    <span><b>Count of cards</b>: {publicCardPacksCount}</span>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRedirect(Profile)\r\n\r\n\r\n","import { useEffect} from \"react\";\r\n\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\nexport const UseSetTimeoutEffect = (callBack: () => void, dependencies:any, ms: number) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        console.log('useeffSet')\r\n        let idOfTimeout = setTimeout(() => {\r\n            callBack()\r\n        }, ms)\r\n        return () => {\r\n\r\n            clearTimeout(idOfTimeout)\r\n        }\r\n    }, [dispatch,dependencies])\r\n}","import Box from '@mui/material/Box';\r\nimport Slider from '@mui/material/Slider';\r\nimport {FC, memo, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport s from './RangeSlider.module.scss'\r\nimport {UseSetTimeoutEffect} from \"../../../common/hooks/customUseEffect\";\r\n\r\ntype SliderPropsType = {\r\n    minValueForRangeSlider: number\r\n    maxValueForRangeSlider: number\r\n    onChangeCardsCountsChange: (minValueForRangeSlider: number, maxValueForRangeSlider: number) => void\r\n}\r\n\r\n\r\nexport const RangeSlider:FC<SliderPropsType> = memo(({minValueForRangeSlider,maxValueForRangeSlider,\r\n                                                         onChangeCardsCountsChange}) => {\r\n\r\n        const maxCardsCount = useSelector<RootReducerType, number>((state) => state.packs.maxCardsCount)\r\n        const minCardsCount = useSelector<RootReducerType, number>((state) => state.packs.minCardsCount)\r\n\r\n        const [value, setValue] = useState<number[]>([minValueForRangeSlider, maxValueForRangeSlider]);\r\n\r\n        const changeCardsCount = () => {\r\n            onChangeCardsCountsChange(value[0], value[1])\r\n        }\r\n\r\n        UseSetTimeoutEffect(changeCardsCount, value, 500)\r\n\r\n        const onSliderChange = (event: Event, newValue: number | number[]) => {\r\n            setValue(newValue as number[]);\r\n        };\r\n\r\n        return (\r\n            <Box sx={{width: '80%'}}>\r\n                <div className={s.sliderWrapper}>\r\n                    <Slider\r\n                        value={value}\r\n                        onChange={onSliderChange}\r\n                        valueLabelDisplay=\"auto\"\r\n                        max={maxCardsCount}\r\n                    />\r\n                    <div className={s.sliderValues}>\r\n                        <span>{minCardsCount}</span>\r\n                        <span>{maxCardsCount}</span>\r\n                    </div>\r\n                </div>\r\n            </Box>\r\n        );\r\n    }\r\n)\r\n","import style from './PacksParams.module.scss'\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setNewMinMaxValues, toggleShowUserPacksAC} from \"../../../store/reducers/packs-reducer\";\r\nimport {FC, memo, useCallback} from \"react\";\r\nimport {RangeSlider} from \"../../../features/cards/rangeSlider/RangeSlider\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\n\r\ntype PacksParamsPropsT = {\r\n    minValueForRangeSlider: number\r\n    maxValueForRangeSlider: number\r\n}\r\n\r\nexport const PacksParams:FC<PacksParamsPropsT> = memo(({minValueForRangeSlider,maxValueForRangeSlider}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const user_id = useSelector<RootReducerType, string>(state => state.profile._id)\r\n\r\n    const onShowMyCardsClick = useCallback(() => {\r\n        dispatch(toggleShowUserPacksAC(user_id))\r\n    }, [dispatch, user_id])\r\n\r\n    const onShowAllCardsClick = useCallback(() => {\r\n        dispatch(toggleShowUserPacksAC(EMPTY_STRING))\r\n    }, [dispatch])\r\n\r\n    const handleChangeCardsCountChange = useCallback((minValue: number, maxValue: number) => {\r\n        dispatch(setNewMinMaxValues(minValue, maxValue))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <h4>Show packs cards</h4>\r\n\r\n            <div className={style.btnsWrapper}>\r\n                <SuperButton onClick={onShowMyCardsClick}>My</SuperButton>\r\n                <SuperButton onClick={onShowAllCardsClick}>All</SuperButton>\r\n            </div>\r\n\r\n            <RangeSlider minValueForRangeSlider={minValueForRangeSlider}\r\n                         maxValueForRangeSlider={maxValueForRangeSlider}\r\n                         onChangeCardsCountsChange={handleChangeCardsCountChange}/>\r\n        </div>\r\n    )\r\n})","import {RootReducerType} from \"../store/store\";\r\nimport {PackType} from \"../dal/packs/types\";\r\n\r\n\r\nexport const getPacks=(state:RootReducerType):PackType[]=>state.packs.cardPacks","import {RootReducerType} from \"../store/store\";\r\n\r\nexport const getCurrentPage=(state:RootReducerType):number=>state.packs.page","import s from './PacksList.module.scss'\r\nimport React, {memo, useCallback, useMemo, useState} from 'react';\r\nimport {UniversalTable} from \"../../../features/cards/table/UniversalTable\";\r\nimport Paginator from \"../../../features/cards/pagination/Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {changePageAC, changeSearchPackNameAC, setSortingFilter} from \"../../../store/reducers/packs-reducer\";\r\nimport {convertDateFormat} from \"../../../utils/handles\";\r\nimport SuperInputText from \"../../TestComponents/components/c1-SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {UseSetTimeoutEffect} from \"../../../common/hooks/customUseEffect\";\r\nimport {PackType} from \"../../../dal/packs/types\";\r\n\r\nimport {\r\n    modalActionType,\r\n    ModalContainer,\r\n    modalEntityType\r\n} from \"../../../common/components/Modal/ModalContainer/ModalContainer\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\nimport {MODAL_ACTION} from \"../../../enum/ModalAction\";\r\nimport {getCardsTC} from \"../../../store/thunks/cards\";\r\nimport {COMPONENT_NAME} from \"../../../enum/ComponentName\";\r\n\r\n\r\ntype PackListPropsType = {\r\n    packs: Array<PackType>\r\n    currentPage: number\r\n    totalItemCount: number\r\n    pageCount: number\r\n    sortPacks: string\r\n    setModalData: (modalAction: modalActionType, id: string) => void\r\n}\r\n\r\n\r\nexport const PacksList = memo(({\r\n                                   packs, currentPage, totalItemCount, pageCount, sortPacks,\r\n                                   setModalData\r\n                               }: PackListPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const modalEntity = useSelector<RootReducerType, modalEntityType>(state => state.modals.modalEntity)\r\n    const id = useSelector<RootReducerType, string>(state => state.modals.id)\r\n\r\n    const [text, setText] = useState<string>(EMPTY_STRING)\r\n\r\n    const portionSize = 10\r\n    const headersForPacks = {\r\n        name: 'Name', cardsCount: 'Cards',\r\n        updated: 'Last updated', user_name: 'Created by', actions: 'Actions'\r\n    }\r\n\r\n    const packsForTable = useMemo(() => {\r\n            return packs.map(({\r\n                                  cardsCount, user_name,\r\n                                  name, updated, user_id, _id\r\n                              }) => {\r\n                    updated = convertDateFormat(updated)\r\n\r\n                    return {name, cardsCount, updated, user_name, user_id, _id}}\r\n            )\r\n        }\r\n        , [packs])\r\n\r\n    const packForModal = packs.find(pack => pack._id === id)\r\n\r\n    const handleSearchPack=useCallback(()=> {\r\n        dispatch(changeSearchPackNameAC(text))\r\n    },[dispatch,text])\r\n\r\n    UseSetTimeoutEffect(handleSearchPack, text, 2000)\r\n\r\n    const handleChangePageClick = useCallback((page: number) => {\r\n            dispatch(changePageAC(page))\r\n        },\r\n        [dispatch])\r\n\r\n    const handleSetSortingClick = useCallback((headerName: string) => {\r\n        dispatch(setSortingFilter(sortPacks[0] === '0' ? `1${headerName}` : `0${headerName}`))\r\n    }, [dispatch, sortPacks])\r\n\r\n    const handleAddPackButtonClick = useCallback(() => {\r\n        setModalData(MODAL_ACTION.ADD, EMPTY_STRING)\r\n    }, [setModalData])\r\n\r\n    const handleDeleteButtonClick = useCallback((packId: string) => {\r\n        setModalData(MODAL_ACTION.DELETE, packId)\r\n    }, [setModalData])\r\n\r\n    const handleUpdatePackClick = useCallback((packId: string) => {\r\n        setModalData(MODAL_ACTION.UPDATE, packId)\r\n    }, [setModalData])\r\n\r\n    async function handleLearnPackClick(packId: string) {\r\n        await dispatch(getCardsTC({cardsPack_id: packId, max: 100, pageCount: 100}))\r\n        setModalData(MODAL_ACTION.LEARN, packId)\r\n    }\r\n\r\n    return (\r\n        <div className={s.listWrapper} aria-disabled={true}>\r\n            <h2>Packs List</h2>\r\n\r\n            <div className={s.row}>\r\n                <SuperInputText style={{width: '60%'}} value={text}\r\n                                onChangeText={setText} onEnter={handleSearchPack}/>\r\n                <SuperButton style={{width: '35%'}} onClick={handleAddPackButtonClick}>Add new pack</SuperButton>\r\n            </div>\r\n\r\n            {modalEntity && <ModalContainer pack={packForModal}/>}\r\n\r\n            <UniversalTable rows={packsForTable} headers={headersForPacks}\r\n                            onSetSortingClick={handleSetSortingClick}\r\n                            component={COMPONENT_NAME.PACKS} onDeleteButtonClick={handleDeleteButtonClick}\r\n                            onUpdateButtonClick={handleUpdatePackClick} onLearnPackClick={handleLearnPackClick}/>\r\n            <Paginator totalItemCount={totalItemCount} pageCount={pageCount} currentPage={currentPage}\r\n                       onChangePageClick={handleChangePageClick} portionSize={portionSize}/>\r\n        </div>\r\n    )\r\n})","import React, {FC, memo, useEffect} from 'react';\r\nimport s from './Packs.module.scss'\r\nimport {PacksParams} from \"./PacksParams/PacksParams\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../store/store\";\r\nimport {getPacks} from \"../../selectors/getPacks\";\r\nimport {getCurrentPage} from \"../../selectors/getCurrentPage\";\r\nimport {setAppStatusAC} from \"../../store/reducers/app-reducer\";\r\nimport {Nullable} from \"../../types/Nullable\";\r\nimport {PackType} from \"../../dal/packs/types\";\r\nimport {modalActionType} from \"../../common/components/Modal/ModalContainer/ModalContainer\";\r\nimport {withRedirect} from \"../../common/hoc/withRedirect\";\r\nimport {PacksList} from \"./PacksList\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {getPacksTC} from \"../../store/thunks/packs\";\r\ntype PacksT={\r\n    setModalData:(modalAction:modalActionType,id: string)=>void\r\n}\r\n\r\nconst Packs:FC<PacksT> = memo(({setModalData}) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const packs = useSelector<RootReducerType, Array<PackType>>(getPacks)\r\n    const currentPage = useSelector<RootReducerType, number>(getCurrentPage)\r\n    const totalItemCount = useSelector<RootReducerType, number>((state) => state.packs.cardPacksTotalCount)\r\n    const pageCount = useSelector<RootReducerType, number>((state) => state.packs.pageCount)\r\n    const minValueForRangeSlider = useSelector<RootReducerType, number>((state) => state.packs.min)\r\n    const maxValueForRangeSlider = useSelector<RootReducerType, number>((state) => state.packs.max)\r\n    const sortPacks = useSelector<RootReducerType, string>((state) => state.packs.sortPacks)\r\n    const packName = useSelector<RootReducerType, Nullable<string>>((state) => state.packs.packName)\r\n    const user_id = useSelector<RootReducerType, Nullable<string>>((state) => state.packs.user_id)\r\n\r\n    useEffect(() => {\r\n        dispatch(setAppStatusAC(STATUS.LOADING))\r\n        let idOfTimeout = setTimeout(() => {\r\n            dispatch(getPacksTC())\r\n        }, 1000)\r\n\r\n        return () => {\r\n            clearTimeout(idOfTimeout)\r\n        }\r\n    }, [dispatch, currentPage, minValueForRangeSlider, maxValueForRangeSlider, user_id,\r\n        sortPacks,packName])\r\n\r\n    if (!packs) {\r\n        return <></>\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <PacksParams minValueForRangeSlider={minValueForRangeSlider} maxValueForRangeSlider={maxValueForRangeSlider}/>\r\n            <PacksList packs={packs} currentPage={currentPage} totalItemCount={totalItemCount} pageCount={pageCount}\r\n                       sortPacks={sortPacks} setModalData={setModalData}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default withRedirect(Packs)","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, memo} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\nimport {EMPTY_STRING} from \"../../../../constants\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: FC<SuperCheckboxPropsType> = memo((\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange&&onChange(e)\r\n        onChangeChecked&&onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : EMPTY_STRING}`\r\n\r\n    return (\r\n        <label className={s.labelForCheckBox}>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n})\r\n\r\nexport default SuperCheckbox\r\n","import React from 'react';\r\nimport SuperButton from \"../../TestComponents/components/c2-SuperButton/SuperButton\";\r\nimport {useFormik} from \"formik\";\r\nimport SuperCheckbox from \"../../TestComponents/components/c3-SuperCheckbox/SuperCheckbox\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"../../../store/store\";\r\nimport {Navigate, NavLink} from 'react-router-dom';\r\nimport styles from './Login.module.scss'\r\nimport {UniversalInput} from \"../../../common/components/Input/UniversalInput\";\r\nimport {AuthData, validateLoginForm} from \"../../../utils/validates\";\r\nimport {EMPTY_STRING} from \"../../../constants\";\r\nimport {PATH} from \"../../../enum/Path\";\r\nimport {INPUT_TYPE} from \"../../../enum/InputType\";\r\nimport {BUTTON_TYPE} from \"../../../enum/ButtonTyoe\";\r\nimport {FORMIK_FIELDS_NAME} from \"../../../enum/FormikFieldNames\";\r\nimport {loginTC} from \"../../../store/thunks/login\";\r\n\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: EMPTY_STRING,\r\n            password: EMPTY_STRING,\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            const errors: AuthData = {};\r\n            validateLoginForm(values,errors)\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n\r\n        },\r\n    });\r\n\r\n    let isLoggedIn = useSelector<RootReducerType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    const conditionForDisableButton=!!(formik.errors.email||formik.errors.password)\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={PATH.START}/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <h2>Welcome</h2>\r\n            <form className={styles.form} onSubmit={formik.handleSubmit}>\r\n                <div className={styles.inputsWrapper}>\r\n                    <UniversalInput validationErr={(formik.touched.email && formik.errors.email) || EMPTY_STRING}\r\n                                    formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.EMAIL)}/>\r\n\r\n                    <UniversalInput validationErr={(formik.touched.password && formik.errors.password) || EMPTY_STRING}\r\n                                    formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.PASSWORD)}\r\n                                    type={INPUT_TYPE.PASSWORD}\r\n                                    isPassword={true}/>\r\n\r\n                </div>\r\n\r\n\r\n                <div className={styles.row}>\r\n                    <SuperCheckbox checked={formik.values.rememberMe}\r\n                                   {...formik.getFieldProps(FORMIK_FIELDS_NAME.REMEMBER_ME)}>\r\n                        Remember Me</SuperCheckbox>\r\n                    <NavLink to={PATH.FORGOT_PASSWORD}>Lost Password?</NavLink>\r\n                </div>\r\n            <SuperButton className={styles.submitBtn} type={BUTTON_TYPE.SUBMIT} disabled={conditionForDisableButton}>\r\n                    Login</SuperButton>\r\n\r\n            </form>\r\n\r\n            <NavLink className={styles.registerLink} to={PATH.REGISTRATION}>Register</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {Registration} from \"./Components/Authorization/Redistration/Registration\";\r\nimport {NotFound} from \"./Components/NotFound/NotFound\";\r\nimport {ForgotPassword} from \"./Components/Authorization/ForgotPassword/ForgotPassword\";\r\nimport {NewPassword} from \"./Components/Authorization/NewPassword/NewPassword\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom';\r\nimport {Header} from \"./Components/Header/Header\";\r\nimport styles from './App.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootReducerType} from \"./store/store\";\r\nimport Preloader from \"./common/Preloader/Preloader\";\r\nimport {Cards} from \"./Components/Cards/Cards\";\r\nimport {setModalPropsAC, setModalTypeAC} from \"./store/reducers/modal-reducer\";\r\nimport {modalActionType, modalEntityType} from \"./common/components/Modal/ModalContainer/ModalContainer\";\r\nimport Profile from \"./Components/Profile/Profile\";\r\nimport Packs from \"./Components/Packs/Packs\";\r\nimport {initializeAppTC} from \"./store/thunks/app\";\r\nimport {Nullable} from \"./types/Nullable\";\r\nimport {STATUS} from \"./enum/StatusType\";\r\nimport {PATH} from \"./enum/Path\";\r\nimport {MODAL_ENTITY} from \"./enum/ModalEntity\";\r\nimport {Login} from \"./Components/Authorization/Login/Login\";\r\nimport {setErrorText} from \"./store/reducers/app-reducer\";\r\n\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector<RootReducerType, string>(state => state.app.status)\r\n    const isInitialized = useSelector<RootReducerType, boolean>(state => state.app.isInitialized)\r\n    const error = useSelector<RootReducerType, Nullable<string>>(state => state.app.error)\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setTimeout(() => {\r\n                dispatch(setErrorText(null))\r\n            }, 3000)\r\n        }\r\n    }, [error,dispatch])\r\n\r\n    const setModalData = useCallback((modalAction: modalActionType, modalEntity: modalEntityType, id: string) => {\r\n        dispatch(setModalPropsAC(id))\r\n        dispatch(setModalTypeAC(modalAction, modalEntity))\r\n    }, [dispatch])\r\n\r\n    const setModalDataCards = useCallback((modalAction: modalActionType, id: string) => {\r\n        setModalData(modalAction, MODAL_ENTITY.CARD, id)\r\n    }, [setModalData])\r\n\r\n    const setModalDataPacks = useCallback((modalAction: modalActionType, id: string) => {\r\n        setModalData(modalAction, MODAL_ENTITY.PACK, id)\r\n    }, [setModalData])\r\n\r\n\r\n    return (\r\n\r\n        <div className={styles.appWrapper}>\r\n            <Header/>\r\n\r\n            <div className={styles.mainBlock}>\r\n                {status === STATUS.LOADING && <Preloader/>}\r\n\r\n                {!isInitialized ? <></>\r\n                    :\r\n                    <Routes>\r\n                        <Route path={PATH.START} element={<Navigate to={PATH.PROFILE}/>}/>\r\n                        <Route path={PATH.PROFILE} element={<Profile/>}/>\r\n                        <Route path={PATH.REGISTRATION} element={<Registration/>}/>\r\n                        <Route path={PATH.NOT_FOUND} element={<NotFound/>}/>\r\n                        <Route path={PATH.FORGOT_PASSWORD} element={<ForgotPassword/>}/>\r\n                        <Route path={PATH.NEW_PASSWORD} element={<NewPassword/>}>\r\n                            <Route path=\":token\" element={<NewPassword/>}/>\r\n                        </Route>\r\n                        <Route path={'*'} element={<Navigate to={PATH.NOT_FOUND}/>}/>\r\n                        <Route path={PATH.CARDS} element={<Cards setModalData={setModalDataCards}/>}>\r\n                            <Route path=\":id\" element={<Cards setModalData={setModalDataCards}/>}/>\r\n                        </Route>\r\n                        <Route path={PATH.PACKS} element={<Packs setModalData={setModalDataPacks}/>}/>\r\n                        <Route path={PATH.LOGIN} element={<Login/>}/>\r\n\r\n                    </Routes>\r\n                }\r\n            </div>\r\n            {error && <div className={styles.err}>{error}</div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\n","import {ThunkType} from \"../store\";\r\nimport {STATUS} from \"../../enum/StatusType\";\r\nimport {authorizationAPI} from \"../../dal/authorization/authorization\";\r\nimport {isAuthToggleAC} from \"../reducers/login-reducer\";\r\nimport {setProfileAC} from \"../reducers/profile-reducer\";\r\nimport {setAppStatusAC, setIsInitializedAC} from \"../reducers/app-reducer\";\r\n\r\nexport const initializeAppTC = (): ThunkType =>\r\n    async (dispatch) => {\r\n        try {\r\n            dispatch(setAppStatusAC(STATUS.LOADING))\r\n            const res = await authorizationAPI.authMe()\r\n            dispatch(isAuthToggleAC(true))\r\n            dispatch(setProfileAC(res))\r\n        } catch (err) {\r\n            dispatch(isAuthToggleAC(false))\r\n        } finally {\r\n            dispatch(setAppStatusAC(STATUS.SUCCEEDED))\r\n            dispatch(setIsInitializedAC())\r\n        }\r\n    }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n        <App/>\r\n        </Provider>\r\n    </HashRouter>\r\n    ,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__3r7Cl\",\"avatarBlock\":\"Profile_avatarBlock__3Upag\",\"avatarWrapper\":\"Profile_avatarWrapper__2Zeyo\",\"tooltip\":\"Profile_tooltip__3XPiP\",\"avatar\":\"Profile_avatar__UbSor\",\"inputForURL\":\"Profile_inputForURL__7p2zC\",\"input\":\"Profile_input__Dnkxg\",\"addPhotoURlBtn\":\"Profile_addPhotoURlBtn__3kLPu\",\"profileInfo\":\"Profile_profileInfo__3s99S\",\"info\":\"Profile_info__1ASM6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableHeader\":\"UniversalTable_tableHeader__2z-7K\",\"value\":\"UniversalTable_value__36UJW\",\"cell\":\"UniversalTable_cell__ZYQ_n\",\"btns\":\"UniversalTable_btns__2fhB_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"Modal_modalWrapper__2-u5o\",\"modalBlock\":\"Modal_modalBlock__1Y2Vy\",\"buttons\":\"Modal_buttons__3Yymo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"learnPackModalWrapper\":\"LearnPackModal_learnPackModalWrapper__wYfI1\",\"answerBlock\":\"LearnPackModal_answerBlock__1D2sY\",\"btn\":\"LearnPackModal_btn__2sZSg\",\"answer\":\"LearnPackModal_answer__3wSb2\",\"buttonsBlock\":\"LearnPackModal_buttonsBlock__2a7Or\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"UniversalInput_inputWrapper__1pOz9\",\"input\":\"UniversalInput_input__1Lh8z\",\"togglePassBtn\":\"UniversalInput_togglePassBtn__1McrO\",\"error\":\"UniversalInput_error__32yEU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNum\":\"Pagination_pageNum__1PDjj\",\"activePage\":\"Pagination_activePage__3rx4d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"ModalContainer_span__2yunN\",\"input\":\"ModalContainer_input__1W0F1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"SuperButton_btn__1J1we\",\"red\":\"SuperButton_red__3tJ4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"SuperInputText_input__3wnaw\",\"superInput\":\"SuperInputText_superInput__36AEF\",\"errorInput\":\"SuperInputText_errorInput__26Z7d\",\"error\":\"SuperInputText_error__32TC9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notFoundBackgr\":\"NotFound_notFoundBackgr__1CIhc\",\"notFoundBlock\":\"NotFound_notFoundBlock__2FTvu\",\"link\":\"NotFound_link__2yzft\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerBlock\":\"Header_headerBlock__2aNET\",\"container\":\"Header_container__3IPHz\",\"logout\":\"Header_logout__3U8OT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__rjX5L\",\"mainBlock\":\"App_mainBlock__3yE-n\",\"err\":\"App_err__2QqvI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Cards_wrapper__2Dyeu\",\"btn\":\"Cards_btn__xx2rm\",\"cursor\":\"Cards_cursor__2Ip2Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__2cpqV\",\"spanClassName\":\"SuperCheckbox_spanClassName__23i5x\",\"labelForCheckBox\":\"SuperCheckbox_labelForCheckBox__3gJhp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBarContainer\":\"NavBar_navBarContainer__3_-qn\",\"active\":\"NavBar_active__PIP3M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__Mymnz\",\"span\":\"EditableSpan_span__2ZEtC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"PacksParams_wrapper__1Q4h2\",\"btnsWrapper\":\"PacksParams_btnsWrapper__2Whek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sliderWrapper\":\"RangeSlider_sliderWrapper__1bUM7\",\"sliderValues\":\"RangeSlider_sliderValues__2yCF_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrapper\":\"PacksList_listWrapper__22qI3\",\"row\":\"PacksList_row__ZTozg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Preloader_loading__1UQ_o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Packs_wrapper__3pTOf\"};"],"sourceRoot":""}