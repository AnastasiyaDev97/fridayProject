{"version":3,"sources":["common/hooks/useResponseHandler.tsx","pages/Packs/Packs.module.scss","constants/data/index.ts","pages/Packs/index.tsx"],"names":["useResponseHandler","isLoading","isSuccess","isError","dispatch","useAppDispatch","useEffect","setAppStatus","status","STATUS","LOADING","SUCCEEDED","FAILED","setErrorText","errorText","module","exports","SORT_CARDS_TYPE","Packs","memo","useSearchParams","searchParams","actualPackName","get","currentPage","Number","min","max","sortPacks","userId","useGetPacksQuery","page","packName","user_id","pageCount","PAGE_COUNT","packs","data","className","style","wrapper","currentMinCardsValue","currentMaxCardsValue","maxCardsCount","cardPacks","totalItemCount","cardPacksTotalCount"],"mappings":"wGAAA,sEAYaA,EAAqB,SAAH,GAII,IAHjCC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAO,EAAPA,QAEMC,EAAWC,cAEjBC,qBAAU,WACJL,GACFG,EAASG,YAAa,CAAEC,OAAQC,IAAOC,WAErCR,GACFE,EAASG,YAAa,CAAEC,OAAQC,IAAOE,aAErCR,IACFC,EAASG,YAAa,CAAEC,OAAQC,IAAOG,UACvCR,EAASS,YAAa,CAAEC,UAAW,0BAEvC,GAAG,CAACV,EAAUH,EAAWC,EAAWC,GACtC,C,sBC9BAY,EAAOC,QAAU,CAAC,QAAU,uB,uGCCfC,EAGA,W,uBCOPC,EAAQC,gBAAK,WACjB,MAAuBC,cAAhBC,EAAiC,iBAArB,GAEbC,EAAiBD,EAAaE,IAAI,QAClCC,EAAcC,OAAOJ,EAAaE,IAAI,UAAY,EAClDG,EAAMD,OAAOJ,EAAaE,IAAI,QAC9BI,EAAMF,OAAOJ,EAAaE,IAAI,QAC9BK,EAAYP,EAAaE,IAAI,SAAWN,EACxCY,EAASR,EAAaE,IAAI,WAAa,GAE7C,EAKIO,YAAiB,CACnBC,KAAMP,EACNE,MACAC,MACAK,SAAUV,EACVW,QAASJ,EACTD,UAAWA,EACXM,UAAWC,MAXLC,EAAK,EAAXC,KACAnC,EAAS,EAATA,UACAD,EAAS,EAATA,UACAE,EAAO,EAAPA,QAiBF,OANAH,YAAmB,CACjBC,YACAC,YACAC,YAIA,sBAAKmC,UAAWC,IAAMC,QAAQ,UAC5B,cAAC,IAAW,CACVC,qBAAsBf,EACtBgB,qBAAsBf,EACtBgB,cAAoB,OAALP,QAAK,IAALA,OAAK,EAALA,EAAOO,gBAExB,cAAC,IAAS,CACRP,MAAY,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOQ,UACdpB,YAAaA,EACbqB,eAAqB,OAALT,QAAK,IAALA,OAAK,EAALA,EAAOU,oBACvBlB,UAAWA,EACXN,eAAgBA,MAIxB,IAEeJ,W","file":"static/js/9.5c1152e0.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\n\r\nimport { STATUS } from 'constants/app';\r\nimport { useAppDispatch } from 'store';\r\nimport { setAppStatus, setErrorText } from 'store/reducers';\r\n\r\ntype UseResponsePropsType = {\r\n  isLoading: boolean;\r\n  isSuccess: boolean;\r\n  isError: boolean;\r\n};\r\n\r\nexport const useResponseHandler = ({\r\n  isLoading,\r\n  isSuccess,\r\n  isError,\r\n}: UseResponsePropsType): void => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      dispatch(setAppStatus({ status: STATUS.LOADING }));\r\n    }\r\n    if (isSuccess) {\r\n      dispatch(setAppStatus({ status: STATUS.SUCCEEDED }));\r\n    }\r\n    if (isError) {\r\n      dispatch(setAppStatus({ status: STATUS.FAILED }));\r\n      dispatch(setErrorText({ errorText: 'Something went wrong' }));\r\n    }\r\n  }, [dispatch, isLoading, isSuccess, isError]);\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Packs_wrapper__24_NE\"};","import { LiteralObjectType } from 'common/types/LiteralObjectType';\r\n\r\nexport const SORT_CARDS_TYPE = {\r\n  nameUP: '0name',\r\n  nameDOWN: '1name',\r\n  updatedUP: '0updated',\r\n  updateDOWN: '1update',\r\n  answerUP: '0answer',\r\n  answerDOWN: '1answer',\r\n  questionUP: '0question',\r\n  questionDOWN: '1question',\r\n  gradeUP: '0grade',\r\n  gradeDOWN: '1grade',\r\n} as const;\r\n\r\nexport type SortCardType = LiteralObjectType<typeof SORT_CARDS_TYPE>;\r\n","import { memo } from 'react';\r\n\r\nimport { useSearchParams } from 'react-router-dom';\r\n\r\nimport style from './Packs.module.scss';\r\n\r\nimport { useResponseHandler } from 'common/hooks/useResponseHandler';\r\nimport { PacksList, PacksParams } from 'components';\r\nimport { SORT_CARDS_TYPE } from 'constants/data';\r\nimport { PAGE_COUNT } from 'constants/table';\r\nimport { useGetPacksQuery } from 'dal/packs';\r\n\r\nconst Packs = memo(() => {\r\n  const [searchParams] = useSearchParams();\r\n\r\n  const actualPackName = searchParams.get('name');\r\n  const currentPage = Number(searchParams.get('page')) || 1;\r\n  const min = Number(searchParams.get('min'));\r\n  const max = Number(searchParams.get('max'));\r\n  const sortPacks = searchParams.get('sort') || SORT_CARDS_TYPE.updatedUP;\r\n  const userId = searchParams.get('userId') || '';\r\n\r\n  const {\r\n    data: packs,\r\n    isSuccess,\r\n    isLoading,\r\n    isError,\r\n  } = useGetPacksQuery({\r\n    page: currentPage,\r\n    min,\r\n    max,\r\n    packName: actualPackName,\r\n    user_id: userId,\r\n    sortPacks: sortPacks,\r\n    pageCount: PAGE_COUNT,\r\n  });\r\n\r\n  useResponseHandler({\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n  });\r\n\r\n  return (\r\n    <div className={style.wrapper}>\r\n      <PacksParams\r\n        currentMinCardsValue={min}\r\n        currentMaxCardsValue={max}\r\n        maxCardsCount={packs?.maxCardsCount}\r\n      />\r\n      <PacksList\r\n        packs={packs?.cardPacks}\r\n        currentPage={currentPage}\r\n        totalItemCount={packs?.cardPacksTotalCount}\r\n        sortPacks={sortPacks}\r\n        actualPackName={actualPackName}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Packs;\r\n"],"sourceRoot":""}