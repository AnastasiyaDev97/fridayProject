{"version":3,"sources":["hooks/useResponseHandler.tsx","pages/Profile/Profile.module.scss","dal/profile/index.ts","pages/Profile/index.tsx"],"names":["useResponseHandler","isLoading","isSuccess","isError","dispatch","useAppDispatch","useEffect","setAppStatus","status","STATUS","LOADING","SUCCEEDED","FAILED","setErrorText","errorText","module","exports","useUpdateProfileMutation","clientAPI","injectEndpoints","endpoints","build","updateProfile","mutation","query","data","url","URI","toString","method","body","overrideExisting","Profile","updatedProfileData","email","useAppSelector","state","profile","avatar","name","publicCardPacksCount","profileData","useMemo","onUpdateAvatar","useCallback","newAvatar","onUpdateTitle","newTitle","setProfileData","updatedUser","className","style","wrapper","title","nameChildren","updateTitle","avatarChildren","updateImage","image","initialAvatar"],"mappings":"yGAAA,sEAYaA,EAAqB,SAAH,GAII,IAHjCC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAO,EAAPA,QAEMC,EAAWC,cAEjBC,qBAAU,WACJL,GACFG,EAASG,YAAa,CAAEC,OAAQC,IAAOC,WAErCR,GACFE,EAASG,YAAa,CAAEC,OAAQC,IAAOE,aAErCR,IACFC,EAASG,YAAa,CAAEC,OAAQC,IAAOG,UACvCR,EAASS,YAAa,CAAEC,UAAW,0BAEvC,GAAG,CAACV,EAAUH,EAAWC,EAAWC,GACtC,C,sBC9BAY,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,QAAU,yB,gHCuB5CC,E,MAjBIC,EAAUC,gBAAgB,CAC3CC,UAAW,SAACC,GAAkB,MAAM,CAClCC,cAAeD,EAAME,SAA8D,CACjFC,MAAK,SAACC,GAGJ,MAAO,CACLC,IAHU,IAAIC,IAAI,WAGTC,WACTC,OAAQ,MACRC,KAAML,EAEV,IAEH,EACDM,kBAAkB,IAGLd,yB,gCCsDAe,UAlEC,WACd,IAAM5B,EAAWC,cAEjB,EACEY,IAA0B,mBADrBK,EAAa,YAAUW,EAAkB,EAAxBR,KAA0BtB,EAAO,EAAPA,QAASF,EAAS,EAATA,UAAWC,EAAS,EAATA,UAGhEgC,EAAQC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQH,KAAK,IACnDI,EAASH,aAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQC,MAAM,IACrDC,EAAOJ,aAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQE,IAAI,IACjDC,EAAuBL,aAC3B,SAAAC,GAAK,OAAIA,EAAMC,QAAQG,oBAAoB,IAGvCC,EAAcC,mBAClB,iBAAO,CAAER,QAAOI,SAAQC,OAAMC,uBAAsB,GACpD,CAACN,EAAOI,EAAQC,EAAMC,IAGlBG,EAAiBC,uBACrB,SAACC,GACKA,IAAcP,GAChBhB,EAAc,CAAEgB,OAAQO,GAE5B,GACA,CAACvB,EAAegB,IAGZQ,EAAgBF,uBACpB,SAACG,GACKA,IAAaR,GACfjB,EAAc,CAAEiB,KAAMQ,GAE1B,GACA,CAACzB,EAAeiB,IAelB,OAZAjC,qBAAU,WACJ2B,GACF7B,EAAS4C,YAAef,EAAmBgB,aAE/C,GAAG,CAAChB,EAAoB7B,IAExBJ,YAAmB,CACjBC,YACAC,YACAC,YAGEsC,EAEA,sBAAKS,UAAWC,IAAMC,QAAQ,UAC5B,oBAAIF,UAAWC,IAAME,MAAM,0BAC3B,cAAC,IAAW,CACVZ,YAAaA,EACba,aAAc,cAAC,IAAY,CAACD,MAAOd,EAAMgB,YAAaT,IACtDU,eACE,cAAC,IAAS,CAACC,YAAad,EAAgBe,MAAOpB,GAAUqB,WAO5D,IACT,C","file":"static/js/10.571c444f.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\n\r\nimport { STATUS } from 'constants/app';\r\nimport { useAppDispatch } from 'store';\r\nimport { setAppStatus, setErrorText } from 'store/reducers';\r\n\r\ntype UseResponsePropsType = {\r\n  isLoading: boolean;\r\n  isSuccess: boolean;\r\n  isError: boolean;\r\n};\r\n\r\nexport const useResponseHandler = ({\r\n  isLoading,\r\n  isSuccess,\r\n  isError,\r\n}: UseResponsePropsType): void => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      dispatch(setAppStatus({ status: STATUS.LOADING }));\r\n    }\r\n    if (isSuccess) {\r\n      dispatch(setAppStatus({ status: STATUS.SUCCEEDED }));\r\n    }\r\n    if (isError) {\r\n      dispatch(setAppStatus({ status: STATUS.FAILED }));\r\n      dispatch(setErrorText({ errorText: 'Something went wrong' }));\r\n    }\r\n  }, [dispatch, isLoading, isSuccess, isError]);\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Profile_title__2i4e6\",\"wrapper\":\"Profile_wrapper__2Tsef\"};","import URI from 'urijs';\r\n\r\nimport { clientAPI } from '..';\r\nimport type { builderType } from '..';\r\n\r\nimport { UpdateProfilePayloadtype, UpdateProfileResponseType } from './types';\r\n\r\nconst profileAPI = clientAPI.injectEndpoints({\r\n  endpoints: (build: builderType) => ({\r\n    updateProfile: build.mutation<UpdateProfileResponseType, UpdateProfilePayloadtype>({\r\n      query(data) {\r\n        const URL = new URI(`auth/me`);\r\n\r\n        return {\r\n          url: URL.toString(),\r\n          method: 'PUT',\r\n          body: data,\r\n        };\r\n      },\r\n    }),\r\n  }),\r\n  overrideExisting: false,\r\n});\r\n\r\nexport const { useUpdateProfileMutation } = profileAPI;\r\n","import { useCallback, useEffect, useMemo } from 'react';\r\n\r\nimport style from './Profile.module.scss';\r\n\r\nimport initialAvatar from 'common/assets/images/noavatar.png';\r\nimport { ReturnComponentType } from 'common/types/ReturnComponentType';\r\nimport { EditableSpan, FileInput, ProfileCard } from 'components';\r\nimport { useUpdateProfileMutation } from 'dal/profile';\r\nimport { useResponseHandler } from 'hooks/useResponseHandler';\r\nimport { useAppDispatch, useAppSelector } from 'store';\r\nimport { setProfileData } from 'store/reducers';\r\n\r\nconst Profile = (): ReturnComponentType => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [updateProfile, { data: updatedProfileData, isError, isLoading, isSuccess }] =\r\n    useUpdateProfileMutation();\r\n\r\n  const email = useAppSelector(state => state.profile.email);\r\n  const avatar = useAppSelector(state => state.profile.avatar);\r\n  const name = useAppSelector(state => state.profile.name);\r\n  const publicCardPacksCount = useAppSelector(\r\n    state => state.profile.publicCardPacksCount,\r\n  );\r\n\r\n  const profileData = useMemo(\r\n    () => ({ email, avatar, name, publicCardPacksCount }),\r\n    [email, avatar, name, publicCardPacksCount],\r\n  );\r\n\r\n  const onUpdateAvatar = useCallback(\r\n    (newAvatar: string): void => {\r\n      if (newAvatar !== avatar) {\r\n        updateProfile({ avatar: newAvatar });\r\n      }\r\n    },\r\n    [updateProfile, avatar],\r\n  );\r\n\r\n  const onUpdateTitle = useCallback(\r\n    (newTitle: string) => {\r\n      if (newTitle !== name) {\r\n        updateProfile({ name: newTitle });\r\n      }\r\n    },\r\n    [updateProfile, name],\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (updatedProfileData) {\r\n      dispatch(setProfileData(updatedProfileData.updatedUser));\r\n    }\r\n  }, [updatedProfileData, dispatch]);\r\n\r\n  useResponseHandler({\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n  });\r\n\r\n  if (profileData) {\r\n    return (\r\n      <div className={style.wrapper}>\r\n        <h2 className={style.title}>Profile Page</h2>\r\n        <ProfileCard\r\n          profileData={profileData}\r\n          nameChildren={<EditableSpan title={name} updateTitle={onUpdateTitle} />}\r\n          avatarChildren={\r\n            <FileInput updateImage={onUpdateAvatar} image={avatar || initialAvatar} />\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Profile;\r\n"],"sourceRoot":""}