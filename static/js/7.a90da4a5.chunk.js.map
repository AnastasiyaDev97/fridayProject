{"version":3,"sources":["pages/Login/Login.module.scss","enums/ErrorMessage.ts","utils/validates.ts","pages/ForgotPassword/index.tsx"],"names":["module","exports","ERROR_MESSAGE","passwordRegex","checkEmail","values","errors","email","test","INVALID_EMAIL","REQUIRED","checkPassword","password","length","SHORT_PASSWORD","NEED_NUMBER","validates","confirmPassword","NOT_MATCHED","checkConfirmPassword","validateLoginForm","validateForgotPasswordForm","validateNewPasswordForm","ForgotPassword","dispatch","useAppDispatch","useSendPasswordMutation","sendPassword","sendPasswordResponseData","data","navigate","useNavigate","emailForRecovery","useAppSelector","state","profile","useState","isCheckEmailDataShow","setIsCheckEmailDataShow","formik","useFormik","initialValues","EMPTY_STRING","validate","onSubmit","setProfileData","resetForm","onButtonTogglePasswordStatusClick","useCallback","PATH","LOGIN","useEffect","success","className","styles","wrapper","sendMailBlock","sendMailMessage","sendMailBtn","type","onClick","form","e","handleSubmit","inputsWrapper","validationErr","touched","formikProps","getFieldProps","submitBtn","registerLink","to"],"mappings":"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","file":"static/js/7.a90da4a5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__2x3h7\",\"form\":\"Login_form__1Y1Hi\",\"inputsWrapper\":\"Login_inputsWrapper__3uV0P\",\"registrationBtns\":\"Login_registrationBtns__egO9s\",\"submitBtn\":\"Login_submitBtn__2rn6V\",\"registerLink\":\"Login_registerLink__1o25-\",\"row\":\"Login_row__Et2_Y\",\"sendMailBlock\":\"Login_sendMailBlock__3_DYD\",\"sendMailBtn\":\"Login_sendMailBtn__3L4Rz\",\"sendMailMessage\":\"Login_sendMailMessage__1FO15\",\"registerBtn\":\"Login_registerBtn__1q6kn\"};","export enum ERROR_MESSAGE {\r\n  INVALID_EMAIL = 'Invalid email address',\r\n  REQUIRED = 'Required',\r\n  SHORT_PASSWORD = 'Password must be 8 characters long',\r\n  NEED_NUMBER = 'Invalid password. Must contain one number',\r\n  NOT_MATCHED = 'Password not matched',\r\n}\r\n","import { ERROR_MESSAGE } from 'enums/ErrorMessage';\r\n\r\nexport type AuthData = {\r\n  email?: string;\r\n  password?: string;\r\n  confirmPassword?: string;\r\n};\r\n\r\ntype valuesRegisterForm = {\r\n  email?: string;\r\n  password?: string;\r\n  confirmPassword?: string;\r\n};\r\n\r\nconst minPasswordLength = 8;\r\nconst passwordRegex = /(?=.*[0-9])/;\r\nconst checkEmail = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  if (!values.email) {\r\n    errors.email = ERROR_MESSAGE.REQUIRED;\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = ERROR_MESSAGE.INVALID_EMAIL;\r\n  }\r\n};\r\n\r\nconst checkPassword = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  if (!values.password) {\r\n    errors.password = ERROR_MESSAGE.REQUIRED;\r\n  } else if (values.password.length < minPasswordLength) {\r\n    errors.password = ERROR_MESSAGE.SHORT_PASSWORD;\r\n  } else if (!passwordRegex.test(values.password)) {\r\n    errors.password = ERROR_MESSAGE.NEED_NUMBER;\r\n  }\r\n};\r\n\r\nconst checkConfirmPassword = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  if (!values.confirmPassword) {\r\n    errors.confirmPassword = ERROR_MESSAGE.REQUIRED;\r\n  }\r\n  if (values.password && values.confirmPassword) {\r\n    if (values.password !== values.confirmPassword) {\r\n      errors.confirmPassword = ERROR_MESSAGE.NOT_MATCHED;\r\n    }\r\n  }\r\n};\r\n\r\nexport const validates = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  checkEmail(values, errors);\r\n  checkPassword(values, errors);\r\n  checkConfirmPassword(values, errors);\r\n};\r\n\r\nexport const validateLoginForm = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  checkEmail(values, errors);\r\n  checkPassword(values, errors);\r\n};\r\n\r\nexport const validateForgotPasswordForm = (\r\n  values: valuesRegisterForm,\r\n  errors: AuthData,\r\n): void => {\r\n  checkEmail(values, errors);\r\n};\r\n\r\nexport const validateNewPasswordForm = (\r\n  values: valuesRegisterForm,\r\n  errors: AuthData,\r\n): void => {\r\n  checkPassword(values, errors);\r\n};\r\n","import { useCallback, useEffect, useState } from 'react';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { NavLink, useNavigate } from 'react-router-dom';\r\n\r\nimport { ReturnComponentType } from 'common/types/ReturnComponentType';\r\nimport { UniversalInput, SuperButton } from 'components';\r\nimport { EMPTY_STRING } from 'constants/index';\r\nimport { useSendPasswordMutation } from 'dal/authorization';\r\nimport { PATH } from 'enums/Path';\r\nimport styles from 'pages/Login/Login.module.scss';\r\nimport { useAppDispatch, useAppSelector } from 'store';\r\nimport { setProfileData } from 'store/reducers';\r\nimport { AuthData, validateForgotPasswordForm } from 'utils/validates';\r\n\r\nconst ForgotPassword = (): ReturnComponentType => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [sendPassword, { data: sendPasswordResponseData /* , error: addCardError */ }] =\r\n    useSendPasswordMutation();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const emailForRecovery = useAppSelector(state => state.profile.email);\r\n\r\n  const [isCheckEmailDataShow, setIsCheckEmailDataShow] = useState(false);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: EMPTY_STRING,\r\n    },\r\n    validate: values => {\r\n      const errors: AuthData = {};\r\n\r\n      validateForgotPasswordForm(values, errors);\r\n\r\n      return errors;\r\n    },\r\n\r\n    onSubmit: values => {\r\n      sendPassword(values.email);\r\n      dispatch(setProfileData({ email: values.email }));\r\n      /* dispatch(sendPassword(values.email)); */\r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n  const onButtonTogglePasswordStatusClick = useCallback(() => {\r\n    setIsCheckEmailDataShow(false);\r\n    /* dispatch(addEmailAC(EMPTY_STRING)); */\r\n    navigate(PATH.LOGIN);\r\n  }, [navigate]);\r\n\r\n  useEffect(() => {\r\n    if (sendPasswordResponseData?.success) {\r\n      setIsCheckEmailDataShow(true);\r\n    }\r\n  }, [sendPasswordResponseData]);\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      {isCheckEmailDataShow ? (\r\n        <div className={styles.sendMailBlock}>\r\n          <h2>Check email</h2>\r\n          <div className={styles.sendMailMessage}>\r\n            We&apos;ve sent an Email with instructions to {emailForRecovery}\r\n          </div>\r\n          <SuperButton\r\n            className={styles.sendMailBtn}\r\n            type=\"button\"\r\n            onClick={onButtonTogglePasswordStatusClick}\r\n          >\r\n            Ok\r\n          </SuperButton>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <h2>Forgot your password?</h2>\r\n          <form\r\n            className={styles.form}\r\n            onSubmit={e => {\r\n              formik.handleSubmit(e);\r\n            }}\r\n          >\r\n            <div className={styles.inputsWrapper}>\r\n              <UniversalInput\r\n                validationErr={\r\n                  (formik.touched.email && formik.errors.email) || EMPTY_STRING\r\n                }\r\n                formikProps={formik.getFieldProps('email')}\r\n              />\r\n            </div>\r\n\r\n            <div>Enter your email address and we will send you further instructions</div>\r\n\r\n            <SuperButton className={styles.submitBtn} type=\"submit\">\r\n              Send instructions\r\n            </SuperButton>\r\n          </form>\r\n          <div>Do you remember your password?</div>\r\n          <NavLink className={styles.registerLink} to={PATH.LOGIN}>\r\n            Try logging in\r\n          </NavLink>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n"],"sourceRoot":""}