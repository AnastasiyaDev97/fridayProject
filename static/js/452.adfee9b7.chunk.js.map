{"version":3,"file":"static/js/452.adfee9b7.chunk.js","mappings":"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","sources":["hooks/useResponseHandler.tsx","webpack://my-app/./src/pages/Cards/Cards.module.scss?3a65","pages/Cards/index.tsx"],"sourcesContent":["import { useEffect } from 'react';\r\n\r\nimport { STATUS } from 'constants/app';\r\nimport { useAppDispatch } from 'store';\r\nimport { setAppStatus, setErrorText } from 'store/reducers';\r\n\r\ntype UseResponsePropsType = {\r\n  isLoading: boolean;\r\n  isSuccess: boolean;\r\n  isError: boolean;\r\n  errorText?: string;\r\n};\r\n\r\nexport const useResponseHandler = ({\r\n  isLoading,\r\n  isSuccess,\r\n  isError,\r\n  errorText,\r\n}: UseResponsePropsType): void => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      dispatch(setAppStatus({ status: STATUS.LOADING }));\r\n    }\r\n    if (isSuccess) {\r\n      dispatch(setAppStatus({ status: STATUS.SUCCEEDED }));\r\n    }\r\n    if (isError) {\r\n      dispatch(setAppStatus({ status: STATUS.FAILED }));\r\n      dispatch(setErrorText({ errorText: errorText || 'Something went wrong' }));\r\n    }\r\n  }, [dispatch, isLoading, isSuccess, isError, errorText]);\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Cards_wrapper__D0N7r\",\"btn\":\"Cards_btn__6iCuz\",\"cursor\":\"Cards_cursor__UviEa\",\"addButton\":\"Cards_addButton__0eTTD\",\"title\":\"Cards_title__L+6TK\"};","import { memo, useState, useEffect } from 'react';\r\n\r\nimport {\r\n  useNavigate,\r\n  useParams,\r\n  useSearchParams,\r\n  createSearchParams,\r\n  useLocation,\r\n} from 'react-router-dom';\r\n\r\nimport style from './Cards.module.scss';\r\n\r\nimport { ReturnComponentType } from 'common/types';\r\nimport { Rating, SuperButton, Table, Pagination } from 'components';\r\nimport { AddModal } from 'components/Modal';\r\nimport { CARD_TABLE_FIELDS, PAGE_COUNT } from 'constants/table';\r\nimport { useGetCardsQuery } from 'dal/cards';\r\nimport { CardType } from 'dal/cards/types';\r\nimport { useResponseHandler } from 'hooks/useResponseHandler';\r\nimport { convertDateFormat } from 'utils';\r\n\r\ntype CardsForTableType = {\r\n  id: string;\r\n  userId: string;\r\n  cardsPackId: string;\r\n  tableValues: { question: string; answer: string; updated: string; rating: JSX.Element };\r\n}[];\r\n\r\nconst Cards = memo((): ReturnComponentType => {\r\n  const params = useParams<'id'>();\r\n\r\n  const [searchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const cardsPack_id = params.id;\r\n\r\n  const sortCards = searchParams.get('sort') || '0updated';\r\n  const currentPage = Number(searchParams.get('page')) || 1;\r\n\r\n  const uriParams = location?.state?.packs;\r\n\r\n  const [cards, setcards] = useState<CardsForTableType>();\r\n\r\n  const {\r\n    data: cardsData,\r\n    isSuccess,\r\n    isLoading,\r\n    isFetching,\r\n    isError,\r\n  } = useGetCardsQuery(\r\n    { cardsPack_id, page: currentPage, sortCards, pageCount: PAGE_COUNT },\r\n    { skip: !cardsPack_id },\r\n  );\r\n\r\n  const onTitleGoBackClick = (): void => {\r\n    navigate({\r\n      pathname: '/packs',\r\n      search: `?${createSearchParams(uriParams)}`,\r\n    });\r\n  };\r\n\r\n  useResponseHandler({\r\n    isLoading: isFetching || isLoading,\r\n    isSuccess,\r\n    isError,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isSuccess && cardsData?.cards) {\r\n      const formattedCardsForTable = cardsData.cards.map(\r\n        ({ question, answer, updated, grade, _id, user_id, cardsPack_id }: CardType) => {\r\n          const convertedToDateUpdated = convertDateFormat(updated);\r\n\r\n          const rating = <Rating grade={grade} />;\r\n\r\n          return {\r\n            id: _id,\r\n            userId: user_id,\r\n            cardsPackId: cardsPack_id,\r\n            tableValues: { question, answer, updated: convertedToDateUpdated, rating },\r\n          };\r\n        },\r\n      );\r\n\r\n      setcards(formattedCardsForTable);\r\n    }\r\n  }, [isSuccess, cardsData]);\r\n\r\n  if (isSuccess && cards) {\r\n    return (\r\n      <div className={style.wrapper}>\r\n        <h2 onClick={onTitleGoBackClick} className={`${style.cursor} ${style.title}`}>\r\n          &#8592; Pack Name\r\n        </h2>\r\n        <AddModal itemName=\"cards\" cardsPackId={cardsPack_id}>\r\n          {' '}\r\n          <SuperButton className={style.addButton}>Add card</SuperButton>\r\n        </AddModal>\r\n\r\n        <Table tableTitles={CARD_TABLE_FIELDS} tableItems={cards} itemName=\"cards\" />\r\n        <Pagination\r\n          totalItemCount={cardsData.cardsTotalCount}\r\n          currentPage={currentPage}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n});\r\n\r\nexport default Cards;\r\n"],"names":["useResponseHandler","_ref","isLoading","isSuccess","isError","errorText","dispatch","useAppDispatch","useEffect","setAppStatus","status","STATUS","setErrorText","memo","_location$state","params","useParams","_useSearchParams","useSearchParams","searchParams","_slicedToArray","navigate","useNavigate","location","useLocation","cardsPack_id","id","sortCards","get","currentPage","Number","uriParams","state","packs","_useState","useState","_useState2","cards","setcards","_useGetCardsQuery","useGetCardsQuery","page","pageCount","PAGE_COUNT","skip","cardsData","data","isFetching","formattedCardsForTable","map","question","answer","updated","grade","_id","userId","user_id","cardsPackId","tableValues","convertDateFormat","rating","_jsx","Rating","_jsxs","className","style","children","onClick","pathname","search","concat","createSearchParams","AddModal","itemName","SuperButton","Table","tableTitles","CARD_TABLE_FIELDS","tableItems","Pagination","totalItemCount","cardsTotalCount"],"sourceRoot":""}