{"version":3,"sources":["pages/Login/Login.module.scss","enums/ErrorMessage.ts","utils/validates.ts","utils/error-utils.ts","enums/FormikFieldName.ts","pages/NewPassword/index.tsx"],"names":["module","exports","ERROR_MESSAGE","passwordRegex","checkEmail","values","errors","email","test","INVALID_EMAIL","REQUIRED","checkPassword","password","length","SHORT_PASSWORD","NEED_NUMBER","validates","confirmPassword","NOT_MATCHED","checkConfirmPassword","validateLoginForm","validateForgotPasswordForm","validateNewPasswordForm","errorHandler","dispatch","setErrorText","errorText","setAppStatus","status","FORMIK_FIELDS_NAME","NewPassword","useSetNewPasswordMutation","setNewPassword","newPasswordData","data","isNewPasswordError","isError","useAppDispatch","token","useParams","formik","useFormik","initialValues","EMPTY_STRING","validate","onSubmit","newPassDataType","resetPasswordToken","useEffect","to","PATH","LOGIN","className","styles","wrapper","form","e","handleSubmit","inputsWrapper","validationErr","touched","formikProps","getFieldProps","PASSWORD","type","submitBtn"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,oBAAoB,cAAgB,6BAA6B,iBAAmB,gCAAgC,UAAY,yBAAyB,aAAe,4BAA4B,IAAM,mBAAmB,cAAgB,6BAA6B,YAAc,2BAA2B,gBAAkB,+BAA+B,YAAc,2B,mCCDra,IAAKC,E,wIAMX,SANWA,KAAa,sCAAbA,EAAa,oBAAbA,EAAa,oDAAbA,EAAa,wDAAbA,EAAa,mCAMxB,CANWA,MAAa,KCczB,IACMC,EAAgB,cAChBC,EAAa,SAACC,EAA4BC,GACzCD,EAAOE,MAEA,4CAA4CC,KAAKH,EAAOE,SAClED,EAAOC,MAAQL,EAAcO,eAF7BH,EAAOC,MAAQL,EAAcQ,QAIjC,EAEMC,EAAgB,SAACN,EAA4BC,GAC5CD,EAAOO,SAEDP,EAAOO,SAASC,OAbH,EActBP,EAAOM,SAAWV,EAAcY,eACtBX,EAAcK,KAAKH,EAAOO,YACpCN,EAAOM,SAAWV,EAAca,aAJhCT,EAAOM,SAAWV,EAAcQ,QAMpC,EAaaM,EAAY,SAACX,EAA4BC,GACpDF,EAAWC,EAAQC,GACnBK,EAAcN,EAAQC,GAbK,SAACD,EAA4BC,GACnDD,EAAOY,kBACVX,EAAOW,gBAAkBf,EAAcQ,UAErCL,EAAOO,UAAYP,EAAOY,iBACxBZ,EAAOO,WAAaP,EAAOY,kBAC7BX,EAAOW,gBAAkBf,EAAcgB,YAG7C,CAKEC,CAAqBd,EAAQC,EAC/B,EAEac,EAAoB,SAACf,EAA4BC,GAC5DF,EAAWC,EAAQC,GACnBK,EAAcN,EAAQC,EACxB,EAEae,EAA6B,SACxChB,EACAC,GAEAF,EAAWC,EAAQC,EACrB,EAEagB,EAA0B,SACrCjB,EACAC,GAEAK,EAAcN,EAAQC,EACxB,C,mCCnEA,8CAOaiB,EAAe,SAACC,GAC3BA,EAASC,YAAa,CAAEC,UAAW,0BACnCF,EAASG,YAAa,CAAEC,OAAQ,WAClC,C,mCCXO,IAAKC,EAAZ,kCAMC,SANWA,KAAkB,yBAAlBA,EAAkB,cAAlBA,EAAkB,oBAAlBA,EAAkB,YAAlBA,EAAkB,mCAM7B,CANWA,MAAkB,I,2KCqFfC,UApEK,WAClB,MACEC,cAA2B,mBADtBC,EAAc,YAAUC,EAAe,EAArBC,KAAgCC,EAAkB,EAA3BC,QAG1CZ,EAAWa,cAETC,EAAUC,cAAVD,MAEFE,EAASC,YAAU,CACvBC,cAAe,CACb9B,SAAU+B,KAGZC,SAAU,SAAAvC,GACR,IAAMC,EAAmB,CAAC,EAI1B,OAFAgB,YAAwBjB,EAAQC,GAEzBA,CACT,EAEAuC,SAAU,SAAAxC,GACR,IAAMyC,EAAkB,CACtBlC,SAAUP,EAAOO,SACjBmC,mBAAoBT,GAASK,KAG/BX,EAAec,EACjB,IASF,OANAE,qBAAU,WACJb,GACFZ,YAAaC,EAEjB,GAAG,CAACW,EAAoBX,IAEpBS,EACK,cAAC,IAAQ,CAACgB,GAAIC,IAAKC,QAI1B,sBAAKC,UAAWC,IAAOC,QAAQ,UAC7B,qDACA,uBACEF,UAAWC,IAAOE,KAClBV,SAAU,SAAAW,GACRhB,EAAOiB,aAAaD,EACtB,EAAE,UAEF,qBAAKJ,UAAWC,IAAOK,cAAc,SACnC,cAAC,IAAc,CACbC,cACGnB,EAAOoB,QAAQhD,UAAY4B,EAAOlC,OAAOM,UAAa+B,IAEzDkB,YAAarB,EAAOsB,cAAcjC,IAAmBkC,UACrDC,KAAK,eAIT,cAAC,IAAW,CAACZ,UAAWC,IAAOY,UAAWD,KAAK,SAAQ,sCAM/D,C","file":"static/js/5.c955f806.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__2x3h7\",\"form\":\"Login_form__1Y1Hi\",\"inputsWrapper\":\"Login_inputsWrapper__3uV0P\",\"registrationBtns\":\"Login_registrationBtns__egO9s\",\"submitBtn\":\"Login_submitBtn__2rn6V\",\"registerLink\":\"Login_registerLink__1o25-\",\"row\":\"Login_row__Et2_Y\",\"sendMailBlock\":\"Login_sendMailBlock__3_DYD\",\"sendMailBtn\":\"Login_sendMailBtn__3L4Rz\",\"sendMailMessage\":\"Login_sendMailMessage__1FO15\",\"registerBtn\":\"Login_registerBtn__1q6kn\"};","export enum ERROR_MESSAGE {\r\n  INVALID_EMAIL = 'Invalid email address',\r\n  REQUIRED = 'Required',\r\n  SHORT_PASSWORD = 'Password must be 8 characters long',\r\n  NEED_NUMBER = 'Invalid password. Must contain one number',\r\n  NOT_MATCHED = 'Password not matched',\r\n}\r\n","import { ERROR_MESSAGE } from 'enums/ErrorMessage';\r\n\r\nexport type AuthData = {\r\n  email?: string;\r\n  password?: string;\r\n  confirmPassword?: string;\r\n};\r\n\r\ntype valuesRegisterForm = {\r\n  email?: string;\r\n  password?: string;\r\n  confirmPassword?: string;\r\n};\r\n\r\nconst minPasswordLength = 8;\r\nconst passwordRegex = /(?=.*[0-9])/;\r\nconst checkEmail = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  if (!values.email) {\r\n    errors.email = ERROR_MESSAGE.REQUIRED;\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = ERROR_MESSAGE.INVALID_EMAIL;\r\n  }\r\n};\r\n\r\nconst checkPassword = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  if (!values.password) {\r\n    errors.password = ERROR_MESSAGE.REQUIRED;\r\n  } else if (values.password.length < minPasswordLength) {\r\n    errors.password = ERROR_MESSAGE.SHORT_PASSWORD;\r\n  } else if (!passwordRegex.test(values.password)) {\r\n    errors.password = ERROR_MESSAGE.NEED_NUMBER;\r\n  }\r\n};\r\n\r\nconst checkConfirmPassword = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  if (!values.confirmPassword) {\r\n    errors.confirmPassword = ERROR_MESSAGE.REQUIRED;\r\n  }\r\n  if (values.password && values.confirmPassword) {\r\n    if (values.password !== values.confirmPassword) {\r\n      errors.confirmPassword = ERROR_MESSAGE.NOT_MATCHED;\r\n    }\r\n  }\r\n};\r\n\r\nexport const validates = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  checkEmail(values, errors);\r\n  checkPassword(values, errors);\r\n  checkConfirmPassword(values, errors);\r\n};\r\n\r\nexport const validateLoginForm = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  checkEmail(values, errors);\r\n  checkPassword(values, errors);\r\n};\r\n\r\nexport const validateForgotPasswordForm = (\r\n  values: valuesRegisterForm,\r\n  errors: AuthData,\r\n): void => {\r\n  checkEmail(values, errors);\r\n};\r\n\r\nexport const validateNewPasswordForm = (\r\n  values: valuesRegisterForm,\r\n  errors: AuthData,\r\n): void => {\r\n  checkPassword(values, errors);\r\n};\r\n","import { AppDispatch } from 'store';\r\nimport { setAppStatus, setErrorText } from 'store/reducers/app';\r\n\r\nexport const catchErrorHandler = (dispatch: AppDispatch, err: any): void => {\r\n  dispatch(setErrorText({ errorText: err?.response ? err?.response?.data?.error : err }));\r\n  dispatch(setAppStatus({ status: 'failed' }));\r\n};\r\n\r\nexport const errorHandler = (dispatch: AppDispatch): void => {\r\n  dispatch(setErrorText({ errorText: 'Something went wrong' }));\r\n  dispatch(setAppStatus({ status: 'failed' }));\r\n};\r\n","export enum FORMIK_FIELDS_NAME {\r\n  REMEMBER_ME = 'rememberMe',\r\n  EMAIL = 'email',\r\n  PASSWORD = 'password',\r\n  NAME = 'name',\r\n  CONFIRM_PASSWORD = 'confirmPassword',\r\n}\r\n","import { useEffect } from 'react';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { Navigate, useParams } from 'react-router-dom';\r\n\r\nimport styles from '../Login/Login.module.scss';\r\n\r\nimport { ReturnComponentType } from 'common/types/ReturnComponentType';\r\nimport { SuperButton, UniversalInput } from 'components';\r\nimport { EMPTY_STRING } from 'constants/index';\r\nimport { useSetNewPasswordMutation } from 'dal/authorization';\r\nimport { FORMIK_FIELDS_NAME } from 'enums/FormikFieldName';\r\nimport { PATH } from 'enums/Path';\r\nimport { useAppDispatch } from 'store';\r\nimport { errorHandler } from 'utils/error-utils';\r\nimport { AuthData, validateNewPasswordForm } from 'utils/validates';\r\n\r\nconst NewPassword = (): ReturnComponentType => {\r\n  const [setNewPassword, { data: newPasswordData, isError: isNewPasswordError }] =\r\n    useSetNewPasswordMutation();\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const { token } = useParams<string>();\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password: EMPTY_STRING,\r\n    },\r\n\r\n    validate: values => {\r\n      const errors: AuthData = {};\r\n\r\n      validateNewPasswordForm(values, errors);\r\n\r\n      return errors;\r\n    },\r\n\r\n    onSubmit: values => {\r\n      const newPassDataType = {\r\n        password: values.password,\r\n        resetPasswordToken: token || EMPTY_STRING,\r\n      };\r\n\r\n      setNewPassword(newPassDataType);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (isNewPasswordError) {\r\n      errorHandler(dispatch);\r\n    }\r\n  }, [isNewPasswordError, dispatch]);\r\n\r\n  if (newPasswordData) {\r\n    return <Navigate to={PATH.LOGIN} />;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <h2>Create new password</h2>\r\n      <form\r\n        className={styles.form}\r\n        onSubmit={e => {\r\n          formik.handleSubmit(e);\r\n        }}\r\n      >\r\n        <div className={styles.inputsWrapper}>\r\n          <UniversalInput\r\n            validationErr={\r\n              (formik.touched.password && formik.errors.password) || EMPTY_STRING\r\n            }\r\n            formikProps={formik.getFieldProps(FORMIK_FIELDS_NAME.PASSWORD)}\r\n            type=\"password\"\r\n          />\r\n        </div>\r\n\r\n        <SuperButton className={styles.submitBtn} type=\"submit\">\r\n          Create new password\r\n        </SuperButton>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPassword;\r\n"],"sourceRoot":""}