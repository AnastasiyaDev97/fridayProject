{"version":3,"sources":["pages/Login/Login.module.scss","enums/ErrorMessage.ts","utils/validates.ts","utils/error-utils.ts","constants/form/index.ts","pages/Register/index.tsx"],"names":["module","exports","ERROR_MESSAGE","passwordRegex","checkEmail","values","errors","email","test","INVALID_EMAIL","REQUIRED","checkPassword","password","length","SHORT_PASSWORD","NEED_NUMBER","validates","confirmPassword","NOT_MATCHED","checkConfirmPassword","validateLoginForm","validateForgotPasswordForm","validateNewPasswordForm","errorHandler","dispatch","setErrorText","errorText","setAppStatus","status","INPUT_TYPE","REGISTRATION_FORM_FIELDS","register","placeholder","type","Register","useAppDispatch","useRegisterMutation","registerData","data","isRegisterError","isError","navigate","useNavigate","registerStatus","useAppSelector","state","auth","isRegistered","formik","useFormik","initialValues","EMPTY_STRING","validate","onSubmit","useEffect","setRegisterStatus","onCancelButtonClick","useCallback","resetForm","PATH","LOGIN","to","emailFromRegister","addedUser","replace","className","styles","wrapper","handleSubmit","form","inputsWrapper","map","validationErr","touched","formikProps","getFieldProps","row","registrationBtns","onClick","registerBtn"],"mappings":"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","file":"static/js/6.3414fdb8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__2x3h7\",\"form\":\"Login_form__1Y1Hi\",\"inputsWrapper\":\"Login_inputsWrapper__3uV0P\",\"registrationBtns\":\"Login_registrationBtns__egO9s\",\"submitBtn\":\"Login_submitBtn__2rn6V\",\"registerLink\":\"Login_registerLink__1o25-\",\"row\":\"Login_row__Et2_Y\",\"sendMailBlock\":\"Login_sendMailBlock__3_DYD\",\"sendMailBtn\":\"Login_sendMailBtn__3L4Rz\",\"sendMailMessage\":\"Login_sendMailMessage__1FO15\",\"registerBtn\":\"Login_registerBtn__1q6kn\"};","export enum ERROR_MESSAGE {\r\n  INVALID_EMAIL = 'Invalid email address',\r\n  REQUIRED = 'Required',\r\n  SHORT_PASSWORD = 'Password must be 8 characters long',\r\n  NEED_NUMBER = 'Invalid password. Must contain one number',\r\n  NOT_MATCHED = 'Password not matched',\r\n}\r\n","import { ERROR_MESSAGE } from 'enums/ErrorMessage';\r\n\r\nexport type AuthData = {\r\n  email?: string;\r\n  password?: string;\r\n  confirmPassword?: string;\r\n};\r\n\r\ntype valuesRegisterForm = {\r\n  email?: string;\r\n  password?: string;\r\n  confirmPassword?: string;\r\n};\r\n\r\nconst minPasswordLength = 8;\r\nconst passwordRegex = /(?=.*[0-9])/;\r\nconst checkEmail = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  if (!values.email) {\r\n    errors.email = ERROR_MESSAGE.REQUIRED;\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n    errors.email = ERROR_MESSAGE.INVALID_EMAIL;\r\n  }\r\n};\r\n\r\nconst checkPassword = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  if (!values.password) {\r\n    errors.password = ERROR_MESSAGE.REQUIRED;\r\n  } else if (values.password.length < minPasswordLength) {\r\n    errors.password = ERROR_MESSAGE.SHORT_PASSWORD;\r\n  } else if (!passwordRegex.test(values.password)) {\r\n    errors.password = ERROR_MESSAGE.NEED_NUMBER;\r\n  }\r\n};\r\n\r\nconst checkConfirmPassword = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  if (!values.confirmPassword) {\r\n    errors.confirmPassword = ERROR_MESSAGE.REQUIRED;\r\n  }\r\n  if (values.password && values.confirmPassword) {\r\n    if (values.password !== values.confirmPassword) {\r\n      errors.confirmPassword = ERROR_MESSAGE.NOT_MATCHED;\r\n    }\r\n  }\r\n};\r\n\r\nexport const validates = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  checkEmail(values, errors);\r\n  checkPassword(values, errors);\r\n  checkConfirmPassword(values, errors);\r\n};\r\n\r\nexport const validateLoginForm = (values: valuesRegisterForm, errors: AuthData): void => {\r\n  checkEmail(values, errors);\r\n  checkPassword(values, errors);\r\n};\r\n\r\nexport const validateForgotPasswordForm = (\r\n  values: valuesRegisterForm,\r\n  errors: AuthData,\r\n): void => {\r\n  checkEmail(values, errors);\r\n};\r\n\r\nexport const validateNewPasswordForm = (\r\n  values: valuesRegisterForm,\r\n  errors: AuthData,\r\n): void => {\r\n  checkPassword(values, errors);\r\n};\r\n","import { AppDispatch } from 'store';\r\nimport { setAppStatus, setErrorText } from 'store/reducers/app';\r\n\r\nexport const catchErrorHandler = (dispatch: AppDispatch, err: any): void => {\r\n  dispatch(setErrorText({ errorText: err?.response ? err?.response?.data?.error : err }));\r\n  dispatch(setAppStatus({ status: 'failed' }));\r\n};\r\n\r\nexport const errorHandler = (dispatch: AppDispatch): void => {\r\n  dispatch(setErrorText({ errorText: 'Something went wrong' }));\r\n  dispatch(setAppStatus({ status: 'failed' }));\r\n};\r\n","const INPUT_TYPE = {\r\n  PASSWORD: 'password',\r\n  TEXT: 'text',\r\n  EMAIL: 'email',\r\n} as const;\r\n\r\nexport const REGISTRATION_FORM_FIELDS = [\r\n  {\r\n    register: 'email',\r\n    placeholder: 'Enter your email',\r\n    type: INPUT_TYPE.EMAIL,\r\n  },\r\n  {\r\n    register: 'password',\r\n    placeholder: 'Enter a new password',\r\n    type: INPUT_TYPE.PASSWORD,\r\n  },\r\n  {\r\n    register: 'confirmPassword',\r\n    placeholder: 'Confirm your password',\r\n    type: INPUT_TYPE.PASSWORD,\r\n  },\r\n];\r\n","import { useCallback, useEffect } from 'react';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\n\r\nimport { InputType } from 'common/types/InputType';\r\nimport { ReturnComponentType } from 'common/types/ReturnComponentType';\r\nimport { SuperButton, UniversalInput } from 'components';\r\nimport { REGISTRATION_FORM_FIELDS } from 'constants/form';\r\nimport { EMPTY_STRING } from 'constants/index';\r\nimport { useRegisterMutation } from 'dal/authorization';\r\nimport { PATH } from 'enums/Path';\r\nimport styles from 'pages/Login/Login.module.scss';\r\nimport { useAppDispatch, useAppSelector } from 'store';\r\nimport { setRegisterStatus } from 'store/reducers';\r\nimport { errorHandler } from 'utils/error-utils';\r\nimport { AuthData, validates } from 'utils/validates';\r\n\r\nconst Register = (): ReturnComponentType => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [register, { data: registerData, isError: isRegisterError }] =\r\n    useRegisterMutation();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const registerStatus = useAppSelector(state => state.auth.isRegistered);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: EMPTY_STRING,\r\n      password: EMPTY_STRING,\r\n      confirmPassword: EMPTY_STRING,\r\n    },\r\n\r\n    validate: values => {\r\n      const errors: AuthData = {};\r\n\r\n      validates(values, errors);\r\n\r\n      return errors;\r\n    },\r\n\r\n    onSubmit: ({ email, password }) => {\r\n      register({ email, password });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (registerData) {\r\n      dispatch(setRegisterStatus(true));\r\n    }\r\n    if (isRegisterError) {\r\n      errorHandler(dispatch);\r\n    }\r\n  }, [registerData, dispatch, isRegisterError]);\r\n\r\n  const onCancelButtonClick = useCallback(() => {\r\n    formik.resetForm();\r\n    navigate(PATH.LOGIN);\r\n  }, [formik, navigate]);\r\n\r\n  if (registerStatus) {\r\n    return (\r\n      <Navigate\r\n        to={PATH.LOGIN}\r\n        state={{ emailFromRegister: registerData?.addedUser?.email }}\r\n        replace\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <h2>Sign up</h2>\r\n      <form onSubmit={formik.handleSubmit} className={styles.form}>\r\n        <div className={styles.inputsWrapper}>\r\n          {REGISTRATION_FORM_FIELDS.map(\r\n            ({\r\n              register,\r\n              placeholder,\r\n              type,\r\n            }: {\r\n              register: string;\r\n              placeholder: string;\r\n              type: InputType;\r\n            }) => (\r\n              <UniversalInput\r\n                validationErr={\r\n                  (formik.touched[register as keyof typeof formik.touched] &&\r\n                    formik.errors[register as keyof typeof formik.touched]) ||\r\n                  EMPTY_STRING\r\n                }\r\n                formikProps={formik.getFieldProps(register)}\r\n                type={type}\r\n                placeholder={placeholder}\r\n                key={register}\r\n              />\r\n            ),\r\n          )}\r\n        </div>\r\n\r\n        <div className={styles.row}>\r\n          <div className={styles.registrationBtns}>\r\n            <SuperButton\r\n              type=\"button\"\r\n              onClick={onCancelButtonClick}\r\n              className={styles.registerBtn}\r\n            >\r\n              Cancel\r\n            </SuperButton>\r\n            <SuperButton type=\"submit\" className={styles.registerBtn}>\r\n              Register\r\n            </SuperButton>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"sourceRoot":""}