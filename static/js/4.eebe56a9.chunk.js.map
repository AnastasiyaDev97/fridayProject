{"version":3,"sources":["common/hooks/useResponseHandler.tsx","pages/Login/Login.module.scss","constants/form/index.ts","pages/Login/index.tsx"],"names":["useResponseHandler","isLoading","isSuccess","isError","dispatch","useAppDispatch","useEffect","setAppStatus","status","STATUS","LOADING","SUCCEEDED","FAILED","setErrorText","errorText","module","exports","INPUT_TYPE","REGISTRATION_FORM_FIELDS","register","placeholder","type","FORM_FIELDS_NAME","REMEMBER_ME","EMAIL","PASSWORD","NAME","CONFIRM_PASSWORD","Login","location","useLocation","useLoginMutation","login","loginData","data","isLoggedIn","useAppSelector","state","auth","fromPage","from","pathname","userEmail","emailFromRegister","setLoginStatus","setProfileData","formik","useFormik","initialValues","email","process","password","rememberMe","validate","values","errors","validateLoginForm","onSubmit","conditionForDisableButton","to","className","styles","wrapper","title","form","handleSubmit","inputsWrapper","validationErr","touched","EMPTY_STRING","formikProps","getFieldProps","checked","submitBtn","disabled","row","registerLink","ROUTES","REGISTRATION","FORGOT_PASSWORD"],"mappings":"wGAAA,sEAYaA,EAAqB,SAAH,GAII,IAHjCC,EAAS,EAATA,UACAC,EAAS,EAATA,UACAC,EAAO,EAAPA,QAEMC,EAAWC,cAEjBC,qBAAU,WACJL,GACFG,EAASG,YAAa,CAAEC,OAAQC,IAAOC,WAErCR,GACFE,EAASG,YAAa,CAAEC,OAAQC,IAAOE,aAErCR,IACFC,EAASG,YAAa,CAAEC,OAAQC,IAAOG,UACvCR,EAASS,YAAa,CAAEC,UAAW,0BAEvC,GAAG,CAACV,EAAUH,EAAWC,EAAWC,GACtC,C,sBC9BAY,EAAOC,QAAU,CAAC,QAAU,uBAAuB,KAAO,oBAAoB,cAAgB,6BAA6B,iBAAmB,gCAAgC,UAAY,yBAAyB,aAAe,4BAA4B,IAAM,mBAAmB,MAAQ,qBAAqB,cAAgB,6BAA6B,YAAc,2BAA2B,gBAAkB,+BAA+B,YAAc,2B,mCCDzc,oEAAO,IAAMC,EACD,WAKCC,EAA2B,CACtC,CACEC,SAAU,QACVC,YAAa,mBACbC,KAPK,SASP,CACEF,SAAU,WACVC,YAAa,uBACbC,KAAMJ,GAER,CACEE,SAAU,kBACVC,YAAa,wBACbC,KAAMJ,IAIGK,EAAmB,CAC9BC,YAAa,aACbC,MAAO,QACPC,SAAU,WACVC,KAAM,OACNC,iBAAkB,kB,iMCmFLC,UA9FD,WAA4B,IAAD,MACjCxB,EAAWC,cACXwB,EAAWC,cAEjB,EAAoEC,cAAkB,mBAA/EC,EAAK,YAAUC,EAAS,EAAfC,KAAiB/B,EAAO,EAAPA,QAASF,EAAS,EAATA,UAAWC,EAAS,EAATA,UAE/CiC,EAAaC,aAAe,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,UAAU,IAE1DI,GAAmB,OAARV,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUQ,aAAK,OAAM,QAAN,EAAf,EAAiBG,YAAI,WAAb,EAAR,EAAuBC,WAAY,IAC9CC,EAA4B,OAARb,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUQ,aAAK,WAAP,EAAR,EAAiBM,kBAE3CrC,qBAAU,WACJ2B,IACF7B,EAASwC,aAAe,IACxBxC,EAASyC,YAAeZ,IAE5B,GAAG,CAACA,EAAW7B,IAEfJ,YAAmB,CACjBC,YACAC,YACAC,YAGF,IAAM2C,EAASC,YAAU,CACvBC,cAAe,CACbC,MAAOP,GAAcQ,uBACrBC,SAAWD,WACXE,YAAY,GAEdC,SAAU,SAAAC,GACR,IAAMC,EAAmB,CAAC,EAI1B,OAFAC,YAAkBF,EAAQC,GAEnBA,CACT,EACAE,SAAU,SAAAH,GACRtB,EAAMsB,EACR,IAGII,KAA+BZ,EAAOS,OAAON,QAASH,EAAOS,OAAOJ,UAE1E,OAAIhB,EACK,cAAC,IAAQ,CAACwB,GAAIpB,IAIrB,sBAAKqB,UAAWC,IAAOC,QAAQ,UAC7B,oBAAIF,UAAWC,IAAOE,MAAM,qBAC5B,uBAAMH,UAAWC,IAAOG,KAAMP,SAAUX,EAAOmB,aAAa,UAC1D,sBAAKL,UAAWC,IAAOK,cAAc,UACnC,cAAC,IAAc,CACbC,cAAgBrB,EAAOsB,QAAQnB,OAASH,EAAOS,OAAON,OAAUoB,IAChEC,YAAaxB,EAAOyB,cAAcjD,IAAiBE,SAGrD,cAAC,IAAc,CACb2C,cACGrB,EAAOsB,QAAQjB,UAAYL,EAAOS,OAAOJ,UAAakB,IAEzDC,YAAaxB,EAAOyB,cAAcjD,IAAiBG,UACnDJ,KAAK,gBAIT,cAAC,IAAa,yBACZmD,QAAS1B,EAAOQ,OAAOF,YACnBN,EAAOyB,cAAcjD,IAAiBC,cAAY,8BAKxD,cAAC,IAAW,CACVqC,UAAWC,IAAOY,UAClBpD,KAAK,SACLqD,SAAUhB,EAA0B,sBAKxC,sBAAKE,UAAWC,IAAOc,IAAI,UACzB,cAAC,IAAO,CAACf,UAAWC,IAAOe,aAAcjB,GAAIkB,IAAOC,aAAa,sBAGjE,cAAC,IAAO,CAAClB,UAAWC,IAAOe,aAAcjB,GAAIkB,IAAOE,gBAAgB,iCAM5E,C","file":"static/js/4.eebe56a9.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\n\r\nimport { STATUS } from 'constants/app';\r\nimport { useAppDispatch } from 'store';\r\nimport { setAppStatus, setErrorText } from 'store/reducers';\r\n\r\ntype UseResponsePropsType = {\r\n  isLoading: boolean;\r\n  isSuccess: boolean;\r\n  isError: boolean;\r\n};\r\n\r\nexport const useResponseHandler = ({\r\n  isLoading,\r\n  isSuccess,\r\n  isError,\r\n}: UseResponsePropsType): void => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    if (isLoading) {\r\n      dispatch(setAppStatus({ status: STATUS.LOADING }));\r\n    }\r\n    if (isSuccess) {\r\n      dispatch(setAppStatus({ status: STATUS.SUCCEEDED }));\r\n    }\r\n    if (isError) {\r\n      dispatch(setAppStatus({ status: STATUS.FAILED }));\r\n      dispatch(setErrorText({ errorText: 'Something went wrong' }));\r\n    }\r\n  }, [dispatch, isLoading, isSuccess, isError]);\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__2x3h7\",\"form\":\"Login_form__1Y1Hi\",\"inputsWrapper\":\"Login_inputsWrapper__3uV0P\",\"registrationBtns\":\"Login_registrationBtns__egO9s\",\"submitBtn\":\"Login_submitBtn__2rn6V\",\"registerLink\":\"Login_registerLink__1o25-\",\"row\":\"Login_row__Et2_Y\",\"title\":\"Login_title__20JwF\",\"sendMailBlock\":\"Login_sendMailBlock__3_DYD\",\"sendMailBtn\":\"Login_sendMailBtn__3L4Rz\",\"sendMailMessage\":\"Login_sendMailMessage__1FO15\",\"registerBtn\":\"Login_registerBtn__1q6kn\"};","export const INPUT_TYPE = {\r\n  PASSWORD: 'password',\r\n  TEXT: 'text',\r\n  EMAIL: 'email',\r\n} as const;\r\n\r\nexport const REGISTRATION_FORM_FIELDS = [\r\n  {\r\n    register: 'email',\r\n    placeholder: 'Enter your email',\r\n    type: INPUT_TYPE.EMAIL,\r\n  },\r\n  {\r\n    register: 'password',\r\n    placeholder: 'Enter a new password',\r\n    type: INPUT_TYPE.PASSWORD,\r\n  },\r\n  {\r\n    register: 'confirmPassword',\r\n    placeholder: 'Confirm your password',\r\n    type: INPUT_TYPE.PASSWORD,\r\n  },\r\n];\r\n\r\nexport const FORM_FIELDS_NAME = {\r\n  REMEMBER_ME: 'rememberMe',\r\n  EMAIL: 'email',\r\n  PASSWORD: 'password',\r\n  NAME: 'name',\r\n  CONFIRM_PASSWORD: 'confirmPassword',\r\n} as const;\r\n","import { useEffect } from 'react';\r\n\r\nimport { useFormik } from 'formik';\r\nimport { Navigate, NavLink, useLocation } from 'react-router-dom';\r\n\r\nimport styles from './Login.module.scss';\r\n\r\nimport { useResponseHandler } from 'common/hooks/useResponseHandler';\r\nimport { ReturnComponentType } from 'common/types/ReturnComponentType';\r\nimport { SuperButton, SuperCheckbox, UniversalInput } from 'components';\r\nimport { FORM_FIELDS_NAME } from 'constants/form';\r\nimport { EMPTY_STRING } from 'constants/index';\r\nimport { ROUTES } from 'constants/routes';\r\nimport { useLoginMutation } from 'dal/authorization';\r\nimport { useAppDispatch, useAppSelector } from 'store';\r\nimport { setLoginStatus, setProfileData } from 'store/reducers';\r\nimport { AuthData, validateLoginForm } from 'utils';\r\n\r\nconst Login = (): ReturnComponentType => {\r\n  const dispatch = useAppDispatch();\r\n  const location = useLocation();\r\n\r\n  const [login, { data: loginData, isError, isLoading, isSuccess }] = useLoginMutation();\r\n\r\n  const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn);\r\n\r\n  const fromPage = location?.state?.from?.pathname || '/';\r\n  const userEmail: string = location?.state?.emailFromRegister;\r\n\r\n  useEffect(() => {\r\n    if (loginData) {\r\n      dispatch(setLoginStatus(true));\r\n      dispatch(setProfileData(loginData));\r\n    }\r\n  }, [loginData, dispatch]);\r\n\r\n  useResponseHandler({\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: userEmail || (process.env.REACT_APP_EMAIL as string) || '',\r\n      password: (process.env.REACT_APP_PASSWORD as string) || '',\r\n      rememberMe: false,\r\n    },\r\n    validate: values => {\r\n      const errors: AuthData = {};\r\n\r\n      validateLoginForm(values, errors);\r\n\r\n      return errors;\r\n    },\r\n    onSubmit: values => {\r\n      login(values);\r\n    },\r\n  });\r\n\r\n  const conditionForDisableButton = !!(formik.errors.email || formik.errors.password);\r\n\r\n  if (isLoggedIn) {\r\n    return <Navigate to={fromPage} />;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      <h2 className={styles.title}>Welcome</h2>\r\n      <form className={styles.form} onSubmit={formik.handleSubmit}>\r\n        <div className={styles.inputsWrapper}>\r\n          <UniversalInput\r\n            validationErr={(formik.touched.email && formik.errors.email) || EMPTY_STRING}\r\n            formikProps={formik.getFieldProps(FORM_FIELDS_NAME.EMAIL)}\r\n          />\r\n\r\n          <UniversalInput\r\n            validationErr={\r\n              (formik.touched.password && formik.errors.password) || EMPTY_STRING\r\n            }\r\n            formikProps={formik.getFieldProps(FORM_FIELDS_NAME.PASSWORD)}\r\n            type=\"password\"\r\n          />\r\n        </div>\r\n\r\n        <SuperCheckbox\r\n          checked={formik.values.rememberMe}\r\n          {...formik.getFieldProps(FORM_FIELDS_NAME.REMEMBER_ME)}\r\n        >\r\n          Remember Me\r\n        </SuperCheckbox>\r\n\r\n        <SuperButton\r\n          className={styles.submitBtn}\r\n          type=\"submit\"\r\n          disabled={conditionForDisableButton}\r\n        >\r\n          Login\r\n        </SuperButton>\r\n      </form>\r\n      <div className={styles.row}>\r\n        <NavLink className={styles.registerLink} to={ROUTES.REGISTRATION}>\r\n          Register\r\n        </NavLink>\r\n        <NavLink className={styles.registerLink} to={ROUTES.FORGOT_PASSWORD}>\r\n          Lost Password?\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}